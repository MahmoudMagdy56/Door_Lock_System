
MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003bae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  00003bae  00003c42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800174  00800174  00003d56  2**0
                  ALLOC
  3 .stab         000032b8  00000000  00000000  00003d58  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011f8  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008348  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000084b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a101  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000afec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bd9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000befc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c189  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c957  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 b4 1b 	jmp	0x3768	; 0x3768 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 81 1b 	jmp	0x3702	; 0x3702 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ea       	ldi	r30, 0xAE	; 174
      68:	fb e3       	ldi	r31, 0x3B	; 59
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 37       	cpi	r26, 0x7C	; 124
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ed 07 	call	0xfda	; 0xfda <main>
      8a:	0c 94 d5 1d 	jmp	0x3baa	; 0x3baa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 59 1d 	jmp	0x3ab2	; 0x3ab2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e5       	ldi	r26, 0x5F	; 95
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 75 1d 	jmp	0x3aea	; 0x3aea <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 65 1d 	jmp	0x3aca	; 0x3aca <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 81 1d 	jmp	0x3b02	; 0x3b02 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 65 1d 	jmp	0x3aca	; 0x3aca <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 81 1d 	jmp	0x3b02	; 0x3b02 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 59 1d 	jmp	0x3ab2	; 0x3ab2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e5       	ldi	r24, 0x5F	; 95
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 75 1d 	jmp	0x3aea	; 0x3aea <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 65 1d 	jmp	0x3aca	; 0x3aca <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 81 1d 	jmp	0x3b02	; 0x3b02 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 65 1d 	jmp	0x3aca	; 0x3aca <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 81 1d 	jmp	0x3b02	; 0x3b02 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 65 1d 	jmp	0x3aca	; 0x3aca <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 81 1d 	jmp	0x3b02	; 0x3b02 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 69 1d 	jmp	0x3ad2	; 0x3ad2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 85 1d 	jmp	0x3b0a	; 0x3b0a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <send_password>:
/*
 * Description :
 * Function to send the password from the MC1 to MC2
 */
void send_password (uint8 *pass_arr)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	61 97       	sbiw	r28, 0x11	; 17
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	99 8b       	std	Y+17, r25	; 0x11
     b5c:	88 8b       	std	Y+16, r24	; 0x10
	uint8 Counter;
	for(Counter=0 ; Counter < 5 ; Counter++)
     b5e:	1f 86       	std	Y+15, r1	; 0x0f
     b60:	80 c0       	rjmp	.+256    	; 0xc62 <send_password+0x11c>
	{
		UART_sendByte(pass_arr[Counter]);
     b62:	8f 85       	ldd	r24, Y+15	; 0x0f
     b64:	28 2f       	mov	r18, r24
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	88 89       	ldd	r24, Y+16	; 0x10
     b6a:	99 89       	ldd	r25, Y+17	; 0x11
     b6c:	fc 01       	movw	r30, r24
     b6e:	e2 0f       	add	r30, r18
     b70:	f3 1f       	adc	r31, r19
     b72:	80 81       	ld	r24, Z
     b74:	0e 94 a5 1c 	call	0x394a	; 0x394a <UART_sendByte>
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	a0 e7       	ldi	r26, 0x70	; 112
     b7e:	b1 e4       	ldi	r27, 0x41	; 65
     b80:	8b 87       	std	Y+11, r24	; 0x0b
     b82:	9c 87       	std	Y+12, r25	; 0x0c
     b84:	ad 87       	std	Y+13, r26	; 0x0d
     b86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b88:	6b 85       	ldd	r22, Y+11	; 0x0b
     b8a:	7c 85       	ldd	r23, Y+12	; 0x0c
     b8c:	8d 85       	ldd	r24, Y+13	; 0x0d
     b8e:	9e 85       	ldd	r25, Y+14	; 0x0e
     b90:	20 e0       	ldi	r18, 0x00	; 0
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	4a ef       	ldi	r20, 0xFA	; 250
     b96:	54 e4       	ldi	r21, 0x44	; 68
     b98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b9c:	dc 01       	movw	r26, r24
     b9e:	cb 01       	movw	r24, r22
     ba0:	8f 83       	std	Y+7, r24	; 0x07
     ba2:	98 87       	std	Y+8, r25	; 0x08
     ba4:	a9 87       	std	Y+9, r26	; 0x09
     ba6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ba8:	6f 81       	ldd	r22, Y+7	; 0x07
     baa:	78 85       	ldd	r23, Y+8	; 0x08
     bac:	89 85       	ldd	r24, Y+9	; 0x09
     bae:	9a 85       	ldd	r25, Y+10	; 0x0a
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	40 e8       	ldi	r20, 0x80	; 128
     bb6:	5f e3       	ldi	r21, 0x3F	; 63
     bb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bbc:	88 23       	and	r24, r24
     bbe:	2c f4       	brge	.+10     	; 0xbca <send_password+0x84>
		__ticks = 1;
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	9e 83       	std	Y+6, r25	; 0x06
     bc6:	8d 83       	std	Y+5, r24	; 0x05
     bc8:	3f c0       	rjmp	.+126    	; 0xc48 <send_password+0x102>
	else if (__tmp > 65535)
     bca:	6f 81       	ldd	r22, Y+7	; 0x07
     bcc:	78 85       	ldd	r23, Y+8	; 0x08
     bce:	89 85       	ldd	r24, Y+9	; 0x09
     bd0:	9a 85       	ldd	r25, Y+10	; 0x0a
     bd2:	20 e0       	ldi	r18, 0x00	; 0
     bd4:	3f ef       	ldi	r19, 0xFF	; 255
     bd6:	4f e7       	ldi	r20, 0x7F	; 127
     bd8:	57 e4       	ldi	r21, 0x47	; 71
     bda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bde:	18 16       	cp	r1, r24
     be0:	4c f5       	brge	.+82     	; 0xc34 <send_password+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     be2:	6b 85       	ldd	r22, Y+11	; 0x0b
     be4:	7c 85       	ldd	r23, Y+12	; 0x0c
     be6:	8d 85       	ldd	r24, Y+13	; 0x0d
     be8:	9e 85       	ldd	r25, Y+14	; 0x0e
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	40 e2       	ldi	r20, 0x20	; 32
     bf0:	51 e4       	ldi	r21, 0x41	; 65
     bf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bf6:	dc 01       	movw	r26, r24
     bf8:	cb 01       	movw	r24, r22
     bfa:	bc 01       	movw	r22, r24
     bfc:	cd 01       	movw	r24, r26
     bfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c02:	dc 01       	movw	r26, r24
     c04:	cb 01       	movw	r24, r22
     c06:	9e 83       	std	Y+6, r25	; 0x06
     c08:	8d 83       	std	Y+5, r24	; 0x05
     c0a:	0f c0       	rjmp	.+30     	; 0xc2a <send_password+0xe4>
     c0c:	88 ec       	ldi	r24, 0xC8	; 200
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	9c 83       	std	Y+4, r25	; 0x04
     c12:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c14:	8b 81       	ldd	r24, Y+3	; 0x03
     c16:	9c 81       	ldd	r25, Y+4	; 0x04
     c18:	01 97       	sbiw	r24, 0x01	; 1
     c1a:	f1 f7       	brne	.-4      	; 0xc18 <send_password+0xd2>
     c1c:	9c 83       	std	Y+4, r25	; 0x04
     c1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c20:	8d 81       	ldd	r24, Y+5	; 0x05
     c22:	9e 81       	ldd	r25, Y+6	; 0x06
     c24:	01 97       	sbiw	r24, 0x01	; 1
     c26:	9e 83       	std	Y+6, r25	; 0x06
     c28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c2a:	8d 81       	ldd	r24, Y+5	; 0x05
     c2c:	9e 81       	ldd	r25, Y+6	; 0x06
     c2e:	00 97       	sbiw	r24, 0x00	; 0
     c30:	69 f7       	brne	.-38     	; 0xc0c <send_password+0xc6>
     c32:	14 c0       	rjmp	.+40     	; 0xc5c <send_password+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c34:	6f 81       	ldd	r22, Y+7	; 0x07
     c36:	78 85       	ldd	r23, Y+8	; 0x08
     c38:	89 85       	ldd	r24, Y+9	; 0x09
     c3a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c40:	dc 01       	movw	r26, r24
     c42:	cb 01       	movw	r24, r22
     c44:	9e 83       	std	Y+6, r25	; 0x06
     c46:	8d 83       	std	Y+5, r24	; 0x05
     c48:	8d 81       	ldd	r24, Y+5	; 0x05
     c4a:	9e 81       	ldd	r25, Y+6	; 0x06
     c4c:	9a 83       	std	Y+2, r25	; 0x02
     c4e:	89 83       	std	Y+1, r24	; 0x01
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	9a 81       	ldd	r25, Y+2	; 0x02
     c54:	01 97       	sbiw	r24, 0x01	; 1
     c56:	f1 f7       	brne	.-4      	; 0xc54 <send_password+0x10e>
     c58:	9a 83       	std	Y+2, r25	; 0x02
     c5a:	89 83       	std	Y+1, r24	; 0x01
 * Function to send the password from the MC1 to MC2
 */
void send_password (uint8 *pass_arr)
{
	uint8 Counter;
	for(Counter=0 ; Counter < 5 ; Counter++)
     c5c:	8f 85       	ldd	r24, Y+15	; 0x0f
     c5e:	8f 5f       	subi	r24, 0xFF	; 255
     c60:	8f 87       	std	Y+15, r24	; 0x0f
     c62:	8f 85       	ldd	r24, Y+15	; 0x0f
     c64:	85 30       	cpi	r24, 0x05	; 5
     c66:	08 f4       	brcc	.+2      	; 0xc6a <send_password+0x124>
     c68:	7c cf       	rjmp	.-264    	; 0xb62 <send_password+0x1c>
	{
		UART_sendByte(pass_arr[Counter]);
		_delay_ms(15);
	}
}
     c6a:	61 96       	adiw	r28, 0x11	; 17
     c6c:	0f b6       	in	r0, 0x3f	; 63
     c6e:	f8 94       	cli
     c70:	de bf       	out	0x3e, r29	; 62
     c72:	0f be       	out	0x3f, r0	; 63
     c74:	cd bf       	out	0x3d, r28	; 61
     c76:	cf 91       	pop	r28
     c78:	df 91       	pop	r29
     c7a:	08 95       	ret

00000c7c <take_password>:
 * Function to take the password of 5 chars (Numbers Only)
 * from the user and display '*' on the LCD
 */

void take_password (void)
{
     c7c:	0f 93       	push	r16
     c7e:	1f 93       	push	r17
     c80:	df 93       	push	r29
     c82:	cf 93       	push	r28
     c84:	cd b7       	in	r28, 0x3d	; 61
     c86:	de b7       	in	r29, 0x3e	; 62
     c88:	ab 97       	sbiw	r28, 0x2b	; 43
     c8a:	0f b6       	in	r0, 0x3f	; 63
     c8c:	f8 94       	cli
     c8e:	de bf       	out	0x3e, r29	; 62
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	cd bf       	out	0x3d, r28	; 61
	uint8 counter;
	for(counter = 0 ; counter<5 ; counter++)
     c94:	1b a6       	std	Y+43, r1	; 0x2b
     c96:	82 c1       	rjmp	.+772    	; 0xf9c <take_password+0x320>
	{
		Password[counter] = KEYPAD_getPressedKey();
     c98:	8b a5       	ldd	r24, Y+43	; 0x2b
     c9a:	08 2f       	mov	r16, r24
     c9c:	10 e0       	ldi	r17, 0x00	; 0
     c9e:	0e 94 cb 14 	call	0x2996	; 0x2996 <KEYPAD_getPressedKey>
     ca2:	f8 01       	movw	r30, r16
     ca4:	e9 58       	subi	r30, 0x89	; 137
     ca6:	fe 4f       	sbci	r31, 0xFE	; 254
     ca8:	80 83       	st	Z, r24
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	a8 ec       	ldi	r26, 0xC8	; 200
     cb0:	b2 e4       	ldi	r27, 0x42	; 66
     cb2:	8f a3       	std	Y+39, r24	; 0x27
     cb4:	98 a7       	std	Y+40, r25	; 0x28
     cb6:	a9 a7       	std	Y+41, r26	; 0x29
     cb8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cba:	6f a1       	ldd	r22, Y+39	; 0x27
     cbc:	78 a5       	ldd	r23, Y+40	; 0x28
     cbe:	89 a5       	ldd	r24, Y+41	; 0x29
     cc0:	9a a5       	ldd	r25, Y+42	; 0x2a
     cc2:	20 e0       	ldi	r18, 0x00	; 0
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	4a ef       	ldi	r20, 0xFA	; 250
     cc8:	54 e4       	ldi	r21, 0x44	; 68
     cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cce:	dc 01       	movw	r26, r24
     cd0:	cb 01       	movw	r24, r22
     cd2:	8b a3       	std	Y+35, r24	; 0x23
     cd4:	9c a3       	std	Y+36, r25	; 0x24
     cd6:	ad a3       	std	Y+37, r26	; 0x25
     cd8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     cda:	6b a1       	ldd	r22, Y+35	; 0x23
     cdc:	7c a1       	ldd	r23, Y+36	; 0x24
     cde:	8d a1       	ldd	r24, Y+37	; 0x25
     ce0:	9e a1       	ldd	r25, Y+38	; 0x26
     ce2:	20 e0       	ldi	r18, 0x00	; 0
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	40 e8       	ldi	r20, 0x80	; 128
     ce8:	5f e3       	ldi	r21, 0x3F	; 63
     cea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cee:	88 23       	and	r24, r24
     cf0:	2c f4       	brge	.+10     	; 0xcfc <take_password+0x80>
		__ticks = 1;
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	9a a3       	std	Y+34, r25	; 0x22
     cf8:	89 a3       	std	Y+33, r24	; 0x21
     cfa:	3f c0       	rjmp	.+126    	; 0xd7a <take_password+0xfe>
	else if (__tmp > 65535)
     cfc:	6b a1       	ldd	r22, Y+35	; 0x23
     cfe:	7c a1       	ldd	r23, Y+36	; 0x24
     d00:	8d a1       	ldd	r24, Y+37	; 0x25
     d02:	9e a1       	ldd	r25, Y+38	; 0x26
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	3f ef       	ldi	r19, 0xFF	; 255
     d08:	4f e7       	ldi	r20, 0x7F	; 127
     d0a:	57 e4       	ldi	r21, 0x47	; 71
     d0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d10:	18 16       	cp	r1, r24
     d12:	4c f5       	brge	.+82     	; 0xd66 <take_password+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d14:	6f a1       	ldd	r22, Y+39	; 0x27
     d16:	78 a5       	ldd	r23, Y+40	; 0x28
     d18:	89 a5       	ldd	r24, Y+41	; 0x29
     d1a:	9a a5       	ldd	r25, Y+42	; 0x2a
     d1c:	20 e0       	ldi	r18, 0x00	; 0
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	40 e2       	ldi	r20, 0x20	; 32
     d22:	51 e4       	ldi	r21, 0x41	; 65
     d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d28:	dc 01       	movw	r26, r24
     d2a:	cb 01       	movw	r24, r22
     d2c:	bc 01       	movw	r22, r24
     d2e:	cd 01       	movw	r24, r26
     d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d34:	dc 01       	movw	r26, r24
     d36:	cb 01       	movw	r24, r22
     d38:	9a a3       	std	Y+34, r25	; 0x22
     d3a:	89 a3       	std	Y+33, r24	; 0x21
     d3c:	0f c0       	rjmp	.+30     	; 0xd5c <take_password+0xe0>
     d3e:	88 ec       	ldi	r24, 0xC8	; 200
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	98 a3       	std	Y+32, r25	; 0x20
     d44:	8f 8f       	std	Y+31, r24	; 0x1f
     d46:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d48:	98 a1       	ldd	r25, Y+32	; 0x20
     d4a:	01 97       	sbiw	r24, 0x01	; 1
     d4c:	f1 f7       	brne	.-4      	; 0xd4a <take_password+0xce>
     d4e:	98 a3       	std	Y+32, r25	; 0x20
     d50:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d52:	89 a1       	ldd	r24, Y+33	; 0x21
     d54:	9a a1       	ldd	r25, Y+34	; 0x22
     d56:	01 97       	sbiw	r24, 0x01	; 1
     d58:	9a a3       	std	Y+34, r25	; 0x22
     d5a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d5c:	89 a1       	ldd	r24, Y+33	; 0x21
     d5e:	9a a1       	ldd	r25, Y+34	; 0x22
     d60:	00 97       	sbiw	r24, 0x00	; 0
     d62:	69 f7       	brne	.-38     	; 0xd3e <take_password+0xc2>
     d64:	14 c0       	rjmp	.+40     	; 0xd8e <take_password+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d66:	6b a1       	ldd	r22, Y+35	; 0x23
     d68:	7c a1       	ldd	r23, Y+36	; 0x24
     d6a:	8d a1       	ldd	r24, Y+37	; 0x25
     d6c:	9e a1       	ldd	r25, Y+38	; 0x26
     d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d72:	dc 01       	movw	r26, r24
     d74:	cb 01       	movw	r24, r22
     d76:	9a a3       	std	Y+34, r25	; 0x22
     d78:	89 a3       	std	Y+33, r24	; 0x21
     d7a:	89 a1       	ldd	r24, Y+33	; 0x21
     d7c:	9a a1       	ldd	r25, Y+34	; 0x22
     d7e:	9e 8f       	std	Y+30, r25	; 0x1e
     d80:	8d 8f       	std	Y+29, r24	; 0x1d
     d82:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d84:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d86:	01 97       	sbiw	r24, 0x01	; 1
     d88:	f1 f7       	brne	.-4      	; 0xd86 <take_password+0x10a>
     d8a:	9e 8f       	std	Y+30, r25	; 0x1e
     d8c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(100);
		if(Password[counter] >= 0 && Password[counter] <= 9)
     d8e:	8b a5       	ldd	r24, Y+43	; 0x2b
     d90:	88 2f       	mov	r24, r24
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	fc 01       	movw	r30, r24
     d96:	e9 58       	subi	r30, 0x89	; 137
     d98:	fe 4f       	sbci	r31, 0xFE	; 254
     d9a:	80 81       	ld	r24, Z
     d9c:	8a 30       	cpi	r24, 0x0A	; 10
     d9e:	08 f0       	brcs	.+2      	; 0xda2 <take_password+0x126>
     da0:	85 c0       	rjmp	.+266    	; 0xeac <take_password+0x230>
		{

			LCD_intgerToString(Password[counter]);
     da2:	8b a5       	ldd	r24, Y+43	; 0x2b
     da4:	88 2f       	mov	r24, r24
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	fc 01       	movw	r30, r24
     daa:	e9 58       	subi	r30, 0x89	; 137
     dac:	fe 4f       	sbci	r31, 0xFE	; 254
     dae:	80 81       	ld	r24, Z
     db0:	88 2f       	mov	r24, r24
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <LCD_intgerToString>
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	aa ef       	ldi	r26, 0xFA	; 250
     dbe:	b3 e4       	ldi	r27, 0x43	; 67
     dc0:	89 8f       	std	Y+25, r24	; 0x19
     dc2:	9a 8f       	std	Y+26, r25	; 0x1a
     dc4:	ab 8f       	std	Y+27, r26	; 0x1b
     dc6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dc8:	69 8d       	ldd	r22, Y+25	; 0x19
     dca:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dcc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dce:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dd0:	20 e0       	ldi	r18, 0x00	; 0
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	4a ef       	ldi	r20, 0xFA	; 250
     dd6:	54 e4       	ldi	r21, 0x44	; 68
     dd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ddc:	dc 01       	movw	r26, r24
     dde:	cb 01       	movw	r24, r22
     de0:	8d 8b       	std	Y+21, r24	; 0x15
     de2:	9e 8b       	std	Y+22, r25	; 0x16
     de4:	af 8b       	std	Y+23, r26	; 0x17
     de6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     de8:	6d 89       	ldd	r22, Y+21	; 0x15
     dea:	7e 89       	ldd	r23, Y+22	; 0x16
     dec:	8f 89       	ldd	r24, Y+23	; 0x17
     dee:	98 8d       	ldd	r25, Y+24	; 0x18
     df0:	20 e0       	ldi	r18, 0x00	; 0
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	40 e8       	ldi	r20, 0x80	; 128
     df6:	5f e3       	ldi	r21, 0x3F	; 63
     df8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dfc:	88 23       	and	r24, r24
     dfe:	2c f4       	brge	.+10     	; 0xe0a <take_password+0x18e>
		__ticks = 1;
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	9c 8b       	std	Y+20, r25	; 0x14
     e06:	8b 8b       	std	Y+19, r24	; 0x13
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <take_password+0x20c>
	else if (__tmp > 65535)
     e0a:	6d 89       	ldd	r22, Y+21	; 0x15
     e0c:	7e 89       	ldd	r23, Y+22	; 0x16
     e0e:	8f 89       	ldd	r24, Y+23	; 0x17
     e10:	98 8d       	ldd	r25, Y+24	; 0x18
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	3f ef       	ldi	r19, 0xFF	; 255
     e16:	4f e7       	ldi	r20, 0x7F	; 127
     e18:	57 e4       	ldi	r21, 0x47	; 71
     e1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e1e:	18 16       	cp	r1, r24
     e20:	4c f5       	brge	.+82     	; 0xe74 <take_password+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e22:	69 8d       	ldd	r22, Y+25	; 0x19
     e24:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e26:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e28:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e2a:	20 e0       	ldi	r18, 0x00	; 0
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	40 e2       	ldi	r20, 0x20	; 32
     e30:	51 e4       	ldi	r21, 0x41	; 65
     e32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e36:	dc 01       	movw	r26, r24
     e38:	cb 01       	movw	r24, r22
     e3a:	bc 01       	movw	r22, r24
     e3c:	cd 01       	movw	r24, r26
     e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e42:	dc 01       	movw	r26, r24
     e44:	cb 01       	movw	r24, r22
     e46:	9c 8b       	std	Y+20, r25	; 0x14
     e48:	8b 8b       	std	Y+19, r24	; 0x13
     e4a:	0f c0       	rjmp	.+30     	; 0xe6a <take_password+0x1ee>
     e4c:	88 ec       	ldi	r24, 0xC8	; 200
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	9a 8b       	std	Y+18, r25	; 0x12
     e52:	89 8b       	std	Y+17, r24	; 0x11
     e54:	89 89       	ldd	r24, Y+17	; 0x11
     e56:	9a 89       	ldd	r25, Y+18	; 0x12
     e58:	01 97       	sbiw	r24, 0x01	; 1
     e5a:	f1 f7       	brne	.-4      	; 0xe58 <take_password+0x1dc>
     e5c:	9a 8b       	std	Y+18, r25	; 0x12
     e5e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e60:	8b 89       	ldd	r24, Y+19	; 0x13
     e62:	9c 89       	ldd	r25, Y+20	; 0x14
     e64:	01 97       	sbiw	r24, 0x01	; 1
     e66:	9c 8b       	std	Y+20, r25	; 0x14
     e68:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e6a:	8b 89       	ldd	r24, Y+19	; 0x13
     e6c:	9c 89       	ldd	r25, Y+20	; 0x14
     e6e:	00 97       	sbiw	r24, 0x00	; 0
     e70:	69 f7       	brne	.-38     	; 0xe4c <take_password+0x1d0>
     e72:	14 c0       	rjmp	.+40     	; 0xe9c <take_password+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e74:	6d 89       	ldd	r22, Y+21	; 0x15
     e76:	7e 89       	ldd	r23, Y+22	; 0x16
     e78:	8f 89       	ldd	r24, Y+23	; 0x17
     e7a:	98 8d       	ldd	r25, Y+24	; 0x18
     e7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e80:	dc 01       	movw	r26, r24
     e82:	cb 01       	movw	r24, r22
     e84:	9c 8b       	std	Y+20, r25	; 0x14
     e86:	8b 8b       	std	Y+19, r24	; 0x13
     e88:	8b 89       	ldd	r24, Y+19	; 0x13
     e8a:	9c 89       	ldd	r25, Y+20	; 0x14
     e8c:	98 8b       	std	Y+16, r25	; 0x10
     e8e:	8f 87       	std	Y+15, r24	; 0x0f
     e90:	8f 85       	ldd	r24, Y+15	; 0x0f
     e92:	98 89       	ldd	r25, Y+16	; 0x10
     e94:	01 97       	sbiw	r24, 0x01	; 1
     e96:	f1 f7       	brne	.-4      	; 0xe94 <take_password+0x218>
     e98:	98 8b       	std	Y+16, r25	; 0x10
     e9a:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			LCD_moveCursor(1,counter);
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	6b a5       	ldd	r22, Y+43	; 0x2b
     ea0:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <LCD_moveCursor>
			LCD_displayCharacter('*');
     ea4:	8a e2       	ldi	r24, 0x2A	; 42
     ea6:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <LCD_displayCharacter>
     eaa:	03 c0       	rjmp	.+6      	; 0xeb2 <take_password+0x236>
		}
		else
		{
			counter--;
     eac:	8b a5       	ldd	r24, Y+43	; 0x2b
     eae:	81 50       	subi	r24, 0x01	; 1
     eb0:	8b a7       	std	Y+43, r24	; 0x2b
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	a0 e7       	ldi	r26, 0x70	; 112
     eb8:	b1 e4       	ldi	r27, 0x41	; 65
     eba:	8b 87       	std	Y+11, r24	; 0x0b
     ebc:	9c 87       	std	Y+12, r25	; 0x0c
     ebe:	ad 87       	std	Y+13, r26	; 0x0d
     ec0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ec2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ec4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ec6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ec8:	9e 85       	ldd	r25, Y+14	; 0x0e
     eca:	20 e0       	ldi	r18, 0x00	; 0
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	4a ef       	ldi	r20, 0xFA	; 250
     ed0:	54 e4       	ldi	r21, 0x44	; 68
     ed2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ed6:	dc 01       	movw	r26, r24
     ed8:	cb 01       	movw	r24, r22
     eda:	8f 83       	std	Y+7, r24	; 0x07
     edc:	98 87       	std	Y+8, r25	; 0x08
     ede:	a9 87       	std	Y+9, r26	; 0x09
     ee0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ee2:	6f 81       	ldd	r22, Y+7	; 0x07
     ee4:	78 85       	ldd	r23, Y+8	; 0x08
     ee6:	89 85       	ldd	r24, Y+9	; 0x09
     ee8:	9a 85       	ldd	r25, Y+10	; 0x0a
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	40 e8       	ldi	r20, 0x80	; 128
     ef0:	5f e3       	ldi	r21, 0x3F	; 63
     ef2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ef6:	88 23       	and	r24, r24
     ef8:	2c f4       	brge	.+10     	; 0xf04 <take_password+0x288>
		__ticks = 1;
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	9e 83       	std	Y+6, r25	; 0x06
     f00:	8d 83       	std	Y+5, r24	; 0x05
     f02:	3f c0       	rjmp	.+126    	; 0xf82 <take_password+0x306>
	else if (__tmp > 65535)
     f04:	6f 81       	ldd	r22, Y+7	; 0x07
     f06:	78 85       	ldd	r23, Y+8	; 0x08
     f08:	89 85       	ldd	r24, Y+9	; 0x09
     f0a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	3f ef       	ldi	r19, 0xFF	; 255
     f10:	4f e7       	ldi	r20, 0x7F	; 127
     f12:	57 e4       	ldi	r21, 0x47	; 71
     f14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f18:	18 16       	cp	r1, r24
     f1a:	4c f5       	brge	.+82     	; 0xf6e <take_password+0x2f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f1c:	6b 85       	ldd	r22, Y+11	; 0x0b
     f1e:	7c 85       	ldd	r23, Y+12	; 0x0c
     f20:	8d 85       	ldd	r24, Y+13	; 0x0d
     f22:	9e 85       	ldd	r25, Y+14	; 0x0e
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	40 e2       	ldi	r20, 0x20	; 32
     f2a:	51 e4       	ldi	r21, 0x41	; 65
     f2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f30:	dc 01       	movw	r26, r24
     f32:	cb 01       	movw	r24, r22
     f34:	bc 01       	movw	r22, r24
     f36:	cd 01       	movw	r24, r26
     f38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f3c:	dc 01       	movw	r26, r24
     f3e:	cb 01       	movw	r24, r22
     f40:	9e 83       	std	Y+6, r25	; 0x06
     f42:	8d 83       	std	Y+5, r24	; 0x05
     f44:	0f c0       	rjmp	.+30     	; 0xf64 <take_password+0x2e8>
     f46:	88 ec       	ldi	r24, 0xC8	; 200
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	9c 83       	std	Y+4, r25	; 0x04
     f4c:	8b 83       	std	Y+3, r24	; 0x03
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	9c 81       	ldd	r25, Y+4	; 0x04
     f52:	01 97       	sbiw	r24, 0x01	; 1
     f54:	f1 f7       	brne	.-4      	; 0xf52 <take_password+0x2d6>
     f56:	9c 83       	std	Y+4, r25	; 0x04
     f58:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f5a:	8d 81       	ldd	r24, Y+5	; 0x05
     f5c:	9e 81       	ldd	r25, Y+6	; 0x06
     f5e:	01 97       	sbiw	r24, 0x01	; 1
     f60:	9e 83       	std	Y+6, r25	; 0x06
     f62:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f64:	8d 81       	ldd	r24, Y+5	; 0x05
     f66:	9e 81       	ldd	r25, Y+6	; 0x06
     f68:	00 97       	sbiw	r24, 0x00	; 0
     f6a:	69 f7       	brne	.-38     	; 0xf46 <take_password+0x2ca>
     f6c:	14 c0       	rjmp	.+40     	; 0xf96 <take_password+0x31a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f6e:	6f 81       	ldd	r22, Y+7	; 0x07
     f70:	78 85       	ldd	r23, Y+8	; 0x08
     f72:	89 85       	ldd	r24, Y+9	; 0x09
     f74:	9a 85       	ldd	r25, Y+10	; 0x0a
     f76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f7a:	dc 01       	movw	r26, r24
     f7c:	cb 01       	movw	r24, r22
     f7e:	9e 83       	std	Y+6, r25	; 0x06
     f80:	8d 83       	std	Y+5, r24	; 0x05
     f82:	8d 81       	ldd	r24, Y+5	; 0x05
     f84:	9e 81       	ldd	r25, Y+6	; 0x06
     f86:	9a 83       	std	Y+2, r25	; 0x02
     f88:	89 83       	std	Y+1, r24	; 0x01
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	9a 81       	ldd	r25, Y+2	; 0x02
     f8e:	01 97       	sbiw	r24, 0x01	; 1
     f90:	f1 f7       	brne	.-4      	; 0xf8e <take_password+0x312>
     f92:	9a 83       	std	Y+2, r25	; 0x02
     f94:	89 83       	std	Y+1, r24	; 0x01
 */

void take_password (void)
{
	uint8 counter;
	for(counter = 0 ; counter<5 ; counter++)
     f96:	8b a5       	ldd	r24, Y+43	; 0x2b
     f98:	8f 5f       	subi	r24, 0xFF	; 255
     f9a:	8b a7       	std	Y+43, r24	; 0x2b
     f9c:	8b a5       	ldd	r24, Y+43	; 0x2b
     f9e:	85 30       	cpi	r24, 0x05	; 5
     fa0:	08 f4       	brcc	.+2      	; 0xfa4 <take_password+0x328>
     fa2:	7a ce       	rjmp	.-780    	; 0xc98 <take_password+0x1c>
		{
			counter--;
		}
		_delay_ms(15);
	}
	while(KEYPAD_getPressedKey() != '=');
     fa4:	0e 94 cb 14 	call	0x2996	; 0x2996 <KEYPAD_getPressedKey>
     fa8:	8d 33       	cpi	r24, 0x3D	; 61
     faa:	e1 f7       	brne	.-8      	; 0xfa4 <take_password+0x328>
}
     fac:	ab 96       	adiw	r28, 0x2b	; 43
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	f8 94       	cli
     fb2:	de bf       	out	0x3e, r29	; 62
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	cd bf       	out	0x3d, r28	; 61
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	1f 91       	pop	r17
     fbe:	0f 91       	pop	r16
     fc0:	08 95       	ret

00000fc2 <TIMER1_tick>:
 * Description :
 * Function to increment the tick.
 */

void TIMER1_tick(void)
{
     fc2:	df 93       	push	r29
     fc4:	cf 93       	push	r28
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
	Timer1Ticks++;
     fca:	80 91 74 01 	lds	r24, 0x0174
     fce:	8f 5f       	subi	r24, 0xFF	; 255
     fd0:	80 93 74 01 	sts	0x0174, r24
}
     fd4:	cf 91       	pop	r28
     fd6:	df 91       	pop	r29
     fd8:	08 95       	ret

00000fda <main>:




int main()
{
     fda:	0f 93       	push	r16
     fdc:	1f 93       	push	r17
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
     fe6:	ca 5b       	subi	r28, 0xBA	; 186
     fe8:	d0 40       	sbci	r29, 0x00	; 0
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	f8 94       	cli
     fee:	de bf       	out	0x3e, r29	; 62
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1<<7); /* Enable Global Interrupt */
     ff4:	af e5       	ldi	r26, 0x5F	; 95
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	ef e5       	ldi	r30, 0x5F	; 95
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	80 68       	ori	r24, 0x80	; 128
    1000:	8c 93       	st	X, r24

	uint8 NumOfTries = 0; /* Variable to count the number of wrong tries entered by the user */
    1002:	fe 01       	movw	r30, r28
    1004:	e4 55       	subi	r30, 0x54	; 84
    1006:	ff 4f       	sbci	r31, 0xFF	; 255
    1008:	10 82       	st	Z, r1
	uint8 PassIsCorrectFlag = 0; /* Variable to check on password */
    100a:	fe 01       	movw	r30, r28
    100c:	e5 55       	subi	r30, 0x55	; 85
    100e:	ff 4f       	sbci	r31, 0xFF	; 255
    1010:	10 82       	st	Z, r1
	uint8 PassIsSetFlag = 0; /* Variable to check on password is already setted up or not */
    1012:	fe 01       	movw	r30, r28
    1014:	e6 55       	subi	r30, 0x56	; 86
    1016:	ff 4f       	sbci	r31, 0xFF	; 255
    1018:	10 82       	st	Z, r1
	uint8 PassIsMatchFlag = 0; /* Variable to check if the two passwords matches or not */
    101a:	fe 01       	movw	r30, r28
    101c:	e7 55       	subi	r30, 0x57	; 87
    101e:	ff 4f       	sbci	r31, 0xFF	; 255
    1020:	10 82       	st	Z, r1

	/* UART Configuration */
	UART_ConfigType UART_Configration = {UART_EIGHT_BIT_MODE , UART_DISABLE_PARITY ,
			UART_ONE_STOP_BIT, 9600 /* baud rate */};
    1022:	ce 01       	movw	r24, r28
    1024:	83 55       	subi	r24, 0x53	; 83
    1026:	9f 4f       	sbci	r25, 0xFF	; 255
    1028:	ca 54       	subi	r28, 0x4A	; 74
    102a:	df 4f       	sbci	r29, 0xFF	; 255
    102c:	99 83       	std	Y+1, r25	; 0x01
    102e:	88 83       	st	Y, r24
    1030:	c6 5b       	subi	r28, 0xB6	; 182
    1032:	d0 40       	sbci	r29, 0x00	; 0
    1034:	2d e6       	ldi	r18, 0x6D	; 109
    1036:	31 e0       	ldi	r19, 0x01	; 1
    1038:	c8 54       	subi	r28, 0x48	; 72
    103a:	df 4f       	sbci	r29, 0xFF	; 255
    103c:	39 83       	std	Y+1, r19	; 0x01
    103e:	28 83       	st	Y, r18
    1040:	c8 5b       	subi	r28, 0xB8	; 184
    1042:	d0 40       	sbci	r29, 0x00	; 0
    1044:	37 e0       	ldi	r19, 0x07	; 7
    1046:	c6 54       	subi	r28, 0x46	; 70
    1048:	df 4f       	sbci	r29, 0xFF	; 255
    104a:	38 83       	st	Y, r19
    104c:	ca 5b       	subi	r28, 0xBA	; 186
    104e:	d0 40       	sbci	r29, 0x00	; 0
    1050:	c8 54       	subi	r28, 0x48	; 72
    1052:	df 4f       	sbci	r29, 0xFF	; 255
    1054:	e8 81       	ld	r30, Y
    1056:	f9 81       	ldd	r31, Y+1	; 0x01
    1058:	c8 5b       	subi	r28, 0xB8	; 184
    105a:	d0 40       	sbci	r29, 0x00	; 0
    105c:	00 80       	ld	r0, Z
    105e:	c8 54       	subi	r28, 0x48	; 72
    1060:	df 4f       	sbci	r29, 0xFF	; 255
    1062:	28 81       	ld	r18, Y
    1064:	39 81       	ldd	r19, Y+1	; 0x01
    1066:	c8 5b       	subi	r28, 0xB8	; 184
    1068:	d0 40       	sbci	r29, 0x00	; 0
    106a:	2f 5f       	subi	r18, 0xFF	; 255
    106c:	3f 4f       	sbci	r19, 0xFF	; 255
    106e:	c8 54       	subi	r28, 0x48	; 72
    1070:	df 4f       	sbci	r29, 0xFF	; 255
    1072:	39 83       	std	Y+1, r19	; 0x01
    1074:	28 83       	st	Y, r18
    1076:	c8 5b       	subi	r28, 0xB8	; 184
    1078:	d0 40       	sbci	r29, 0x00	; 0
    107a:	ca 54       	subi	r28, 0x4A	; 74
    107c:	df 4f       	sbci	r29, 0xFF	; 255
    107e:	e8 81       	ld	r30, Y
    1080:	f9 81       	ldd	r31, Y+1	; 0x01
    1082:	c6 5b       	subi	r28, 0xB6	; 182
    1084:	d0 40       	sbci	r29, 0x00	; 0
    1086:	00 82       	st	Z, r0
    1088:	ca 54       	subi	r28, 0x4A	; 74
    108a:	df 4f       	sbci	r29, 0xFF	; 255
    108c:	28 81       	ld	r18, Y
    108e:	39 81       	ldd	r19, Y+1	; 0x01
    1090:	c6 5b       	subi	r28, 0xB6	; 182
    1092:	d0 40       	sbci	r29, 0x00	; 0
    1094:	2f 5f       	subi	r18, 0xFF	; 255
    1096:	3f 4f       	sbci	r19, 0xFF	; 255
    1098:	ca 54       	subi	r28, 0x4A	; 74
    109a:	df 4f       	sbci	r29, 0xFF	; 255
    109c:	39 83       	std	Y+1, r19	; 0x01
    109e:	28 83       	st	Y, r18
    10a0:	c6 5b       	subi	r28, 0xB6	; 182
    10a2:	d0 40       	sbci	r29, 0x00	; 0
    10a4:	c6 54       	subi	r28, 0x46	; 70
    10a6:	df 4f       	sbci	r29, 0xFF	; 255
    10a8:	38 81       	ld	r19, Y
    10aa:	ca 5b       	subi	r28, 0xBA	; 186
    10ac:	d0 40       	sbci	r29, 0x00	; 0
    10ae:	31 50       	subi	r19, 0x01	; 1
    10b0:	c6 54       	subi	r28, 0x46	; 70
    10b2:	df 4f       	sbci	r29, 0xFF	; 255
    10b4:	38 83       	st	Y, r19
    10b6:	ca 5b       	subi	r28, 0xBA	; 186
    10b8:	d0 40       	sbci	r29, 0x00	; 0
    10ba:	c6 54       	subi	r28, 0x46	; 70
    10bc:	df 4f       	sbci	r29, 0xFF	; 255
    10be:	88 81       	ld	r24, Y
    10c0:	ca 5b       	subi	r28, 0xBA	; 186
    10c2:	d0 40       	sbci	r29, 0x00	; 0
    10c4:	88 23       	and	r24, r24
    10c6:	21 f6       	brne	.-120    	; 0x1050 <main+0x76>


	LCD_init();
    10c8:	0e 94 56 16 	call	0x2cac	; 0x2cac <LCD_init>
	UART_init(&UART_Configration);
    10cc:	ce 01       	movw	r24, r28
    10ce:	83 55       	subi	r24, 0x53	; 83
    10d0:	9f 4f       	sbci	r25, 0xFF	; 255
    10d2:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <UART_init>
	Timer1_setCallBack(&TIMER1_tick);
    10d6:	81 ee       	ldi	r24, 0xE1	; 225
    10d8:	97 e0       	ldi	r25, 0x07	; 7
    10da:	0e 94 3f 1c 	call	0x387e	; 0x387e <Timer1_setCallBack>

	LCD_moveCursor(0,2);
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	62 e0       	ldi	r22, 0x02	; 2
    10e2:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <LCD_moveCursor>
	LCD_displayString("Door Locker");
    10e6:	80 e6       	ldi	r24, 0x60	; 96
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <LCD_displayString>
	LCD_moveCursor(1,0);
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	60 e0       	ldi	r22, 0x00	; 0
    10f2:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <LCD_moveCursor>
	LCD_displayString("    System  ");
    10f6:	8c e6       	ldi	r24, 0x6C	; 108
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <LCD_displayString>
    10fe:	fe 01       	movw	r30, r28
    1100:	eb 55       	subi	r30, 0x5B	; 91
    1102:	ff 4f       	sbci	r31, 0xFF	; 255
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	90 e8       	ldi	r25, 0x80	; 128
    1108:	ab eb       	ldi	r26, 0xBB	; 187
    110a:	b4 e4       	ldi	r27, 0x44	; 68
    110c:	80 83       	st	Z, r24
    110e:	91 83       	std	Z+1, r25	; 0x01
    1110:	a2 83       	std	Z+2, r26	; 0x02
    1112:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1114:	8e 01       	movw	r16, r28
    1116:	0f 55       	subi	r16, 0x5F	; 95
    1118:	1f 4f       	sbci	r17, 0xFF	; 255
    111a:	fe 01       	movw	r30, r28
    111c:	eb 55       	subi	r30, 0x5B	; 91
    111e:	ff 4f       	sbci	r31, 0xFF	; 255
    1120:	60 81       	ld	r22, Z
    1122:	71 81       	ldd	r23, Z+1	; 0x01
    1124:	82 81       	ldd	r24, Z+2	; 0x02
    1126:	93 81       	ldd	r25, Z+3	; 0x03
    1128:	20 e0       	ldi	r18, 0x00	; 0
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	4a ef       	ldi	r20, 0xFA	; 250
    112e:	54 e4       	ldi	r21, 0x44	; 68
    1130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1134:	dc 01       	movw	r26, r24
    1136:	cb 01       	movw	r24, r22
    1138:	f8 01       	movw	r30, r16
    113a:	80 83       	st	Z, r24
    113c:	91 83       	std	Z+1, r25	; 0x01
    113e:	a2 83       	std	Z+2, r26	; 0x02
    1140:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1142:	fe 01       	movw	r30, r28
    1144:	ef 55       	subi	r30, 0x5F	; 95
    1146:	ff 4f       	sbci	r31, 0xFF	; 255
    1148:	60 81       	ld	r22, Z
    114a:	71 81       	ldd	r23, Z+1	; 0x01
    114c:	82 81       	ldd	r24, Z+2	; 0x02
    114e:	93 81       	ldd	r25, Z+3	; 0x03
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	40 e8       	ldi	r20, 0x80	; 128
    1156:	5f e3       	ldi	r21, 0x3F	; 63
    1158:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    115c:	88 23       	and	r24, r24
    115e:	44 f4       	brge	.+16     	; 0x1170 <main+0x196>
		__ticks = 1;
    1160:	fe 01       	movw	r30, r28
    1162:	e1 56       	subi	r30, 0x61	; 97
    1164:	ff 4f       	sbci	r31, 0xFF	; 255
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	91 83       	std	Z+1, r25	; 0x01
    116c:	80 83       	st	Z, r24
    116e:	64 c0       	rjmp	.+200    	; 0x1238 <main+0x25e>
	else if (__tmp > 65535)
    1170:	fe 01       	movw	r30, r28
    1172:	ef 55       	subi	r30, 0x5F	; 95
    1174:	ff 4f       	sbci	r31, 0xFF	; 255
    1176:	60 81       	ld	r22, Z
    1178:	71 81       	ldd	r23, Z+1	; 0x01
    117a:	82 81       	ldd	r24, Z+2	; 0x02
    117c:	93 81       	ldd	r25, Z+3	; 0x03
    117e:	20 e0       	ldi	r18, 0x00	; 0
    1180:	3f ef       	ldi	r19, 0xFF	; 255
    1182:	4f e7       	ldi	r20, 0x7F	; 127
    1184:	57 e4       	ldi	r21, 0x47	; 71
    1186:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    118a:	18 16       	cp	r1, r24
    118c:	0c f0       	brlt	.+2      	; 0x1190 <main+0x1b6>
    118e:	43 c0       	rjmp	.+134    	; 0x1216 <main+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1190:	fe 01       	movw	r30, r28
    1192:	eb 55       	subi	r30, 0x5B	; 91
    1194:	ff 4f       	sbci	r31, 0xFF	; 255
    1196:	60 81       	ld	r22, Z
    1198:	71 81       	ldd	r23, Z+1	; 0x01
    119a:	82 81       	ldd	r24, Z+2	; 0x02
    119c:	93 81       	ldd	r25, Z+3	; 0x03
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	40 e2       	ldi	r20, 0x20	; 32
    11a4:	51 e4       	ldi	r21, 0x41	; 65
    11a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11aa:	dc 01       	movw	r26, r24
    11ac:	cb 01       	movw	r24, r22
    11ae:	8e 01       	movw	r16, r28
    11b0:	01 56       	subi	r16, 0x61	; 97
    11b2:	1f 4f       	sbci	r17, 0xFF	; 255
    11b4:	bc 01       	movw	r22, r24
    11b6:	cd 01       	movw	r24, r26
    11b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11bc:	dc 01       	movw	r26, r24
    11be:	cb 01       	movw	r24, r22
    11c0:	f8 01       	movw	r30, r16
    11c2:	91 83       	std	Z+1, r25	; 0x01
    11c4:	80 83       	st	Z, r24
    11c6:	1f c0       	rjmp	.+62     	; 0x1206 <main+0x22c>
    11c8:	fe 01       	movw	r30, r28
    11ca:	e3 56       	subi	r30, 0x63	; 99
    11cc:	ff 4f       	sbci	r31, 0xFF	; 255
    11ce:	88 ec       	ldi	r24, 0xC8	; 200
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	91 83       	std	Z+1, r25	; 0x01
    11d4:	80 83       	st	Z, r24
    11d6:	fe 01       	movw	r30, r28
    11d8:	e3 56       	subi	r30, 0x63	; 99
    11da:	ff 4f       	sbci	r31, 0xFF	; 255
    11dc:	80 81       	ld	r24, Z
    11de:	91 81       	ldd	r25, Z+1	; 0x01
    11e0:	01 97       	sbiw	r24, 0x01	; 1
    11e2:	f1 f7       	brne	.-4      	; 0x11e0 <main+0x206>
    11e4:	fe 01       	movw	r30, r28
    11e6:	e3 56       	subi	r30, 0x63	; 99
    11e8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ea:	91 83       	std	Z+1, r25	; 0x01
    11ec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ee:	de 01       	movw	r26, r28
    11f0:	a1 56       	subi	r26, 0x61	; 97
    11f2:	bf 4f       	sbci	r27, 0xFF	; 255
    11f4:	fe 01       	movw	r30, r28
    11f6:	e1 56       	subi	r30, 0x61	; 97
    11f8:	ff 4f       	sbci	r31, 0xFF	; 255
    11fa:	80 81       	ld	r24, Z
    11fc:	91 81       	ldd	r25, Z+1	; 0x01
    11fe:	01 97       	sbiw	r24, 0x01	; 1
    1200:	11 96       	adiw	r26, 0x01	; 1
    1202:	9c 93       	st	X, r25
    1204:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1206:	fe 01       	movw	r30, r28
    1208:	e1 56       	subi	r30, 0x61	; 97
    120a:	ff 4f       	sbci	r31, 0xFF	; 255
    120c:	80 81       	ld	r24, Z
    120e:	91 81       	ldd	r25, Z+1	; 0x01
    1210:	00 97       	sbiw	r24, 0x00	; 0
    1212:	d1 f6       	brne	.-76     	; 0x11c8 <main+0x1ee>
    1214:	27 c0       	rjmp	.+78     	; 0x1264 <main+0x28a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1216:	8e 01       	movw	r16, r28
    1218:	01 56       	subi	r16, 0x61	; 97
    121a:	1f 4f       	sbci	r17, 0xFF	; 255
    121c:	fe 01       	movw	r30, r28
    121e:	ef 55       	subi	r30, 0x5F	; 95
    1220:	ff 4f       	sbci	r31, 0xFF	; 255
    1222:	60 81       	ld	r22, Z
    1224:	71 81       	ldd	r23, Z+1	; 0x01
    1226:	82 81       	ldd	r24, Z+2	; 0x02
    1228:	93 81       	ldd	r25, Z+3	; 0x03
    122a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    122e:	dc 01       	movw	r26, r24
    1230:	cb 01       	movw	r24, r22
    1232:	f8 01       	movw	r30, r16
    1234:	91 83       	std	Z+1, r25	; 0x01
    1236:	80 83       	st	Z, r24
    1238:	de 01       	movw	r26, r28
    123a:	a5 56       	subi	r26, 0x65	; 101
    123c:	bf 4f       	sbci	r27, 0xFF	; 255
    123e:	fe 01       	movw	r30, r28
    1240:	e1 56       	subi	r30, 0x61	; 97
    1242:	ff 4f       	sbci	r31, 0xFF	; 255
    1244:	80 81       	ld	r24, Z
    1246:	91 81       	ldd	r25, Z+1	; 0x01
    1248:	8d 93       	st	X+, r24
    124a:	9c 93       	st	X, r25
    124c:	fe 01       	movw	r30, r28
    124e:	e5 56       	subi	r30, 0x65	; 101
    1250:	ff 4f       	sbci	r31, 0xFF	; 255
    1252:	80 81       	ld	r24, Z
    1254:	91 81       	ldd	r25, Z+1	; 0x01
    1256:	01 97       	sbiw	r24, 0x01	; 1
    1258:	f1 f7       	brne	.-4      	; 0x1256 <main+0x27c>
    125a:	fe 01       	movw	r30, r28
    125c:	e5 56       	subi	r30, 0x65	; 101
    125e:	ff 4f       	sbci	r31, 0xFF	; 255
    1260:	91 83       	std	Z+1, r25	; 0x01
    1262:	80 83       	st	Z, r24
	_delay_ms(1500);
	LCD_clearScreen();
    1264:	0e 94 77 1b 	call	0x36ee	; 0x36ee <LCD_clearScreen>
	LCD_displayString("By: ");
    1268:	89 e7       	ldi	r24, 0x79	; 121
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <LCD_displayString>
	LCD_moveCursor(1,0);
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	60 e0       	ldi	r22, 0x00	; 0
    1274:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <LCD_moveCursor>
	LCD_displayString(" Mahmoud Magdy");
    1278:	8e e7       	ldi	r24, 0x7E	; 126
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <LCD_displayString>
    1280:	fe 01       	movw	r30, r28
    1282:	e9 56       	subi	r30, 0x69	; 105
    1284:	ff 4f       	sbci	r31, 0xFF	; 255
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	aa e7       	ldi	r26, 0x7A	; 122
    128c:	b4 e4       	ldi	r27, 0x44	; 68
    128e:	80 83       	st	Z, r24
    1290:	91 83       	std	Z+1, r25	; 0x01
    1292:	a2 83       	std	Z+2, r26	; 0x02
    1294:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1296:	8e 01       	movw	r16, r28
    1298:	0d 56       	subi	r16, 0x6D	; 109
    129a:	1f 4f       	sbci	r17, 0xFF	; 255
    129c:	fe 01       	movw	r30, r28
    129e:	e9 56       	subi	r30, 0x69	; 105
    12a0:	ff 4f       	sbci	r31, 0xFF	; 255
    12a2:	60 81       	ld	r22, Z
    12a4:	71 81       	ldd	r23, Z+1	; 0x01
    12a6:	82 81       	ldd	r24, Z+2	; 0x02
    12a8:	93 81       	ldd	r25, Z+3	; 0x03
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	4a ef       	ldi	r20, 0xFA	; 250
    12b0:	54 e4       	ldi	r21, 0x44	; 68
    12b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b6:	dc 01       	movw	r26, r24
    12b8:	cb 01       	movw	r24, r22
    12ba:	f8 01       	movw	r30, r16
    12bc:	80 83       	st	Z, r24
    12be:	91 83       	std	Z+1, r25	; 0x01
    12c0:	a2 83       	std	Z+2, r26	; 0x02
    12c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12c4:	fe 01       	movw	r30, r28
    12c6:	ed 56       	subi	r30, 0x6D	; 109
    12c8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ca:	60 81       	ld	r22, Z
    12cc:	71 81       	ldd	r23, Z+1	; 0x01
    12ce:	82 81       	ldd	r24, Z+2	; 0x02
    12d0:	93 81       	ldd	r25, Z+3	; 0x03
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	40 e8       	ldi	r20, 0x80	; 128
    12d8:	5f e3       	ldi	r21, 0x3F	; 63
    12da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12de:	88 23       	and	r24, r24
    12e0:	44 f4       	brge	.+16     	; 0x12f2 <main+0x318>
		__ticks = 1;
    12e2:	fe 01       	movw	r30, r28
    12e4:	ef 56       	subi	r30, 0x6F	; 111
    12e6:	ff 4f       	sbci	r31, 0xFF	; 255
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	91 83       	std	Z+1, r25	; 0x01
    12ee:	80 83       	st	Z, r24
    12f0:	64 c0       	rjmp	.+200    	; 0x13ba <main+0x3e0>
	else if (__tmp > 65535)
    12f2:	fe 01       	movw	r30, r28
    12f4:	ed 56       	subi	r30, 0x6D	; 109
    12f6:	ff 4f       	sbci	r31, 0xFF	; 255
    12f8:	60 81       	ld	r22, Z
    12fa:	71 81       	ldd	r23, Z+1	; 0x01
    12fc:	82 81       	ldd	r24, Z+2	; 0x02
    12fe:	93 81       	ldd	r25, Z+3	; 0x03
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	3f ef       	ldi	r19, 0xFF	; 255
    1304:	4f e7       	ldi	r20, 0x7F	; 127
    1306:	57 e4       	ldi	r21, 0x47	; 71
    1308:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    130c:	18 16       	cp	r1, r24
    130e:	0c f0       	brlt	.+2      	; 0x1312 <main+0x338>
    1310:	43 c0       	rjmp	.+134    	; 0x1398 <main+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1312:	fe 01       	movw	r30, r28
    1314:	e9 56       	subi	r30, 0x69	; 105
    1316:	ff 4f       	sbci	r31, 0xFF	; 255
    1318:	60 81       	ld	r22, Z
    131a:	71 81       	ldd	r23, Z+1	; 0x01
    131c:	82 81       	ldd	r24, Z+2	; 0x02
    131e:	93 81       	ldd	r25, Z+3	; 0x03
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	40 e2       	ldi	r20, 0x20	; 32
    1326:	51 e4       	ldi	r21, 0x41	; 65
    1328:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    132c:	dc 01       	movw	r26, r24
    132e:	cb 01       	movw	r24, r22
    1330:	8e 01       	movw	r16, r28
    1332:	0f 56       	subi	r16, 0x6F	; 111
    1334:	1f 4f       	sbci	r17, 0xFF	; 255
    1336:	bc 01       	movw	r22, r24
    1338:	cd 01       	movw	r24, r26
    133a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    133e:	dc 01       	movw	r26, r24
    1340:	cb 01       	movw	r24, r22
    1342:	f8 01       	movw	r30, r16
    1344:	91 83       	std	Z+1, r25	; 0x01
    1346:	80 83       	st	Z, r24
    1348:	1f c0       	rjmp	.+62     	; 0x1388 <main+0x3ae>
    134a:	fe 01       	movw	r30, r28
    134c:	e1 57       	subi	r30, 0x71	; 113
    134e:	ff 4f       	sbci	r31, 0xFF	; 255
    1350:	88 ec       	ldi	r24, 0xC8	; 200
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	91 83       	std	Z+1, r25	; 0x01
    1356:	80 83       	st	Z, r24
    1358:	fe 01       	movw	r30, r28
    135a:	e1 57       	subi	r30, 0x71	; 113
    135c:	ff 4f       	sbci	r31, 0xFF	; 255
    135e:	80 81       	ld	r24, Z
    1360:	91 81       	ldd	r25, Z+1	; 0x01
    1362:	01 97       	sbiw	r24, 0x01	; 1
    1364:	f1 f7       	brne	.-4      	; 0x1362 <main+0x388>
    1366:	fe 01       	movw	r30, r28
    1368:	e1 57       	subi	r30, 0x71	; 113
    136a:	ff 4f       	sbci	r31, 0xFF	; 255
    136c:	91 83       	std	Z+1, r25	; 0x01
    136e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1370:	de 01       	movw	r26, r28
    1372:	af 56       	subi	r26, 0x6F	; 111
    1374:	bf 4f       	sbci	r27, 0xFF	; 255
    1376:	fe 01       	movw	r30, r28
    1378:	ef 56       	subi	r30, 0x6F	; 111
    137a:	ff 4f       	sbci	r31, 0xFF	; 255
    137c:	80 81       	ld	r24, Z
    137e:	91 81       	ldd	r25, Z+1	; 0x01
    1380:	01 97       	sbiw	r24, 0x01	; 1
    1382:	11 96       	adiw	r26, 0x01	; 1
    1384:	9c 93       	st	X, r25
    1386:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1388:	fe 01       	movw	r30, r28
    138a:	ef 56       	subi	r30, 0x6F	; 111
    138c:	ff 4f       	sbci	r31, 0xFF	; 255
    138e:	80 81       	ld	r24, Z
    1390:	91 81       	ldd	r25, Z+1	; 0x01
    1392:	00 97       	sbiw	r24, 0x00	; 0
    1394:	d1 f6       	brne	.-76     	; 0x134a <main+0x370>
    1396:	27 c0       	rjmp	.+78     	; 0x13e6 <main+0x40c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1398:	8e 01       	movw	r16, r28
    139a:	0f 56       	subi	r16, 0x6F	; 111
    139c:	1f 4f       	sbci	r17, 0xFF	; 255
    139e:	fe 01       	movw	r30, r28
    13a0:	ed 56       	subi	r30, 0x6D	; 109
    13a2:	ff 4f       	sbci	r31, 0xFF	; 255
    13a4:	60 81       	ld	r22, Z
    13a6:	71 81       	ldd	r23, Z+1	; 0x01
    13a8:	82 81       	ldd	r24, Z+2	; 0x02
    13aa:	93 81       	ldd	r25, Z+3	; 0x03
    13ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b0:	dc 01       	movw	r26, r24
    13b2:	cb 01       	movw	r24, r22
    13b4:	f8 01       	movw	r30, r16
    13b6:	91 83       	std	Z+1, r25	; 0x01
    13b8:	80 83       	st	Z, r24
    13ba:	de 01       	movw	r26, r28
    13bc:	a3 57       	subi	r26, 0x73	; 115
    13be:	bf 4f       	sbci	r27, 0xFF	; 255
    13c0:	fe 01       	movw	r30, r28
    13c2:	ef 56       	subi	r30, 0x6F	; 111
    13c4:	ff 4f       	sbci	r31, 0xFF	; 255
    13c6:	80 81       	ld	r24, Z
    13c8:	91 81       	ldd	r25, Z+1	; 0x01
    13ca:	8d 93       	st	X+, r24
    13cc:	9c 93       	st	X, r25
    13ce:	fe 01       	movw	r30, r28
    13d0:	e3 57       	subi	r30, 0x73	; 115
    13d2:	ff 4f       	sbci	r31, 0xFF	; 255
    13d4:	80 81       	ld	r24, Z
    13d6:	91 81       	ldd	r25, Z+1	; 0x01
    13d8:	01 97       	sbiw	r24, 0x01	; 1
    13da:	f1 f7       	brne	.-4      	; 0x13d8 <main+0x3fe>
    13dc:	fe 01       	movw	r30, r28
    13de:	e3 57       	subi	r30, 0x73	; 115
    13e0:	ff 4f       	sbci	r31, 0xFF	; 255
    13e2:	91 83       	std	Z+1, r25	; 0x01
    13e4:	80 83       	st	Z, r24
	_delay_ms(1000);
	LCD_clearScreen();
    13e6:	0e 94 77 1b 	call	0x36ee	; 0x36ee <LCD_clearScreen>

	/* Ask MC2 if Password is setted */
	UART_sendByte(IS_PASSWORD_SETTED);
    13ea:	87 e0       	ldi	r24, 0x07	; 7
    13ec:	0e 94 a5 1c 	call	0x394a	; 0x394a <UART_sendByte>

	/* Check if the password setted */
	if(UART_recieveByte() == PASSWORD_SETTED)
    13f0:	0e 94 bc 1c 	call	0x3978	; 0x3978 <UART_recieveByte>
    13f4:	85 30       	cpi	r24, 0x05	; 5
    13f6:	29 f4       	brne	.+10     	; 0x1402 <main+0x428>
	{
		/* raise the password set flag */
		PassIsSetFlag = 1;
    13f8:	fe 01       	movw	r30, r28
    13fa:	e6 55       	subi	r30, 0x56	; 86
    13fc:	ff 4f       	sbci	r31, 0xFF	; 255
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	80 83       	st	Z, r24

	while(1)
	{

		/* Check if the password flag isn't setted */
		if(PassIsSetFlag == 0)
    1402:	fe 01       	movw	r30, r28
    1404:	e6 55       	subi	r30, 0x56	; 86
    1406:	ff 4f       	sbci	r31, 0xFF	; 255
    1408:	80 81       	ld	r24, Z
    140a:	88 23       	and	r24, r24
    140c:	09 f0       	breq	.+2      	; 0x1410 <main+0x436>
    140e:	d0 c3       	rjmp	.+1952   	; 0x1bb0 <main+0xbd6>
		{
			LCD_clearScreen();
    1410:	0e 94 77 1b 	call	0x36ee	; 0x36ee <LCD_clearScreen>
			LCD_displayString("plz enter pass: ");
    1414:	8d e8       	ldi	r24, 0x8D	; 141
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <LCD_displayString>
			LCD_moveCursor(1,0);
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	60 e0       	ldi	r22, 0x00	; 0
    1420:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <LCD_moveCursor>
    1424:	fe 01       	movw	r30, r28
    1426:	e7 57       	subi	r30, 0x77	; 119
    1428:	ff 4f       	sbci	r31, 0xFF	; 255
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	a0 e7       	ldi	r26, 0x70	; 112
    1430:	b1 e4       	ldi	r27, 0x41	; 65
    1432:	80 83       	st	Z, r24
    1434:	91 83       	std	Z+1, r25	; 0x01
    1436:	a2 83       	std	Z+2, r26	; 0x02
    1438:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    143a:	8e 01       	movw	r16, r28
    143c:	0b 57       	subi	r16, 0x7B	; 123
    143e:	1f 4f       	sbci	r17, 0xFF	; 255
    1440:	fe 01       	movw	r30, r28
    1442:	e7 57       	subi	r30, 0x77	; 119
    1444:	ff 4f       	sbci	r31, 0xFF	; 255
    1446:	60 81       	ld	r22, Z
    1448:	71 81       	ldd	r23, Z+1	; 0x01
    144a:	82 81       	ldd	r24, Z+2	; 0x02
    144c:	93 81       	ldd	r25, Z+3	; 0x03
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	4a ef       	ldi	r20, 0xFA	; 250
    1454:	54 e4       	ldi	r21, 0x44	; 68
    1456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    145a:	dc 01       	movw	r26, r24
    145c:	cb 01       	movw	r24, r22
    145e:	f8 01       	movw	r30, r16
    1460:	80 83       	st	Z, r24
    1462:	91 83       	std	Z+1, r25	; 0x01
    1464:	a2 83       	std	Z+2, r26	; 0x02
    1466:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1468:	fe 01       	movw	r30, r28
    146a:	eb 57       	subi	r30, 0x7B	; 123
    146c:	ff 4f       	sbci	r31, 0xFF	; 255
    146e:	60 81       	ld	r22, Z
    1470:	71 81       	ldd	r23, Z+1	; 0x01
    1472:	82 81       	ldd	r24, Z+2	; 0x02
    1474:	93 81       	ldd	r25, Z+3	; 0x03
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	40 e8       	ldi	r20, 0x80	; 128
    147c:	5f e3       	ldi	r21, 0x3F	; 63
    147e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1482:	88 23       	and	r24, r24
    1484:	44 f4       	brge	.+16     	; 0x1496 <main+0x4bc>
		__ticks = 1;
    1486:	fe 01       	movw	r30, r28
    1488:	ed 57       	subi	r30, 0x7D	; 125
    148a:	ff 4f       	sbci	r31, 0xFF	; 255
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	91 83       	std	Z+1, r25	; 0x01
    1492:	80 83       	st	Z, r24
    1494:	64 c0       	rjmp	.+200    	; 0x155e <main+0x584>
	else if (__tmp > 65535)
    1496:	fe 01       	movw	r30, r28
    1498:	eb 57       	subi	r30, 0x7B	; 123
    149a:	ff 4f       	sbci	r31, 0xFF	; 255
    149c:	60 81       	ld	r22, Z
    149e:	71 81       	ldd	r23, Z+1	; 0x01
    14a0:	82 81       	ldd	r24, Z+2	; 0x02
    14a2:	93 81       	ldd	r25, Z+3	; 0x03
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	3f ef       	ldi	r19, 0xFF	; 255
    14a8:	4f e7       	ldi	r20, 0x7F	; 127
    14aa:	57 e4       	ldi	r21, 0x47	; 71
    14ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14b0:	18 16       	cp	r1, r24
    14b2:	0c f0       	brlt	.+2      	; 0x14b6 <main+0x4dc>
    14b4:	43 c0       	rjmp	.+134    	; 0x153c <main+0x562>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14b6:	fe 01       	movw	r30, r28
    14b8:	e7 57       	subi	r30, 0x77	; 119
    14ba:	ff 4f       	sbci	r31, 0xFF	; 255
    14bc:	60 81       	ld	r22, Z
    14be:	71 81       	ldd	r23, Z+1	; 0x01
    14c0:	82 81       	ldd	r24, Z+2	; 0x02
    14c2:	93 81       	ldd	r25, Z+3	; 0x03
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	40 e2       	ldi	r20, 0x20	; 32
    14ca:	51 e4       	ldi	r21, 0x41	; 65
    14cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d0:	dc 01       	movw	r26, r24
    14d2:	cb 01       	movw	r24, r22
    14d4:	8e 01       	movw	r16, r28
    14d6:	0d 57       	subi	r16, 0x7D	; 125
    14d8:	1f 4f       	sbci	r17, 0xFF	; 255
    14da:	bc 01       	movw	r22, r24
    14dc:	cd 01       	movw	r24, r26
    14de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e2:	dc 01       	movw	r26, r24
    14e4:	cb 01       	movw	r24, r22
    14e6:	f8 01       	movw	r30, r16
    14e8:	91 83       	std	Z+1, r25	; 0x01
    14ea:	80 83       	st	Z, r24
    14ec:	1f c0       	rjmp	.+62     	; 0x152c <main+0x552>
    14ee:	fe 01       	movw	r30, r28
    14f0:	ef 57       	subi	r30, 0x7F	; 127
    14f2:	ff 4f       	sbci	r31, 0xFF	; 255
    14f4:	88 ec       	ldi	r24, 0xC8	; 200
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	91 83       	std	Z+1, r25	; 0x01
    14fa:	80 83       	st	Z, r24
    14fc:	fe 01       	movw	r30, r28
    14fe:	ef 57       	subi	r30, 0x7F	; 127
    1500:	ff 4f       	sbci	r31, 0xFF	; 255
    1502:	80 81       	ld	r24, Z
    1504:	91 81       	ldd	r25, Z+1	; 0x01
    1506:	01 97       	sbiw	r24, 0x01	; 1
    1508:	f1 f7       	brne	.-4      	; 0x1506 <main+0x52c>
    150a:	fe 01       	movw	r30, r28
    150c:	ef 57       	subi	r30, 0x7F	; 127
    150e:	ff 4f       	sbci	r31, 0xFF	; 255
    1510:	91 83       	std	Z+1, r25	; 0x01
    1512:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1514:	de 01       	movw	r26, r28
    1516:	ad 57       	subi	r26, 0x7D	; 125
    1518:	bf 4f       	sbci	r27, 0xFF	; 255
    151a:	fe 01       	movw	r30, r28
    151c:	ed 57       	subi	r30, 0x7D	; 125
    151e:	ff 4f       	sbci	r31, 0xFF	; 255
    1520:	80 81       	ld	r24, Z
    1522:	91 81       	ldd	r25, Z+1	; 0x01
    1524:	01 97       	sbiw	r24, 0x01	; 1
    1526:	11 96       	adiw	r26, 0x01	; 1
    1528:	9c 93       	st	X, r25
    152a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    152c:	fe 01       	movw	r30, r28
    152e:	ed 57       	subi	r30, 0x7D	; 125
    1530:	ff 4f       	sbci	r31, 0xFF	; 255
    1532:	80 81       	ld	r24, Z
    1534:	91 81       	ldd	r25, Z+1	; 0x01
    1536:	00 97       	sbiw	r24, 0x00	; 0
    1538:	d1 f6       	brne	.-76     	; 0x14ee <main+0x514>
    153a:	27 c0       	rjmp	.+78     	; 0x158a <main+0x5b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    153c:	8e 01       	movw	r16, r28
    153e:	0d 57       	subi	r16, 0x7D	; 125
    1540:	1f 4f       	sbci	r17, 0xFF	; 255
    1542:	fe 01       	movw	r30, r28
    1544:	eb 57       	subi	r30, 0x7B	; 123
    1546:	ff 4f       	sbci	r31, 0xFF	; 255
    1548:	60 81       	ld	r22, Z
    154a:	71 81       	ldd	r23, Z+1	; 0x01
    154c:	82 81       	ldd	r24, Z+2	; 0x02
    154e:	93 81       	ldd	r25, Z+3	; 0x03
    1550:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1554:	dc 01       	movw	r26, r24
    1556:	cb 01       	movw	r24, r22
    1558:	f8 01       	movw	r30, r16
    155a:	91 83       	std	Z+1, r25	; 0x01
    155c:	80 83       	st	Z, r24
    155e:	de 01       	movw	r26, r28
    1560:	a1 58       	subi	r26, 0x81	; 129
    1562:	bf 4f       	sbci	r27, 0xFF	; 255
    1564:	fe 01       	movw	r30, r28
    1566:	ed 57       	subi	r30, 0x7D	; 125
    1568:	ff 4f       	sbci	r31, 0xFF	; 255
    156a:	80 81       	ld	r24, Z
    156c:	91 81       	ldd	r25, Z+1	; 0x01
    156e:	8d 93       	st	X+, r24
    1570:	9c 93       	st	X, r25
    1572:	fe 01       	movw	r30, r28
    1574:	e1 58       	subi	r30, 0x81	; 129
    1576:	ff 4f       	sbci	r31, 0xFF	; 255
    1578:	80 81       	ld	r24, Z
    157a:	91 81       	ldd	r25, Z+1	; 0x01
    157c:	01 97       	sbiw	r24, 0x01	; 1
    157e:	f1 f7       	brne	.-4      	; 0x157c <main+0x5a2>
    1580:	fe 01       	movw	r30, r28
    1582:	e1 58       	subi	r30, 0x81	; 129
    1584:	ff 4f       	sbci	r31, 0xFF	; 255
    1586:	91 83       	std	Z+1, r25	; 0x01
    1588:	80 83       	st	Z, r24
			_delay_ms(15);
			/* Getting MC2 Ready to receive the first password */
			UART_sendByte(TAKE_FIRST_PASSWORD);
    158a:	89 e0       	ldi	r24, 0x09	; 9
    158c:	0e 94 a5 1c 	call	0x394a	; 0x394a <UART_sendByte>

			/* Take the first password from the user*/
			take_password();
    1590:	0e 94 3e 06 	call	0xc7c	; 0xc7c <take_password>

			/* Send the first password to MC2 */
			send_password(Password);
    1594:	87 e7       	ldi	r24, 0x77	; 119
    1596:	91 e0       	ldi	r25, 0x01	; 1
    1598:	0e 94 a3 05 	call	0xb46	; 0xb46 <send_password>

			LCD_clearScreen();
    159c:	0e 94 77 1b 	call	0x36ee	; 0x36ee <LCD_clearScreen>
			LCD_displayString("re-enter pass");
    15a0:	8e e9       	ldi	r24, 0x9E	; 158
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <LCD_displayString>
			LCD_moveCursor(1,0);
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	60 e0       	ldi	r22, 0x00	; 0
    15ac:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <LCD_moveCursor>
    15b0:	fe 01       	movw	r30, r28
    15b2:	e5 58       	subi	r30, 0x85	; 133
    15b4:	ff 4f       	sbci	r31, 0xFF	; 255
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	a0 ef       	ldi	r26, 0xF0	; 240
    15bc:	b1 e4       	ldi	r27, 0x41	; 65
    15be:	80 83       	st	Z, r24
    15c0:	91 83       	std	Z+1, r25	; 0x01
    15c2:	a2 83       	std	Z+2, r26	; 0x02
    15c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15c6:	8e 01       	movw	r16, r28
    15c8:	09 58       	subi	r16, 0x89	; 137
    15ca:	1f 4f       	sbci	r17, 0xFF	; 255
    15cc:	fe 01       	movw	r30, r28
    15ce:	e5 58       	subi	r30, 0x85	; 133
    15d0:	ff 4f       	sbci	r31, 0xFF	; 255
    15d2:	60 81       	ld	r22, Z
    15d4:	71 81       	ldd	r23, Z+1	; 0x01
    15d6:	82 81       	ldd	r24, Z+2	; 0x02
    15d8:	93 81       	ldd	r25, Z+3	; 0x03
    15da:	20 e0       	ldi	r18, 0x00	; 0
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	4a ef       	ldi	r20, 0xFA	; 250
    15e0:	54 e4       	ldi	r21, 0x44	; 68
    15e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e6:	dc 01       	movw	r26, r24
    15e8:	cb 01       	movw	r24, r22
    15ea:	f8 01       	movw	r30, r16
    15ec:	80 83       	st	Z, r24
    15ee:	91 83       	std	Z+1, r25	; 0x01
    15f0:	a2 83       	std	Z+2, r26	; 0x02
    15f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15f4:	fe 01       	movw	r30, r28
    15f6:	e9 58       	subi	r30, 0x89	; 137
    15f8:	ff 4f       	sbci	r31, 0xFF	; 255
    15fa:	60 81       	ld	r22, Z
    15fc:	71 81       	ldd	r23, Z+1	; 0x01
    15fe:	82 81       	ldd	r24, Z+2	; 0x02
    1600:	93 81       	ldd	r25, Z+3	; 0x03
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	40 e8       	ldi	r20, 0x80	; 128
    1608:	5f e3       	ldi	r21, 0x3F	; 63
    160a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    160e:	88 23       	and	r24, r24
    1610:	44 f4       	brge	.+16     	; 0x1622 <main+0x648>
		__ticks = 1;
    1612:	fe 01       	movw	r30, r28
    1614:	eb 58       	subi	r30, 0x8B	; 139
    1616:	ff 4f       	sbci	r31, 0xFF	; 255
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	91 83       	std	Z+1, r25	; 0x01
    161e:	80 83       	st	Z, r24
    1620:	64 c0       	rjmp	.+200    	; 0x16ea <main+0x710>
	else if (__tmp > 65535)
    1622:	fe 01       	movw	r30, r28
    1624:	e9 58       	subi	r30, 0x89	; 137
    1626:	ff 4f       	sbci	r31, 0xFF	; 255
    1628:	60 81       	ld	r22, Z
    162a:	71 81       	ldd	r23, Z+1	; 0x01
    162c:	82 81       	ldd	r24, Z+2	; 0x02
    162e:	93 81       	ldd	r25, Z+3	; 0x03
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	3f ef       	ldi	r19, 0xFF	; 255
    1634:	4f e7       	ldi	r20, 0x7F	; 127
    1636:	57 e4       	ldi	r21, 0x47	; 71
    1638:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    163c:	18 16       	cp	r1, r24
    163e:	0c f0       	brlt	.+2      	; 0x1642 <main+0x668>
    1640:	43 c0       	rjmp	.+134    	; 0x16c8 <main+0x6ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1642:	fe 01       	movw	r30, r28
    1644:	e5 58       	subi	r30, 0x85	; 133
    1646:	ff 4f       	sbci	r31, 0xFF	; 255
    1648:	60 81       	ld	r22, Z
    164a:	71 81       	ldd	r23, Z+1	; 0x01
    164c:	82 81       	ldd	r24, Z+2	; 0x02
    164e:	93 81       	ldd	r25, Z+3	; 0x03
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	40 e2       	ldi	r20, 0x20	; 32
    1656:	51 e4       	ldi	r21, 0x41	; 65
    1658:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    165c:	dc 01       	movw	r26, r24
    165e:	cb 01       	movw	r24, r22
    1660:	8e 01       	movw	r16, r28
    1662:	0b 58       	subi	r16, 0x8B	; 139
    1664:	1f 4f       	sbci	r17, 0xFF	; 255
    1666:	bc 01       	movw	r22, r24
    1668:	cd 01       	movw	r24, r26
    166a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    166e:	dc 01       	movw	r26, r24
    1670:	cb 01       	movw	r24, r22
    1672:	f8 01       	movw	r30, r16
    1674:	91 83       	std	Z+1, r25	; 0x01
    1676:	80 83       	st	Z, r24
    1678:	1f c0       	rjmp	.+62     	; 0x16b8 <main+0x6de>
    167a:	fe 01       	movw	r30, r28
    167c:	ed 58       	subi	r30, 0x8D	; 141
    167e:	ff 4f       	sbci	r31, 0xFF	; 255
    1680:	88 ec       	ldi	r24, 0xC8	; 200
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	91 83       	std	Z+1, r25	; 0x01
    1686:	80 83       	st	Z, r24
    1688:	fe 01       	movw	r30, r28
    168a:	ed 58       	subi	r30, 0x8D	; 141
    168c:	ff 4f       	sbci	r31, 0xFF	; 255
    168e:	80 81       	ld	r24, Z
    1690:	91 81       	ldd	r25, Z+1	; 0x01
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	f1 f7       	brne	.-4      	; 0x1692 <main+0x6b8>
    1696:	fe 01       	movw	r30, r28
    1698:	ed 58       	subi	r30, 0x8D	; 141
    169a:	ff 4f       	sbci	r31, 0xFF	; 255
    169c:	91 83       	std	Z+1, r25	; 0x01
    169e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16a0:	de 01       	movw	r26, r28
    16a2:	ab 58       	subi	r26, 0x8B	; 139
    16a4:	bf 4f       	sbci	r27, 0xFF	; 255
    16a6:	fe 01       	movw	r30, r28
    16a8:	eb 58       	subi	r30, 0x8B	; 139
    16aa:	ff 4f       	sbci	r31, 0xFF	; 255
    16ac:	80 81       	ld	r24, Z
    16ae:	91 81       	ldd	r25, Z+1	; 0x01
    16b0:	01 97       	sbiw	r24, 0x01	; 1
    16b2:	11 96       	adiw	r26, 0x01	; 1
    16b4:	9c 93       	st	X, r25
    16b6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16b8:	fe 01       	movw	r30, r28
    16ba:	eb 58       	subi	r30, 0x8B	; 139
    16bc:	ff 4f       	sbci	r31, 0xFF	; 255
    16be:	80 81       	ld	r24, Z
    16c0:	91 81       	ldd	r25, Z+1	; 0x01
    16c2:	00 97       	sbiw	r24, 0x00	; 0
    16c4:	d1 f6       	brne	.-76     	; 0x167a <main+0x6a0>
    16c6:	27 c0       	rjmp	.+78     	; 0x1716 <main+0x73c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16c8:	8e 01       	movw	r16, r28
    16ca:	0b 58       	subi	r16, 0x8B	; 139
    16cc:	1f 4f       	sbci	r17, 0xFF	; 255
    16ce:	fe 01       	movw	r30, r28
    16d0:	e9 58       	subi	r30, 0x89	; 137
    16d2:	ff 4f       	sbci	r31, 0xFF	; 255
    16d4:	60 81       	ld	r22, Z
    16d6:	71 81       	ldd	r23, Z+1	; 0x01
    16d8:	82 81       	ldd	r24, Z+2	; 0x02
    16da:	93 81       	ldd	r25, Z+3	; 0x03
    16dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e0:	dc 01       	movw	r26, r24
    16e2:	cb 01       	movw	r24, r22
    16e4:	f8 01       	movw	r30, r16
    16e6:	91 83       	std	Z+1, r25	; 0x01
    16e8:	80 83       	st	Z, r24
    16ea:	de 01       	movw	r26, r28
    16ec:	af 58       	subi	r26, 0x8F	; 143
    16ee:	bf 4f       	sbci	r27, 0xFF	; 255
    16f0:	fe 01       	movw	r30, r28
    16f2:	eb 58       	subi	r30, 0x8B	; 139
    16f4:	ff 4f       	sbci	r31, 0xFF	; 255
    16f6:	80 81       	ld	r24, Z
    16f8:	91 81       	ldd	r25, Z+1	; 0x01
    16fa:	8d 93       	st	X+, r24
    16fc:	9c 93       	st	X, r25
    16fe:	fe 01       	movw	r30, r28
    1700:	ef 58       	subi	r30, 0x8F	; 143
    1702:	ff 4f       	sbci	r31, 0xFF	; 255
    1704:	80 81       	ld	r24, Z
    1706:	91 81       	ldd	r25, Z+1	; 0x01
    1708:	01 97       	sbiw	r24, 0x01	; 1
    170a:	f1 f7       	brne	.-4      	; 0x1708 <main+0x72e>
    170c:	fe 01       	movw	r30, r28
    170e:	ef 58       	subi	r30, 0x8F	; 143
    1710:	ff 4f       	sbci	r31, 0xFF	; 255
    1712:	91 83       	std	Z+1, r25	; 0x01
    1714:	80 83       	st	Z, r24

			_delay_ms(30);

			/* Getting MC2 Ready to receive the second password */
			UART_sendByte(TAKE_SECOND_PASSWORD);
    1716:	8a e0       	ldi	r24, 0x0A	; 10
    1718:	0e 94 a5 1c 	call	0x394a	; 0x394a <UART_sendByte>

			/* Take the second password from the user */
			take_password();
    171c:	0e 94 3e 06 	call	0xc7c	; 0xc7c <take_password>

			/* Send the second password to MC2 to compare */
			send_password(Password);
    1720:	87 e7       	ldi	r24, 0x77	; 119
    1722:	91 e0       	ldi	r25, 0x01	; 1
    1724:	0e 94 a3 05 	call	0xb46	; 0xb46 <send_password>
    1728:	fe 01       	movw	r30, r28
    172a:	e3 59       	subi	r30, 0x93	; 147
    172c:	ff 4f       	sbci	r31, 0xFF	; 255
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	a0 ef       	ldi	r26, 0xF0	; 240
    1734:	b1 e4       	ldi	r27, 0x41	; 65
    1736:	80 83       	st	Z, r24
    1738:	91 83       	std	Z+1, r25	; 0x01
    173a:	a2 83       	std	Z+2, r26	; 0x02
    173c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    173e:	8e 01       	movw	r16, r28
    1740:	07 59       	subi	r16, 0x97	; 151
    1742:	1f 4f       	sbci	r17, 0xFF	; 255
    1744:	fe 01       	movw	r30, r28
    1746:	e3 59       	subi	r30, 0x93	; 147
    1748:	ff 4f       	sbci	r31, 0xFF	; 255
    174a:	60 81       	ld	r22, Z
    174c:	71 81       	ldd	r23, Z+1	; 0x01
    174e:	82 81       	ldd	r24, Z+2	; 0x02
    1750:	93 81       	ldd	r25, Z+3	; 0x03
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	4a ef       	ldi	r20, 0xFA	; 250
    1758:	54 e4       	ldi	r21, 0x44	; 68
    175a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    175e:	dc 01       	movw	r26, r24
    1760:	cb 01       	movw	r24, r22
    1762:	f8 01       	movw	r30, r16
    1764:	80 83       	st	Z, r24
    1766:	91 83       	std	Z+1, r25	; 0x01
    1768:	a2 83       	std	Z+2, r26	; 0x02
    176a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    176c:	fe 01       	movw	r30, r28
    176e:	e7 59       	subi	r30, 0x97	; 151
    1770:	ff 4f       	sbci	r31, 0xFF	; 255
    1772:	60 81       	ld	r22, Z
    1774:	71 81       	ldd	r23, Z+1	; 0x01
    1776:	82 81       	ldd	r24, Z+2	; 0x02
    1778:	93 81       	ldd	r25, Z+3	; 0x03
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	40 e8       	ldi	r20, 0x80	; 128
    1780:	5f e3       	ldi	r21, 0x3F	; 63
    1782:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1786:	88 23       	and	r24, r24
    1788:	44 f4       	brge	.+16     	; 0x179a <main+0x7c0>
		__ticks = 1;
    178a:	fe 01       	movw	r30, r28
    178c:	e9 59       	subi	r30, 0x99	; 153
    178e:	ff 4f       	sbci	r31, 0xFF	; 255
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	91 83       	std	Z+1, r25	; 0x01
    1796:	80 83       	st	Z, r24
    1798:	64 c0       	rjmp	.+200    	; 0x1862 <main+0x888>
	else if (__tmp > 65535)
    179a:	fe 01       	movw	r30, r28
    179c:	e7 59       	subi	r30, 0x97	; 151
    179e:	ff 4f       	sbci	r31, 0xFF	; 255
    17a0:	60 81       	ld	r22, Z
    17a2:	71 81       	ldd	r23, Z+1	; 0x01
    17a4:	82 81       	ldd	r24, Z+2	; 0x02
    17a6:	93 81       	ldd	r25, Z+3	; 0x03
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	3f ef       	ldi	r19, 0xFF	; 255
    17ac:	4f e7       	ldi	r20, 0x7F	; 127
    17ae:	57 e4       	ldi	r21, 0x47	; 71
    17b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17b4:	18 16       	cp	r1, r24
    17b6:	0c f0       	brlt	.+2      	; 0x17ba <main+0x7e0>
    17b8:	43 c0       	rjmp	.+134    	; 0x1840 <main+0x866>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ba:	fe 01       	movw	r30, r28
    17bc:	e3 59       	subi	r30, 0x93	; 147
    17be:	ff 4f       	sbci	r31, 0xFF	; 255
    17c0:	60 81       	ld	r22, Z
    17c2:	71 81       	ldd	r23, Z+1	; 0x01
    17c4:	82 81       	ldd	r24, Z+2	; 0x02
    17c6:	93 81       	ldd	r25, Z+3	; 0x03
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	40 e2       	ldi	r20, 0x20	; 32
    17ce:	51 e4       	ldi	r21, 0x41	; 65
    17d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	8e 01       	movw	r16, r28
    17da:	09 59       	subi	r16, 0x99	; 153
    17dc:	1f 4f       	sbci	r17, 0xFF	; 255
    17de:	bc 01       	movw	r22, r24
    17e0:	cd 01       	movw	r24, r26
    17e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	f8 01       	movw	r30, r16
    17ec:	91 83       	std	Z+1, r25	; 0x01
    17ee:	80 83       	st	Z, r24
    17f0:	1f c0       	rjmp	.+62     	; 0x1830 <main+0x856>
    17f2:	fe 01       	movw	r30, r28
    17f4:	eb 59       	subi	r30, 0x9B	; 155
    17f6:	ff 4f       	sbci	r31, 0xFF	; 255
    17f8:	88 ec       	ldi	r24, 0xC8	; 200
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	91 83       	std	Z+1, r25	; 0x01
    17fe:	80 83       	st	Z, r24
    1800:	fe 01       	movw	r30, r28
    1802:	eb 59       	subi	r30, 0x9B	; 155
    1804:	ff 4f       	sbci	r31, 0xFF	; 255
    1806:	80 81       	ld	r24, Z
    1808:	91 81       	ldd	r25, Z+1	; 0x01
    180a:	01 97       	sbiw	r24, 0x01	; 1
    180c:	f1 f7       	brne	.-4      	; 0x180a <main+0x830>
    180e:	fe 01       	movw	r30, r28
    1810:	eb 59       	subi	r30, 0x9B	; 155
    1812:	ff 4f       	sbci	r31, 0xFF	; 255
    1814:	91 83       	std	Z+1, r25	; 0x01
    1816:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1818:	de 01       	movw	r26, r28
    181a:	a9 59       	subi	r26, 0x99	; 153
    181c:	bf 4f       	sbci	r27, 0xFF	; 255
    181e:	fe 01       	movw	r30, r28
    1820:	e9 59       	subi	r30, 0x99	; 153
    1822:	ff 4f       	sbci	r31, 0xFF	; 255
    1824:	80 81       	ld	r24, Z
    1826:	91 81       	ldd	r25, Z+1	; 0x01
    1828:	01 97       	sbiw	r24, 0x01	; 1
    182a:	11 96       	adiw	r26, 0x01	; 1
    182c:	9c 93       	st	X, r25
    182e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1830:	fe 01       	movw	r30, r28
    1832:	e9 59       	subi	r30, 0x99	; 153
    1834:	ff 4f       	sbci	r31, 0xFF	; 255
    1836:	80 81       	ld	r24, Z
    1838:	91 81       	ldd	r25, Z+1	; 0x01
    183a:	00 97       	sbiw	r24, 0x00	; 0
    183c:	d1 f6       	brne	.-76     	; 0x17f2 <main+0x818>
    183e:	27 c0       	rjmp	.+78     	; 0x188e <main+0x8b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1840:	8e 01       	movw	r16, r28
    1842:	09 59       	subi	r16, 0x99	; 153
    1844:	1f 4f       	sbci	r17, 0xFF	; 255
    1846:	fe 01       	movw	r30, r28
    1848:	e7 59       	subi	r30, 0x97	; 151
    184a:	ff 4f       	sbci	r31, 0xFF	; 255
    184c:	60 81       	ld	r22, Z
    184e:	71 81       	ldd	r23, Z+1	; 0x01
    1850:	82 81       	ldd	r24, Z+2	; 0x02
    1852:	93 81       	ldd	r25, Z+3	; 0x03
    1854:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	f8 01       	movw	r30, r16
    185e:	91 83       	std	Z+1, r25	; 0x01
    1860:	80 83       	st	Z, r24
    1862:	de 01       	movw	r26, r28
    1864:	ad 59       	subi	r26, 0x9D	; 157
    1866:	bf 4f       	sbci	r27, 0xFF	; 255
    1868:	fe 01       	movw	r30, r28
    186a:	e9 59       	subi	r30, 0x99	; 153
    186c:	ff 4f       	sbci	r31, 0xFF	; 255
    186e:	80 81       	ld	r24, Z
    1870:	91 81       	ldd	r25, Z+1	; 0x01
    1872:	8d 93       	st	X+, r24
    1874:	9c 93       	st	X, r25
    1876:	fe 01       	movw	r30, r28
    1878:	ed 59       	subi	r30, 0x9D	; 157
    187a:	ff 4f       	sbci	r31, 0xFF	; 255
    187c:	80 81       	ld	r24, Z
    187e:	91 81       	ldd	r25, Z+1	; 0x01
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	f1 f7       	brne	.-4      	; 0x1880 <main+0x8a6>
    1884:	fe 01       	movw	r30, r28
    1886:	ed 59       	subi	r30, 0x9D	; 157
    1888:	ff 4f       	sbci	r31, 0xFF	; 255
    188a:	91 83       	std	Z+1, r25	; 0x01
    188c:	80 83       	st	Z, r24
			_delay_ms(30);

			/* Send to MC2 to check if the two passwords are matched or not */
			UART_sendByte(IS_PASSWORD_MATCH);
    188e:	88 e0       	ldi	r24, 0x08	; 8
    1890:	0e 94 a5 1c 	call	0x394a	; 0x394a <UART_sendByte>

			/* Store the response from MC2 */
			PassIsMatchFlag = UART_recieveByte();
    1894:	0e 94 bc 1c 	call	0x3978	; 0x3978 <UART_recieveByte>
    1898:	fe 01       	movw	r30, r28
    189a:	e7 55       	subi	r30, 0x57	; 87
    189c:	ff 4f       	sbci	r31, 0xFF	; 255
    189e:	80 83       	st	Z, r24
    18a0:	fe 01       	movw	r30, r28
    18a2:	e1 5a       	subi	r30, 0xA1	; 161
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	a0 ef       	ldi	r26, 0xF0	; 240
    18ac:	b1 e4       	ldi	r27, 0x41	; 65
    18ae:	80 83       	st	Z, r24
    18b0:	91 83       	std	Z+1, r25	; 0x01
    18b2:	a2 83       	std	Z+2, r26	; 0x02
    18b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b6:	8e 01       	movw	r16, r28
    18b8:	05 5a       	subi	r16, 0xA5	; 165
    18ba:	1f 4f       	sbci	r17, 0xFF	; 255
    18bc:	fe 01       	movw	r30, r28
    18be:	e1 5a       	subi	r30, 0xA1	; 161
    18c0:	ff 4f       	sbci	r31, 0xFF	; 255
    18c2:	60 81       	ld	r22, Z
    18c4:	71 81       	ldd	r23, Z+1	; 0x01
    18c6:	82 81       	ldd	r24, Z+2	; 0x02
    18c8:	93 81       	ldd	r25, Z+3	; 0x03
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	4a ef       	ldi	r20, 0xFA	; 250
    18d0:	54 e4       	ldi	r21, 0x44	; 68
    18d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22
    18da:	f8 01       	movw	r30, r16
    18dc:	80 83       	st	Z, r24
    18de:	91 83       	std	Z+1, r25	; 0x01
    18e0:	a2 83       	std	Z+2, r26	; 0x02
    18e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18e4:	fe 01       	movw	r30, r28
    18e6:	e5 5a       	subi	r30, 0xA5	; 165
    18e8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ea:	60 81       	ld	r22, Z
    18ec:	71 81       	ldd	r23, Z+1	; 0x01
    18ee:	82 81       	ldd	r24, Z+2	; 0x02
    18f0:	93 81       	ldd	r25, Z+3	; 0x03
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	40 e8       	ldi	r20, 0x80	; 128
    18f8:	5f e3       	ldi	r21, 0x3F	; 63
    18fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18fe:	88 23       	and	r24, r24
    1900:	44 f4       	brge	.+16     	; 0x1912 <main+0x938>
		__ticks = 1;
    1902:	fe 01       	movw	r30, r28
    1904:	e7 5a       	subi	r30, 0xA7	; 167
    1906:	ff 4f       	sbci	r31, 0xFF	; 255
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	91 83       	std	Z+1, r25	; 0x01
    190e:	80 83       	st	Z, r24
    1910:	64 c0       	rjmp	.+200    	; 0x19da <main+0xa00>
	else if (__tmp > 65535)
    1912:	fe 01       	movw	r30, r28
    1914:	e5 5a       	subi	r30, 0xA5	; 165
    1916:	ff 4f       	sbci	r31, 0xFF	; 255
    1918:	60 81       	ld	r22, Z
    191a:	71 81       	ldd	r23, Z+1	; 0x01
    191c:	82 81       	ldd	r24, Z+2	; 0x02
    191e:	93 81       	ldd	r25, Z+3	; 0x03
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	3f ef       	ldi	r19, 0xFF	; 255
    1924:	4f e7       	ldi	r20, 0x7F	; 127
    1926:	57 e4       	ldi	r21, 0x47	; 71
    1928:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    192c:	18 16       	cp	r1, r24
    192e:	0c f0       	brlt	.+2      	; 0x1932 <main+0x958>
    1930:	43 c0       	rjmp	.+134    	; 0x19b8 <main+0x9de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1932:	fe 01       	movw	r30, r28
    1934:	e1 5a       	subi	r30, 0xA1	; 161
    1936:	ff 4f       	sbci	r31, 0xFF	; 255
    1938:	60 81       	ld	r22, Z
    193a:	71 81       	ldd	r23, Z+1	; 0x01
    193c:	82 81       	ldd	r24, Z+2	; 0x02
    193e:	93 81       	ldd	r25, Z+3	; 0x03
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	40 e2       	ldi	r20, 0x20	; 32
    1946:	51 e4       	ldi	r21, 0x41	; 65
    1948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	8e 01       	movw	r16, r28
    1952:	07 5a       	subi	r16, 0xA7	; 167
    1954:	1f 4f       	sbci	r17, 0xFF	; 255
    1956:	bc 01       	movw	r22, r24
    1958:	cd 01       	movw	r24, r26
    195a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    195e:	dc 01       	movw	r26, r24
    1960:	cb 01       	movw	r24, r22
    1962:	f8 01       	movw	r30, r16
    1964:	91 83       	std	Z+1, r25	; 0x01
    1966:	80 83       	st	Z, r24
    1968:	1f c0       	rjmp	.+62     	; 0x19a8 <main+0x9ce>
    196a:	fe 01       	movw	r30, r28
    196c:	e9 5a       	subi	r30, 0xA9	; 169
    196e:	ff 4f       	sbci	r31, 0xFF	; 255
    1970:	88 ec       	ldi	r24, 0xC8	; 200
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	91 83       	std	Z+1, r25	; 0x01
    1976:	80 83       	st	Z, r24
    1978:	fe 01       	movw	r30, r28
    197a:	e9 5a       	subi	r30, 0xA9	; 169
    197c:	ff 4f       	sbci	r31, 0xFF	; 255
    197e:	80 81       	ld	r24, Z
    1980:	91 81       	ldd	r25, Z+1	; 0x01
    1982:	01 97       	sbiw	r24, 0x01	; 1
    1984:	f1 f7       	brne	.-4      	; 0x1982 <main+0x9a8>
    1986:	fe 01       	movw	r30, r28
    1988:	e9 5a       	subi	r30, 0xA9	; 169
    198a:	ff 4f       	sbci	r31, 0xFF	; 255
    198c:	91 83       	std	Z+1, r25	; 0x01
    198e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1990:	de 01       	movw	r26, r28
    1992:	a7 5a       	subi	r26, 0xA7	; 167
    1994:	bf 4f       	sbci	r27, 0xFF	; 255
    1996:	fe 01       	movw	r30, r28
    1998:	e7 5a       	subi	r30, 0xA7	; 167
    199a:	ff 4f       	sbci	r31, 0xFF	; 255
    199c:	80 81       	ld	r24, Z
    199e:	91 81       	ldd	r25, Z+1	; 0x01
    19a0:	01 97       	sbiw	r24, 0x01	; 1
    19a2:	11 96       	adiw	r26, 0x01	; 1
    19a4:	9c 93       	st	X, r25
    19a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a8:	fe 01       	movw	r30, r28
    19aa:	e7 5a       	subi	r30, 0xA7	; 167
    19ac:	ff 4f       	sbci	r31, 0xFF	; 255
    19ae:	80 81       	ld	r24, Z
    19b0:	91 81       	ldd	r25, Z+1	; 0x01
    19b2:	00 97       	sbiw	r24, 0x00	; 0
    19b4:	d1 f6       	brne	.-76     	; 0x196a <main+0x990>
    19b6:	28 c0       	rjmp	.+80     	; 0x1a08 <main+0xa2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b8:	8e 01       	movw	r16, r28
    19ba:	07 5a       	subi	r16, 0xA7	; 167
    19bc:	1f 4f       	sbci	r17, 0xFF	; 255
    19be:	fe 01       	movw	r30, r28
    19c0:	e5 5a       	subi	r30, 0xA5	; 165
    19c2:	ff 4f       	sbci	r31, 0xFF	; 255
    19c4:	60 81       	ld	r22, Z
    19c6:	71 81       	ldd	r23, Z+1	; 0x01
    19c8:	82 81       	ldd	r24, Z+2	; 0x02
    19ca:	93 81       	ldd	r25, Z+3	; 0x03
    19cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d0:	dc 01       	movw	r26, r24
    19d2:	cb 01       	movw	r24, r22
    19d4:	f8 01       	movw	r30, r16
    19d6:	91 83       	std	Z+1, r25	; 0x01
    19d8:	80 83       	st	Z, r24
    19da:	de 01       	movw	r26, r28
    19dc:	ab 5a       	subi	r26, 0xAB	; 171
    19de:	bf 4f       	sbci	r27, 0xFF	; 255
    19e0:	fe 01       	movw	r30, r28
    19e2:	e7 5a       	subi	r30, 0xA7	; 167
    19e4:	ff 4f       	sbci	r31, 0xFF	; 255
    19e6:	80 81       	ld	r24, Z
    19e8:	91 81       	ldd	r25, Z+1	; 0x01
    19ea:	11 96       	adiw	r26, 0x01	; 1
    19ec:	9c 93       	st	X, r25
    19ee:	8e 93       	st	-X, r24
    19f0:	fe 01       	movw	r30, r28
    19f2:	eb 5a       	subi	r30, 0xAB	; 171
    19f4:	ff 4f       	sbci	r31, 0xFF	; 255
    19f6:	80 81       	ld	r24, Z
    19f8:	91 81       	ldd	r25, Z+1	; 0x01
    19fa:	01 97       	sbiw	r24, 0x01	; 1
    19fc:	f1 f7       	brne	.-4      	; 0x19fa <main+0xa20>
    19fe:	fe 01       	movw	r30, r28
    1a00:	eb 5a       	subi	r30, 0xAB	; 171
    1a02:	ff 4f       	sbci	r31, 0xFF	; 255
    1a04:	91 83       	std	Z+1, r25	; 0x01
    1a06:	80 83       	st	Z, r24
			_delay_ms(30);
			/* Check if the two password matches or not */
			if(PassIsMatchFlag == PASSWORD_MATCHED)
    1a08:	fe 01       	movw	r30, r28
    1a0a:	e7 55       	subi	r30, 0x57	; 87
    1a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0e:	80 81       	ld	r24, Z
    1a10:	81 30       	cpi	r24, 0x01	; 1
    1a12:	51 f4       	brne	.+20     	; 0x1a28 <main+0xa4e>
			{
				/* set the password is set flag & reset the password is match flag */
				PassIsSetFlag = 1;
    1a14:	fe 01       	movw	r30, r28
    1a16:	e6 55       	subi	r30, 0x56	; 86
    1a18:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	80 83       	st	Z, r24
				PassIsMatchFlag = 0;
    1a1e:	fe 01       	movw	r30, r28
    1a20:	e7 55       	subi	r30, 0x57	; 87
    1a22:	ff 4f       	sbci	r31, 0xFF	; 255
    1a24:	10 82       	st	Z, r1
    1a26:	ed cc       	rjmp	.-1574   	; 0x1402 <main+0x428>

			}

			else
			{
				LCD_clearScreen();
    1a28:	0e 94 77 1b 	call	0x36ee	; 0x36ee <LCD_clearScreen>
				LCD_displayString("  Password Not");
    1a2c:	8c ea       	ldi	r24, 0xAC	; 172
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <LCD_displayString>
				LCD_moveCursor(1,4);
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	64 e0       	ldi	r22, 0x04	; 4
    1a38:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <LCD_moveCursor>
				LCD_displayString("Matched");
    1a3c:	8b eb       	ldi	r24, 0xBB	; 187
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <LCD_displayString>
    1a44:	fe 01       	movw	r30, r28
    1a46:	ef 5a       	subi	r30, 0xAF	; 175
    1a48:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	90 e8       	ldi	r25, 0x80	; 128
    1a4e:	ab eb       	ldi	r26, 0xBB	; 187
    1a50:	b4 e4       	ldi	r27, 0x44	; 68
    1a52:	80 83       	st	Z, r24
    1a54:	91 83       	std	Z+1, r25	; 0x01
    1a56:	a2 83       	std	Z+2, r26	; 0x02
    1a58:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a5a:	8e 01       	movw	r16, r28
    1a5c:	03 5b       	subi	r16, 0xB3	; 179
    1a5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a60:	fe 01       	movw	r30, r28
    1a62:	ef 5a       	subi	r30, 0xAF	; 175
    1a64:	ff 4f       	sbci	r31, 0xFF	; 255
    1a66:	60 81       	ld	r22, Z
    1a68:	71 81       	ldd	r23, Z+1	; 0x01
    1a6a:	82 81       	ldd	r24, Z+2	; 0x02
    1a6c:	93 81       	ldd	r25, Z+3	; 0x03
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	4a ef       	ldi	r20, 0xFA	; 250
    1a74:	54 e4       	ldi	r21, 0x44	; 68
    1a76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	f8 01       	movw	r30, r16
    1a80:	80 83       	st	Z, r24
    1a82:	91 83       	std	Z+1, r25	; 0x01
    1a84:	a2 83       	std	Z+2, r26	; 0x02
    1a86:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a88:	fe 01       	movw	r30, r28
    1a8a:	e3 5b       	subi	r30, 0xB3	; 179
    1a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8e:	60 81       	ld	r22, Z
    1a90:	71 81       	ldd	r23, Z+1	; 0x01
    1a92:	82 81       	ldd	r24, Z+2	; 0x02
    1a94:	93 81       	ldd	r25, Z+3	; 0x03
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	40 e8       	ldi	r20, 0x80	; 128
    1a9c:	5f e3       	ldi	r21, 0x3F	; 63
    1a9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aa2:	88 23       	and	r24, r24
    1aa4:	44 f4       	brge	.+16     	; 0x1ab6 <main+0xadc>
		__ticks = 1;
    1aa6:	fe 01       	movw	r30, r28
    1aa8:	e5 5b       	subi	r30, 0xB5	; 181
    1aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	91 83       	std	Z+1, r25	; 0x01
    1ab2:	80 83       	st	Z, r24
    1ab4:	64 c0       	rjmp	.+200    	; 0x1b7e <main+0xba4>
	else if (__tmp > 65535)
    1ab6:	fe 01       	movw	r30, r28
    1ab8:	e3 5b       	subi	r30, 0xB3	; 179
    1aba:	ff 4f       	sbci	r31, 0xFF	; 255
    1abc:	60 81       	ld	r22, Z
    1abe:	71 81       	ldd	r23, Z+1	; 0x01
    1ac0:	82 81       	ldd	r24, Z+2	; 0x02
    1ac2:	93 81       	ldd	r25, Z+3	; 0x03
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	3f ef       	ldi	r19, 0xFF	; 255
    1ac8:	4f e7       	ldi	r20, 0x7F	; 127
    1aca:	57 e4       	ldi	r21, 0x47	; 71
    1acc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ad0:	18 16       	cp	r1, r24
    1ad2:	0c f0       	brlt	.+2      	; 0x1ad6 <main+0xafc>
    1ad4:	43 c0       	rjmp	.+134    	; 0x1b5c <main+0xb82>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad6:	fe 01       	movw	r30, r28
    1ad8:	ef 5a       	subi	r30, 0xAF	; 175
    1ada:	ff 4f       	sbci	r31, 0xFF	; 255
    1adc:	60 81       	ld	r22, Z
    1ade:	71 81       	ldd	r23, Z+1	; 0x01
    1ae0:	82 81       	ldd	r24, Z+2	; 0x02
    1ae2:	93 81       	ldd	r25, Z+3	; 0x03
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	40 e2       	ldi	r20, 0x20	; 32
    1aea:	51 e4       	ldi	r21, 0x41	; 65
    1aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	8e 01       	movw	r16, r28
    1af6:	05 5b       	subi	r16, 0xB5	; 181
    1af8:	1f 4f       	sbci	r17, 0xFF	; 255
    1afa:	bc 01       	movw	r22, r24
    1afc:	cd 01       	movw	r24, r26
    1afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	f8 01       	movw	r30, r16
    1b08:	91 83       	std	Z+1, r25	; 0x01
    1b0a:	80 83       	st	Z, r24
    1b0c:	1f c0       	rjmp	.+62     	; 0x1b4c <main+0xb72>
    1b0e:	fe 01       	movw	r30, r28
    1b10:	e7 5b       	subi	r30, 0xB7	; 183
    1b12:	ff 4f       	sbci	r31, 0xFF	; 255
    1b14:	88 ec       	ldi	r24, 0xC8	; 200
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	91 83       	std	Z+1, r25	; 0x01
    1b1a:	80 83       	st	Z, r24
    1b1c:	fe 01       	movw	r30, r28
    1b1e:	e7 5b       	subi	r30, 0xB7	; 183
    1b20:	ff 4f       	sbci	r31, 0xFF	; 255
    1b22:	80 81       	ld	r24, Z
    1b24:	91 81       	ldd	r25, Z+1	; 0x01
    1b26:	01 97       	sbiw	r24, 0x01	; 1
    1b28:	f1 f7       	brne	.-4      	; 0x1b26 <main+0xb4c>
    1b2a:	fe 01       	movw	r30, r28
    1b2c:	e7 5b       	subi	r30, 0xB7	; 183
    1b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b30:	91 83       	std	Z+1, r25	; 0x01
    1b32:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b34:	de 01       	movw	r26, r28
    1b36:	a5 5b       	subi	r26, 0xB5	; 181
    1b38:	bf 4f       	sbci	r27, 0xFF	; 255
    1b3a:	fe 01       	movw	r30, r28
    1b3c:	e5 5b       	subi	r30, 0xB5	; 181
    1b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b40:	80 81       	ld	r24, Z
    1b42:	91 81       	ldd	r25, Z+1	; 0x01
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	11 96       	adiw	r26, 0x01	; 1
    1b48:	9c 93       	st	X, r25
    1b4a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b4c:	fe 01       	movw	r30, r28
    1b4e:	e5 5b       	subi	r30, 0xB5	; 181
    1b50:	ff 4f       	sbci	r31, 0xFF	; 255
    1b52:	80 81       	ld	r24, Z
    1b54:	91 81       	ldd	r25, Z+1	; 0x01
    1b56:	00 97       	sbiw	r24, 0x00	; 0
    1b58:	d1 f6       	brne	.-76     	; 0x1b0e <main+0xb34>
    1b5a:	27 c0       	rjmp	.+78     	; 0x1baa <main+0xbd0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b5c:	8e 01       	movw	r16, r28
    1b5e:	05 5b       	subi	r16, 0xB5	; 181
    1b60:	1f 4f       	sbci	r17, 0xFF	; 255
    1b62:	fe 01       	movw	r30, r28
    1b64:	e3 5b       	subi	r30, 0xB3	; 179
    1b66:	ff 4f       	sbci	r31, 0xFF	; 255
    1b68:	60 81       	ld	r22, Z
    1b6a:	71 81       	ldd	r23, Z+1	; 0x01
    1b6c:	82 81       	ldd	r24, Z+2	; 0x02
    1b6e:	93 81       	ldd	r25, Z+3	; 0x03
    1b70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b74:	dc 01       	movw	r26, r24
    1b76:	cb 01       	movw	r24, r22
    1b78:	f8 01       	movw	r30, r16
    1b7a:	91 83       	std	Z+1, r25	; 0x01
    1b7c:	80 83       	st	Z, r24
    1b7e:	de 01       	movw	r26, r28
    1b80:	a9 5b       	subi	r26, 0xB9	; 185
    1b82:	bf 4f       	sbci	r27, 0xFF	; 255
    1b84:	fe 01       	movw	r30, r28
    1b86:	e5 5b       	subi	r30, 0xB5	; 181
    1b88:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8a:	80 81       	ld	r24, Z
    1b8c:	91 81       	ldd	r25, Z+1	; 0x01
    1b8e:	8d 93       	st	X+, r24
    1b90:	9c 93       	st	X, r25
    1b92:	fe 01       	movw	r30, r28
    1b94:	e9 5b       	subi	r30, 0xB9	; 185
    1b96:	ff 4f       	sbci	r31, 0xFF	; 255
    1b98:	80 81       	ld	r24, Z
    1b9a:	91 81       	ldd	r25, Z+1	; 0x01
    1b9c:	01 97       	sbiw	r24, 0x01	; 1
    1b9e:	f1 f7       	brne	.-4      	; 0x1b9c <main+0xbc2>
    1ba0:	fe 01       	movw	r30, r28
    1ba2:	e9 5b       	subi	r30, 0xB9	; 185
    1ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba6:	91 83       	std	Z+1, r25	; 0x01
    1ba8:	80 83       	st	Z, r24
				_delay_ms(1500);
				LCD_clearScreen();
    1baa:	0e 94 77 1b 	call	0x36ee	; 0x36ee <LCD_clearScreen>
    1bae:	29 cc       	rjmp	.-1966   	; 0x1402 <main+0x428>

		}

		else
		{
			LCD_clearScreen();
    1bb0:	0e 94 77 1b 	call	0x36ee	; 0x36ee <LCD_clearScreen>
			NumOfTries = 0;
    1bb4:	fe 01       	movw	r30, r28
    1bb6:	e4 55       	subi	r30, 0x54	; 84
    1bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bba:	10 82       	st	Z, r1

			LCD_displayString("+ : Open Door");
    1bbc:	83 ec       	ldi	r24, 0xC3	; 195
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <LCD_displayString>
			LCD_displayStringRowColumn(1,0,"- : Change Pass");
    1bc4:	21 ed       	ldi	r18, 0xD1	; 209
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	60 e0       	ldi	r22, 0x00	; 0
    1bcc:	a9 01       	movw	r20, r18
    1bce:	0e 94 3b 1b 	call	0x3676	; 0x3676 <LCD_displayStringRowColumn>

			switch(KEYPAD_getPressedKey())
    1bd2:	0e 94 cb 14 	call	0x2996	; 0x2996 <KEYPAD_getPressedKey>
    1bd6:	28 2f       	mov	r18, r24
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	cc 54       	subi	r28, 0x4C	; 76
    1bdc:	df 4f       	sbci	r29, 0xFF	; 255
    1bde:	39 83       	std	Y+1, r19	; 0x01
    1be0:	28 83       	st	Y, r18
    1be2:	c4 5b       	subi	r28, 0xB4	; 180
    1be4:	d0 40       	sbci	r29, 0x00	; 0
    1be6:	cc 54       	subi	r28, 0x4C	; 76
    1be8:	df 4f       	sbci	r29, 0xFF	; 255
    1bea:	88 81       	ld	r24, Y
    1bec:	99 81       	ldd	r25, Y+1	; 0x01
    1bee:	c4 5b       	subi	r28, 0xB4	; 180
    1bf0:	d0 40       	sbci	r29, 0x00	; 0
    1bf2:	8b 32       	cpi	r24, 0x2B	; 43
    1bf4:	91 05       	cpc	r25, r1
    1bf6:	59 f0       	breq	.+22     	; 0x1c0e <main+0xc34>
    1bf8:	cc 54       	subi	r28, 0x4C	; 76
    1bfa:	df 4f       	sbci	r29, 0xFF	; 255
    1bfc:	e8 81       	ld	r30, Y
    1bfe:	f9 81       	ldd	r31, Y+1	; 0x01
    1c00:	c4 5b       	subi	r28, 0xB4	; 180
    1c02:	d0 40       	sbci	r29, 0x00	; 0
    1c04:	ed 32       	cpi	r30, 0x2D	; 45
    1c06:	f1 05       	cpc	r31, r1
    1c08:	09 f4       	brne	.+2      	; 0x1c0c <main+0xc32>
    1c0a:	b7 c1       	rjmp	.+878    	; 0x1f7a <main+0xfa0>
    1c0c:	fa cb       	rjmp	.-2060   	; 0x1402 <main+0x428>
			{

			case '+' : /* Open Door Case */
				do{
					/* reset the password is correct flag to make the user enter the password again */
					PassIsCorrectFlag = 0;
    1c0e:	fe 01       	movw	r30, r28
    1c10:	e5 55       	subi	r30, 0x55	; 85
    1c12:	ff 4f       	sbci	r31, 0xFF	; 255
    1c14:	10 82       	st	Z, r1

					LCD_clearScreen();
    1c16:	0e 94 77 1b 	call	0x36ee	; 0x36ee <LCD_clearScreen>
					LCD_displayString("plz enter pass:");
    1c1a:	81 ee       	ldi	r24, 0xE1	; 225
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <LCD_displayString>
					LCD_moveCursor(1,0);
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	60 e0       	ldi	r22, 0x00	; 0
    1c26:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <LCD_moveCursor>

					/* Make MC2 ready to take the setted password */
					UART_sendByte(TAKE_MAIN_PASSWORD);
    1c2a:	8b e0       	ldi	r24, 0x0B	; 11
    1c2c:	0e 94 a5 1c 	call	0x394a	; 0x394a <UART_sendByte>

					/* Take the password */
					take_password();
    1c30:	0e 94 3e 06 	call	0xc7c	; 0xc7c <take_password>

					/* Send the password to MC2 to check if it is correct or not */
					send_password(Password);
    1c34:	87 e7       	ldi	r24, 0x77	; 119
    1c36:	91 e0       	ldi	r25, 0x01	; 1
    1c38:	0e 94 a3 05 	call	0xb46	; 0xb46 <send_password>
    1c3c:	fe 01       	movw	r30, r28
    1c3e:	ed 5b       	subi	r30, 0xBD	; 189
    1c40:	ff 4f       	sbci	r31, 0xFF	; 255
    1c42:	80 e0       	ldi	r24, 0x00	; 0
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	a0 ef       	ldi	r26, 0xF0	; 240
    1c48:	b1 e4       	ldi	r27, 0x41	; 65
    1c4a:	80 83       	st	Z, r24
    1c4c:	91 83       	std	Z+1, r25	; 0x01
    1c4e:	a2 83       	std	Z+2, r26	; 0x02
    1c50:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c52:	8e 01       	movw	r16, r28
    1c54:	01 5c       	subi	r16, 0xC1	; 193
    1c56:	1f 4f       	sbci	r17, 0xFF	; 255
    1c58:	fe 01       	movw	r30, r28
    1c5a:	ed 5b       	subi	r30, 0xBD	; 189
    1c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5e:	60 81       	ld	r22, Z
    1c60:	71 81       	ldd	r23, Z+1	; 0x01
    1c62:	82 81       	ldd	r24, Z+2	; 0x02
    1c64:	93 81       	ldd	r25, Z+3	; 0x03
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	4a ef       	ldi	r20, 0xFA	; 250
    1c6c:	54 e4       	ldi	r21, 0x44	; 68
    1c6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c72:	dc 01       	movw	r26, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	f8 01       	movw	r30, r16
    1c78:	80 83       	st	Z, r24
    1c7a:	91 83       	std	Z+1, r25	; 0x01
    1c7c:	a2 83       	std	Z+2, r26	; 0x02
    1c7e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c80:	fe 01       	movw	r30, r28
    1c82:	ff 96       	adiw	r30, 0x3f	; 63
    1c84:	60 81       	ld	r22, Z
    1c86:	71 81       	ldd	r23, Z+1	; 0x01
    1c88:	82 81       	ldd	r24, Z+2	; 0x02
    1c8a:	93 81       	ldd	r25, Z+3	; 0x03
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	40 e8       	ldi	r20, 0x80	; 128
    1c92:	5f e3       	ldi	r21, 0x3F	; 63
    1c94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c98:	88 23       	and	r24, r24
    1c9a:	2c f4       	brge	.+10     	; 0x1ca6 <main+0xccc>
		__ticks = 1;
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	9e af       	std	Y+62, r25	; 0x3e
    1ca2:	8d af       	std	Y+61, r24	; 0x3d
    1ca4:	46 c0       	rjmp	.+140    	; 0x1d32 <main+0xd58>
	else if (__tmp > 65535)
    1ca6:	fe 01       	movw	r30, r28
    1ca8:	ff 96       	adiw	r30, 0x3f	; 63
    1caa:	60 81       	ld	r22, Z
    1cac:	71 81       	ldd	r23, Z+1	; 0x01
    1cae:	82 81       	ldd	r24, Z+2	; 0x02
    1cb0:	93 81       	ldd	r25, Z+3	; 0x03
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	3f ef       	ldi	r19, 0xFF	; 255
    1cb6:	4f e7       	ldi	r20, 0x7F	; 127
    1cb8:	57 e4       	ldi	r21, 0x47	; 71
    1cba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cbe:	18 16       	cp	r1, r24
    1cc0:	64 f5       	brge	.+88     	; 0x1d1a <main+0xd40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc2:	fe 01       	movw	r30, r28
    1cc4:	ed 5b       	subi	r30, 0xBD	; 189
    1cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc8:	60 81       	ld	r22, Z
    1cca:	71 81       	ldd	r23, Z+1	; 0x01
    1ccc:	82 81       	ldd	r24, Z+2	; 0x02
    1cce:	93 81       	ldd	r25, Z+3	; 0x03
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	40 e2       	ldi	r20, 0x20	; 32
    1cd6:	51 e4       	ldi	r21, 0x41	; 65
    1cd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	bc 01       	movw	r22, r24
    1ce2:	cd 01       	movw	r24, r26
    1ce4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	9e af       	std	Y+62, r25	; 0x3e
    1cee:	8d af       	std	Y+61, r24	; 0x3d
    1cf0:	0f c0       	rjmp	.+30     	; 0x1d10 <main+0xd36>
    1cf2:	88 ec       	ldi	r24, 0xC8	; 200
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	9c af       	std	Y+60, r25	; 0x3c
    1cf8:	8b af       	std	Y+59, r24	; 0x3b
    1cfa:	8b ad       	ldd	r24, Y+59	; 0x3b
    1cfc:	9c ad       	ldd	r25, Y+60	; 0x3c
    1cfe:	01 97       	sbiw	r24, 0x01	; 1
    1d00:	f1 f7       	brne	.-4      	; 0x1cfe <main+0xd24>
    1d02:	9c af       	std	Y+60, r25	; 0x3c
    1d04:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d06:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d08:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d0a:	01 97       	sbiw	r24, 0x01	; 1
    1d0c:	9e af       	std	Y+62, r25	; 0x3e
    1d0e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d10:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d12:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d14:	00 97       	sbiw	r24, 0x00	; 0
    1d16:	69 f7       	brne	.-38     	; 0x1cf2 <main+0xd18>
    1d18:	16 c0       	rjmp	.+44     	; 0x1d46 <main+0xd6c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d1a:	fe 01       	movw	r30, r28
    1d1c:	ff 96       	adiw	r30, 0x3f	; 63
    1d1e:	60 81       	ld	r22, Z
    1d20:	71 81       	ldd	r23, Z+1	; 0x01
    1d22:	82 81       	ldd	r24, Z+2	; 0x02
    1d24:	93 81       	ldd	r25, Z+3	; 0x03
    1d26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	9e af       	std	Y+62, r25	; 0x3e
    1d30:	8d af       	std	Y+61, r24	; 0x3d
    1d32:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d34:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d36:	9a af       	std	Y+58, r25	; 0x3a
    1d38:	89 af       	std	Y+57, r24	; 0x39
    1d3a:	89 ad       	ldd	r24, Y+57	; 0x39
    1d3c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d3e:	01 97       	sbiw	r24, 0x01	; 1
    1d40:	f1 f7       	brne	.-4      	; 0x1d3e <main+0xd64>
    1d42:	9a af       	std	Y+58, r25	; 0x3a
    1d44:	89 af       	std	Y+57, r24	; 0x39

					_delay_ms(30);

					/* Check if the password is correct or not */
					if(UART_recieveByte() == PASSWORD_TRUE)
    1d46:	0e 94 bc 1c 	call	0x3978	; 0x3978 <UART_recieveByte>
    1d4a:	83 30       	cpi	r24, 0x03	; 3
    1d4c:	09 f0       	breq	.+2      	; 0x1d50 <main+0xd76>
    1d4e:	53 c0       	rjmp	.+166    	; 0x1df6 <main+0xe1c>
					{
						/* raise the password is correct flag */
						PassIsCorrectFlag = 1;
    1d50:	fe 01       	movw	r30, r28
    1d52:	e5 55       	subi	r30, 0x55	; 85
    1d54:	ff 4f       	sbci	r31, 0xFF	; 255
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	80 83       	st	Z, r24

						/* Send to MC2 to open the door */
						UART_sendByte(OPEN_DOOR);
    1d5a:	8c e0       	ldi	r24, 0x0C	; 12
    1d5c:	0e 94 a5 1c 	call	0x394a	; 0x394a <UART_sendByte>

						/* Initialize Timer1 with the configuration */
						Timer1_init(&Timer1_Config);
    1d60:	87 e6       	ldi	r24, 0x67	; 103
    1d62:	91 e0       	ldi	r25, 0x01	; 1
    1d64:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <Timer1_init>

						LCD_clearScreen();
    1d68:	0e 94 77 1b 	call	0x36ee	; 0x36ee <LCD_clearScreen>

						LCD_displayStringRowColumn(0,0,"    Door Is    ");
    1d6c:	21 ef       	ldi	r18, 0xF1	; 241
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	60 e0       	ldi	r22, 0x00	; 0
    1d74:	a9 01       	movw	r20, r18
    1d76:	0e 94 3b 1b 	call	0x3676	; 0x3676 <LCD_displayStringRowColumn>
						LCD_displayStringRowColumn(1,0,"  Unlocking   ");
    1d7a:	21 e0       	ldi	r18, 0x01	; 1
    1d7c:	31 e0       	ldi	r19, 0x01	; 1
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	60 e0       	ldi	r22, 0x00	; 0
    1d82:	a9 01       	movw	r20, r18
    1d84:	0e 94 3b 1b 	call	0x3676	; 0x3676 <LCD_displayStringRowColumn>


						/* Wait for 15 second */
						while(Timer1Ticks != 15 );
    1d88:	80 91 74 01 	lds	r24, 0x0174
    1d8c:	8f 30       	cpi	r24, 0x0F	; 15
    1d8e:	e1 f7       	brne	.-8      	; 0x1d88 <main+0xdae>

						/* reset the timer1 ticks & Timer1 */
						Timer1Ticks = 0;
    1d90:	10 92 74 01 	sts	0x0174, r1
						Timer1_deInit();
    1d94:	0e 94 31 1c 	call	0x3862	; 0x3862 <Timer1_deInit>


						/* Initialize the Timer1 Again */
						Timer1_init(&Timer1_Config);
    1d98:	87 e6       	ldi	r24, 0x67	; 103
    1d9a:	91 e0       	ldi	r25, 0x01	; 1
    1d9c:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <Timer1_init>
						LCD_clearScreen();
    1da0:	0e 94 77 1b 	call	0x36ee	; 0x36ee <LCD_clearScreen>
						LCD_displayString("    Holding   ");
    1da4:	80 e1       	ldi	r24, 0x10	; 16
    1da6:	91 e0       	ldi	r25, 0x01	; 1
    1da8:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <LCD_displayString>

						/* Wait for 3 second */
						while(Timer1Ticks != 3);
    1dac:	80 91 74 01 	lds	r24, 0x0174
    1db0:	83 30       	cpi	r24, 0x03	; 3
    1db2:	e1 f7       	brne	.-8      	; 0x1dac <main+0xdd2>

						/* reset the timer1 ticks & Timer1 */
						Timer1Ticks = 0;
    1db4:	10 92 74 01 	sts	0x0174, r1
						Timer1_deInit();
    1db8:	0e 94 31 1c 	call	0x3862	; 0x3862 <Timer1_deInit>


						/* Initialize the Timer1 Again */
						Timer1_init(&Timer1_Config);
    1dbc:	87 e6       	ldi	r24, 0x67	; 103
    1dbe:	91 e0       	ldi	r25, 0x01	; 1
    1dc0:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <Timer1_init>
						LCD_clearScreen();
    1dc4:	0e 94 77 1b 	call	0x36ee	; 0x36ee <LCD_clearScreen>
						LCD_displayStringRowColumn(0,0,"    Door Is    ");
    1dc8:	21 ef       	ldi	r18, 0xF1	; 241
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	60 e0       	ldi	r22, 0x00	; 0
    1dd0:	a9 01       	movw	r20, r18
    1dd2:	0e 94 3b 1b 	call	0x3676	; 0x3676 <LCD_displayStringRowColumn>
						LCD_displayStringRowColumn(1,0,"    Locking    ");
    1dd6:	2f e1       	ldi	r18, 0x1F	; 31
    1dd8:	31 e0       	ldi	r19, 0x01	; 1
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	60 e0       	ldi	r22, 0x00	; 0
    1dde:	a9 01       	movw	r20, r18
    1de0:	0e 94 3b 1b 	call	0x3676	; 0x3676 <LCD_displayStringRowColumn>

						/* Wait for 15 second */
						while(Timer1Ticks != 15 );
    1de4:	80 91 74 01 	lds	r24, 0x0174
    1de8:	8f 30       	cpi	r24, 0x0F	; 15
    1dea:	e1 f7       	brne	.-8      	; 0x1de4 <main+0xe0a>

						/* reset the timer1 ticks & Timer1 */
						Timer1Ticks = 0;
    1dec:	10 92 74 01 	sts	0x0174, r1
						Timer1_deInit();
    1df0:	0e 94 31 1c 	call	0x3862	; 0x3862 <Timer1_deInit>
    1df4:	95 c0       	rjmp	.+298    	; 0x1f20 <main+0xf46>
					}

					else
					{

						NumOfTries++; /* Increment the number of tries */
    1df6:	de 01       	movw	r26, r28
    1df8:	a4 55       	subi	r26, 0x54	; 84
    1dfa:	bf 4f       	sbci	r27, 0xFF	; 255
    1dfc:	fe 01       	movw	r30, r28
    1dfe:	e4 55       	subi	r30, 0x54	; 84
    1e00:	ff 4f       	sbci	r31, 0xFF	; 255
    1e02:	80 81       	ld	r24, Z
    1e04:	8f 5f       	subi	r24, 0xFF	; 255
    1e06:	8c 93       	st	X, r24

						LCD_clearScreen();
    1e08:	0e 94 77 1b 	call	0x36ee	; 0x36ee <LCD_clearScreen>
						LCD_displayString("Wrong Password!");
    1e0c:	8f e2       	ldi	r24, 0x2F	; 47
    1e0e:	91 e0       	ldi	r25, 0x01	; 1
    1e10:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <LCD_displayString>
						LCD_moveCursor(1,0);
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	60 e0       	ldi	r22, 0x00	; 0
    1e18:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <LCD_moveCursor>
						LCD_displayString("Tries Remain: ");
    1e1c:	8f e3       	ldi	r24, 0x3F	; 63
    1e1e:	91 e0       	ldi	r25, 0x01	; 1
    1e20:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <LCD_displayString>
						LCD_intgerToString(3-NumOfTries);
    1e24:	fe 01       	movw	r30, r28
    1e26:	e4 55       	subi	r30, 0x54	; 84
    1e28:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2a:	80 81       	ld	r24, Z
    1e2c:	28 2f       	mov	r18, r24
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	83 e0       	ldi	r24, 0x03	; 3
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	82 1b       	sub	r24, r18
    1e36:	93 0b       	sbc	r25, r19
    1e38:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <LCD_intgerToString>
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	aa ef       	ldi	r26, 0xFA	; 250
    1e42:	b4 e4       	ldi	r27, 0x44	; 68
    1e44:	8d ab       	std	Y+53, r24	; 0x35
    1e46:	9e ab       	std	Y+54, r25	; 0x36
    1e48:	af ab       	std	Y+55, r26	; 0x37
    1e4a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e4c:	6d a9       	ldd	r22, Y+53	; 0x35
    1e4e:	7e a9       	ldd	r23, Y+54	; 0x36
    1e50:	8f a9       	ldd	r24, Y+55	; 0x37
    1e52:	98 ad       	ldd	r25, Y+56	; 0x38
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	4a ef       	ldi	r20, 0xFA	; 250
    1e5a:	54 e4       	ldi	r21, 0x44	; 68
    1e5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e60:	dc 01       	movw	r26, r24
    1e62:	cb 01       	movw	r24, r22
    1e64:	89 ab       	std	Y+49, r24	; 0x31
    1e66:	9a ab       	std	Y+50, r25	; 0x32
    1e68:	ab ab       	std	Y+51, r26	; 0x33
    1e6a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e6c:	69 a9       	ldd	r22, Y+49	; 0x31
    1e6e:	7a a9       	ldd	r23, Y+50	; 0x32
    1e70:	8b a9       	ldd	r24, Y+51	; 0x33
    1e72:	9c a9       	ldd	r25, Y+52	; 0x34
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	40 e8       	ldi	r20, 0x80	; 128
    1e7a:	5f e3       	ldi	r21, 0x3F	; 63
    1e7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e80:	88 23       	and	r24, r24
    1e82:	2c f4       	brge	.+10     	; 0x1e8e <main+0xeb4>
		__ticks = 1;
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	98 ab       	std	Y+48, r25	; 0x30
    1e8a:	8f a7       	std	Y+47, r24	; 0x2f
    1e8c:	3f c0       	rjmp	.+126    	; 0x1f0c <main+0xf32>
	else if (__tmp > 65535)
    1e8e:	69 a9       	ldd	r22, Y+49	; 0x31
    1e90:	7a a9       	ldd	r23, Y+50	; 0x32
    1e92:	8b a9       	ldd	r24, Y+51	; 0x33
    1e94:	9c a9       	ldd	r25, Y+52	; 0x34
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	3f ef       	ldi	r19, 0xFF	; 255
    1e9a:	4f e7       	ldi	r20, 0x7F	; 127
    1e9c:	57 e4       	ldi	r21, 0x47	; 71
    1e9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ea2:	18 16       	cp	r1, r24
    1ea4:	4c f5       	brge	.+82     	; 0x1ef8 <main+0xf1e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea6:	6d a9       	ldd	r22, Y+53	; 0x35
    1ea8:	7e a9       	ldd	r23, Y+54	; 0x36
    1eaa:	8f a9       	ldd	r24, Y+55	; 0x37
    1eac:	98 ad       	ldd	r25, Y+56	; 0x38
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	40 e2       	ldi	r20, 0x20	; 32
    1eb4:	51 e4       	ldi	r21, 0x41	; 65
    1eb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eba:	dc 01       	movw	r26, r24
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	bc 01       	movw	r22, r24
    1ec0:	cd 01       	movw	r24, r26
    1ec2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	98 ab       	std	Y+48, r25	; 0x30
    1ecc:	8f a7       	std	Y+47, r24	; 0x2f
    1ece:	0f c0       	rjmp	.+30     	; 0x1eee <main+0xf14>
    1ed0:	88 ec       	ldi	r24, 0xC8	; 200
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	9e a7       	std	Y+46, r25	; 0x2e
    1ed6:	8d a7       	std	Y+45, r24	; 0x2d
    1ed8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1eda:	9e a5       	ldd	r25, Y+46	; 0x2e
    1edc:	01 97       	sbiw	r24, 0x01	; 1
    1ede:	f1 f7       	brne	.-4      	; 0x1edc <main+0xf02>
    1ee0:	9e a7       	std	Y+46, r25	; 0x2e
    1ee2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ee6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	98 ab       	std	Y+48, r25	; 0x30
    1eec:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eee:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ef0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ef2:	00 97       	sbiw	r24, 0x00	; 0
    1ef4:	69 f7       	brne	.-38     	; 0x1ed0 <main+0xef6>
    1ef6:	14 c0       	rjmp	.+40     	; 0x1f20 <main+0xf46>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef8:	69 a9       	ldd	r22, Y+49	; 0x31
    1efa:	7a a9       	ldd	r23, Y+50	; 0x32
    1efc:	8b a9       	ldd	r24, Y+51	; 0x33
    1efe:	9c a9       	ldd	r25, Y+52	; 0x34
    1f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	98 ab       	std	Y+48, r25	; 0x30
    1f0a:	8f a7       	std	Y+47, r24	; 0x2f
    1f0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f0e:	98 a9       	ldd	r25, Y+48	; 0x30
    1f10:	9c a7       	std	Y+44, r25	; 0x2c
    1f12:	8b a7       	std	Y+43, r24	; 0x2b
    1f14:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f16:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f18:	01 97       	sbiw	r24, 0x01	; 1
    1f1a:	f1 f7       	brne	.-4      	; 0x1f18 <main+0xf3e>
    1f1c:	9c a7       	std	Y+44, r25	; 0x2c
    1f1e:	8b a7       	std	Y+43, r24	; 0x2b
						_delay_ms(2000);

					}

				}while((NumOfTries < 3 ) && !(PassIsCorrectFlag));
    1f20:	fe 01       	movw	r30, r28
    1f22:	e4 55       	subi	r30, 0x54	; 84
    1f24:	ff 4f       	sbci	r31, 0xFF	; 255
    1f26:	80 81       	ld	r24, Z
    1f28:	83 30       	cpi	r24, 0x03	; 3
    1f2a:	38 f4       	brcc	.+14     	; 0x1f3a <main+0xf60>
    1f2c:	fe 01       	movw	r30, r28
    1f2e:	e5 55       	subi	r30, 0x55	; 85
    1f30:	ff 4f       	sbci	r31, 0xFF	; 255
    1f32:	80 81       	ld	r24, Z
    1f34:	88 23       	and	r24, r24
    1f36:	09 f4       	brne	.+2      	; 0x1f3a <main+0xf60>
    1f38:	6a ce       	rjmp	.-812    	; 0x1c0e <main+0xc34>

				/* Check if the user didn't enter the correct password for 3 times */
				if(PassIsCorrectFlag == 0)
    1f3a:	fe 01       	movw	r30, r28
    1f3c:	e5 55       	subi	r30, 0x55	; 85
    1f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f40:	80 81       	ld	r24, Z
    1f42:	88 23       	and	r24, r24
    1f44:	09 f0       	breq	.+2      	; 0x1f48 <main+0xf6e>
    1f46:	5d ca       	rjmp	.-2886   	; 0x1402 <main+0x428>
				{
					/* Activate Alarm Mode on MC2 */
					UART_sendByte(OPEN_ALARM);
    1f48:	8d e0       	ldi	r24, 0x0D	; 13
    1f4a:	0e 94 a5 1c 	call	0x394a	; 0x394a <UART_sendByte>

					/* Activate the Alarm Mode on MC1 */
					LCD_clearScreen();
    1f4e:	0e 94 77 1b 	call	0x36ee	; 0x36ee <LCD_clearScreen>
					Timer1_init(&Timer1_Config);
    1f52:	87 e6       	ldi	r24, 0x67	; 103
    1f54:	91 e0       	ldi	r25, 0x01	; 1
    1f56:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <Timer1_init>
    1f5a:	04 c0       	rjmp	.+8      	; 0x1f64 <main+0xf8a>
					while(Timer1Ticks != 60){
						LCD_displayString("    WARNING!    ");
    1f5c:	8e e4       	ldi	r24, 0x4E	; 78
    1f5e:	91 e0       	ldi	r25, 0x01	; 1
    1f60:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <LCD_displayString>
					UART_sendByte(OPEN_ALARM);

					/* Activate the Alarm Mode on MC1 */
					LCD_clearScreen();
					Timer1_init(&Timer1_Config);
					while(Timer1Ticks != 60){
    1f64:	80 91 74 01 	lds	r24, 0x0174
    1f68:	8c 33       	cpi	r24, 0x3C	; 60
    1f6a:	c1 f7       	brne	.-16     	; 0x1f5c <main+0xf82>
						LCD_displayString("    WARNING!    ");

					}
					LCD_clearScreen();
    1f6c:	0e 94 77 1b 	call	0x36ee	; 0x36ee <LCD_clearScreen>
					Timer1Ticks = 0;
    1f70:	10 92 74 01 	sts	0x0174, r1
					Timer1_deInit();
    1f74:	0e 94 31 1c 	call	0x3862	; 0x3862 <Timer1_deInit>
    1f78:	44 ca       	rjmp	.-2936   	; 0x1402 <main+0x428>
				break;

			case '-' :

				do{
					PassIsCorrectFlag = 0; /* Reset the password is correct flag */
    1f7a:	fe 01       	movw	r30, r28
    1f7c:	e5 55       	subi	r30, 0x55	; 85
    1f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f80:	10 82       	st	Z, r1

					LCD_clearScreen();
    1f82:	0e 94 77 1b 	call	0x36ee	; 0x36ee <LCD_clearScreen>
					LCD_displayString("plz enter pass:");
    1f86:	81 ee       	ldi	r24, 0xE1	; 225
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <LCD_displayString>
					LCD_moveCursor(1,0);
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	60 e0       	ldi	r22, 0x00	; 0
    1f92:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <LCD_moveCursor>
					PassIsMatchFlag = 1;
    1f96:	fe 01       	movw	r30, r28
    1f98:	e7 55       	subi	r30, 0x57	; 87
    1f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	80 83       	st	Z, r24
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	a8 ec       	ldi	r26, 0xC8	; 200
    1fa6:	b2 e4       	ldi	r27, 0x42	; 66
    1fa8:	8f a3       	std	Y+39, r24	; 0x27
    1faa:	98 a7       	std	Y+40, r25	; 0x28
    1fac:	a9 a7       	std	Y+41, r26	; 0x29
    1fae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb0:	6f a1       	ldd	r22, Y+39	; 0x27
    1fb2:	78 a5       	ldd	r23, Y+40	; 0x28
    1fb4:	89 a5       	ldd	r24, Y+41	; 0x29
    1fb6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	4a ef       	ldi	r20, 0xFA	; 250
    1fbe:	54 e4       	ldi	r21, 0x44	; 68
    1fc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	8b a3       	std	Y+35, r24	; 0x23
    1fca:	9c a3       	std	Y+36, r25	; 0x24
    1fcc:	ad a3       	std	Y+37, r26	; 0x25
    1fce:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fd0:	6b a1       	ldd	r22, Y+35	; 0x23
    1fd2:	7c a1       	ldd	r23, Y+36	; 0x24
    1fd4:	8d a1       	ldd	r24, Y+37	; 0x25
    1fd6:	9e a1       	ldd	r25, Y+38	; 0x26
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	40 e8       	ldi	r20, 0x80	; 128
    1fde:	5f e3       	ldi	r21, 0x3F	; 63
    1fe0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fe4:	88 23       	and	r24, r24
    1fe6:	2c f4       	brge	.+10     	; 0x1ff2 <main+0x1018>
		__ticks = 1;
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	9a a3       	std	Y+34, r25	; 0x22
    1fee:	89 a3       	std	Y+33, r24	; 0x21
    1ff0:	3f c0       	rjmp	.+126    	; 0x2070 <main+0x1096>
	else if (__tmp > 65535)
    1ff2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ff4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ff6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ff8:	9e a1       	ldd	r25, Y+38	; 0x26
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	3f ef       	ldi	r19, 0xFF	; 255
    1ffe:	4f e7       	ldi	r20, 0x7F	; 127
    2000:	57 e4       	ldi	r21, 0x47	; 71
    2002:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2006:	18 16       	cp	r1, r24
    2008:	4c f5       	brge	.+82     	; 0x205c <main+0x1082>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    200a:	6f a1       	ldd	r22, Y+39	; 0x27
    200c:	78 a5       	ldd	r23, Y+40	; 0x28
    200e:	89 a5       	ldd	r24, Y+41	; 0x29
    2010:	9a a5       	ldd	r25, Y+42	; 0x2a
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	40 e2       	ldi	r20, 0x20	; 32
    2018:	51 e4       	ldi	r21, 0x41	; 65
    201a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    201e:	dc 01       	movw	r26, r24
    2020:	cb 01       	movw	r24, r22
    2022:	bc 01       	movw	r22, r24
    2024:	cd 01       	movw	r24, r26
    2026:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	9a a3       	std	Y+34, r25	; 0x22
    2030:	89 a3       	std	Y+33, r24	; 0x21
    2032:	0f c0       	rjmp	.+30     	; 0x2052 <main+0x1078>
    2034:	88 ec       	ldi	r24, 0xC8	; 200
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	98 a3       	std	Y+32, r25	; 0x20
    203a:	8f 8f       	std	Y+31, r24	; 0x1f
    203c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    203e:	98 a1       	ldd	r25, Y+32	; 0x20
    2040:	01 97       	sbiw	r24, 0x01	; 1
    2042:	f1 f7       	brne	.-4      	; 0x2040 <main+0x1066>
    2044:	98 a3       	std	Y+32, r25	; 0x20
    2046:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2048:	89 a1       	ldd	r24, Y+33	; 0x21
    204a:	9a a1       	ldd	r25, Y+34	; 0x22
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	9a a3       	std	Y+34, r25	; 0x22
    2050:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2052:	89 a1       	ldd	r24, Y+33	; 0x21
    2054:	9a a1       	ldd	r25, Y+34	; 0x22
    2056:	00 97       	sbiw	r24, 0x00	; 0
    2058:	69 f7       	brne	.-38     	; 0x2034 <main+0x105a>
    205a:	14 c0       	rjmp	.+40     	; 0x2084 <main+0x10aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    205c:	6b a1       	ldd	r22, Y+35	; 0x23
    205e:	7c a1       	ldd	r23, Y+36	; 0x24
    2060:	8d a1       	ldd	r24, Y+37	; 0x25
    2062:	9e a1       	ldd	r25, Y+38	; 0x26
    2064:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	9a a3       	std	Y+34, r25	; 0x22
    206e:	89 a3       	std	Y+33, r24	; 0x21
    2070:	89 a1       	ldd	r24, Y+33	; 0x21
    2072:	9a a1       	ldd	r25, Y+34	; 0x22
    2074:	9e 8f       	std	Y+30, r25	; 0x1e
    2076:	8d 8f       	std	Y+29, r24	; 0x1d
    2078:	8d 8d       	ldd	r24, Y+29	; 0x1d
    207a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    207c:	01 97       	sbiw	r24, 0x01	; 1
    207e:	f1 f7       	brne	.-4      	; 0x207c <main+0x10a2>
    2080:	9e 8f       	std	Y+30, r25	; 0x1e
    2082:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(100);


					/* Make MC2 ready to take the setted password */
					UART_sendByte(TAKE_MAIN_PASSWORD);
    2084:	8b e0       	ldi	r24, 0x0B	; 11
    2086:	0e 94 a5 1c 	call	0x394a	; 0x394a <UART_sendByte>

					/* Take the password */
					take_password();
    208a:	0e 94 3e 06 	call	0xc7c	; 0xc7c <take_password>

					/* Send the password to MC2 to check if it is correct or not */
					send_password(Password);
    208e:	87 e7       	ldi	r24, 0x77	; 119
    2090:	91 e0       	ldi	r25, 0x01	; 1
    2092:	0e 94 a3 05 	call	0xb46	; 0xb46 <send_password>
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	a0 ef       	ldi	r26, 0xF0	; 240
    209c:	b1 e4       	ldi	r27, 0x41	; 65
    209e:	89 8f       	std	Y+25, r24	; 0x19
    20a0:	9a 8f       	std	Y+26, r25	; 0x1a
    20a2:	ab 8f       	std	Y+27, r26	; 0x1b
    20a4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a6:	69 8d       	ldd	r22, Y+25	; 0x19
    20a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	4a ef       	ldi	r20, 0xFA	; 250
    20b4:	54 e4       	ldi	r21, 0x44	; 68
    20b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	8d 8b       	std	Y+21, r24	; 0x15
    20c0:	9e 8b       	std	Y+22, r25	; 0x16
    20c2:	af 8b       	std	Y+23, r26	; 0x17
    20c4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20c6:	6d 89       	ldd	r22, Y+21	; 0x15
    20c8:	7e 89       	ldd	r23, Y+22	; 0x16
    20ca:	8f 89       	ldd	r24, Y+23	; 0x17
    20cc:	98 8d       	ldd	r25, Y+24	; 0x18
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	40 e8       	ldi	r20, 0x80	; 128
    20d4:	5f e3       	ldi	r21, 0x3F	; 63
    20d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20da:	88 23       	and	r24, r24
    20dc:	2c f4       	brge	.+10     	; 0x20e8 <main+0x110e>
		__ticks = 1;
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	9c 8b       	std	Y+20, r25	; 0x14
    20e4:	8b 8b       	std	Y+19, r24	; 0x13
    20e6:	3f c0       	rjmp	.+126    	; 0x2166 <main+0x118c>
	else if (__tmp > 65535)
    20e8:	6d 89       	ldd	r22, Y+21	; 0x15
    20ea:	7e 89       	ldd	r23, Y+22	; 0x16
    20ec:	8f 89       	ldd	r24, Y+23	; 0x17
    20ee:	98 8d       	ldd	r25, Y+24	; 0x18
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	3f ef       	ldi	r19, 0xFF	; 255
    20f4:	4f e7       	ldi	r20, 0x7F	; 127
    20f6:	57 e4       	ldi	r21, 0x47	; 71
    20f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20fc:	18 16       	cp	r1, r24
    20fe:	4c f5       	brge	.+82     	; 0x2152 <main+0x1178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2100:	69 8d       	ldd	r22, Y+25	; 0x19
    2102:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2104:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2106:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	40 e2       	ldi	r20, 0x20	; 32
    210e:	51 e4       	ldi	r21, 0x41	; 65
    2110:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2114:	dc 01       	movw	r26, r24
    2116:	cb 01       	movw	r24, r22
    2118:	bc 01       	movw	r22, r24
    211a:	cd 01       	movw	r24, r26
    211c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	9c 8b       	std	Y+20, r25	; 0x14
    2126:	8b 8b       	std	Y+19, r24	; 0x13
    2128:	0f c0       	rjmp	.+30     	; 0x2148 <main+0x116e>
    212a:	88 ec       	ldi	r24, 0xC8	; 200
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	9a 8b       	std	Y+18, r25	; 0x12
    2130:	89 8b       	std	Y+17, r24	; 0x11
    2132:	89 89       	ldd	r24, Y+17	; 0x11
    2134:	9a 89       	ldd	r25, Y+18	; 0x12
    2136:	01 97       	sbiw	r24, 0x01	; 1
    2138:	f1 f7       	brne	.-4      	; 0x2136 <main+0x115c>
    213a:	9a 8b       	std	Y+18, r25	; 0x12
    213c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    213e:	8b 89       	ldd	r24, Y+19	; 0x13
    2140:	9c 89       	ldd	r25, Y+20	; 0x14
    2142:	01 97       	sbiw	r24, 0x01	; 1
    2144:	9c 8b       	std	Y+20, r25	; 0x14
    2146:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2148:	8b 89       	ldd	r24, Y+19	; 0x13
    214a:	9c 89       	ldd	r25, Y+20	; 0x14
    214c:	00 97       	sbiw	r24, 0x00	; 0
    214e:	69 f7       	brne	.-38     	; 0x212a <main+0x1150>
    2150:	14 c0       	rjmp	.+40     	; 0x217a <main+0x11a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2152:	6d 89       	ldd	r22, Y+21	; 0x15
    2154:	7e 89       	ldd	r23, Y+22	; 0x16
    2156:	8f 89       	ldd	r24, Y+23	; 0x17
    2158:	98 8d       	ldd	r25, Y+24	; 0x18
    215a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	9c 8b       	std	Y+20, r25	; 0x14
    2164:	8b 8b       	std	Y+19, r24	; 0x13
    2166:	8b 89       	ldd	r24, Y+19	; 0x13
    2168:	9c 89       	ldd	r25, Y+20	; 0x14
    216a:	98 8b       	std	Y+16, r25	; 0x10
    216c:	8f 87       	std	Y+15, r24	; 0x0f
    216e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2170:	98 89       	ldd	r25, Y+16	; 0x10
    2172:	01 97       	sbiw	r24, 0x01	; 1
    2174:	f1 f7       	brne	.-4      	; 0x2172 <main+0x1198>
    2176:	98 8b       	std	Y+16, r25	; 0x10
    2178:	8f 87       	std	Y+15, r24	; 0x0f

					_delay_ms(30);

					/* Check if the password is correct or not */
					if(UART_recieveByte() == PASSWORD_TRUE)
    217a:	0e 94 bc 1c 	call	0x3978	; 0x3978 <UART_recieveByte>
    217e:	83 30       	cpi	r24, 0x03	; 3
    2180:	51 f4       	brne	.+20     	; 0x2196 <main+0x11bc>
					{
						PassIsSetFlag = 0; /* Clear the password is set flag */
    2182:	fe 01       	movw	r30, r28
    2184:	e6 55       	subi	r30, 0x56	; 86
    2186:	ff 4f       	sbci	r31, 0xFF	; 255
    2188:	10 82       	st	Z, r1
						PassIsCorrectFlag = 1;
    218a:	fe 01       	movw	r30, r28
    218c:	e5 55       	subi	r30, 0x55	; 85
    218e:	ff 4f       	sbci	r31, 0xFF	; 255
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	80 83       	st	Z, r24
    2194:	95 c0       	rjmp	.+298    	; 0x22c0 <main+0x12e6>

					}
					else
					{
						NumOfTries++; /* Increment the number of tries */
    2196:	de 01       	movw	r26, r28
    2198:	a4 55       	subi	r26, 0x54	; 84
    219a:	bf 4f       	sbci	r27, 0xFF	; 255
    219c:	fe 01       	movw	r30, r28
    219e:	e4 55       	subi	r30, 0x54	; 84
    21a0:	ff 4f       	sbci	r31, 0xFF	; 255
    21a2:	80 81       	ld	r24, Z
    21a4:	8f 5f       	subi	r24, 0xFF	; 255
    21a6:	8c 93       	st	X, r24

						LCD_clearScreen();
    21a8:	0e 94 77 1b 	call	0x36ee	; 0x36ee <LCD_clearScreen>
						LCD_displayString("Wrong Password!");
    21ac:	8f e2       	ldi	r24, 0x2F	; 47
    21ae:	91 e0       	ldi	r25, 0x01	; 1
    21b0:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <LCD_displayString>
						LCD_moveCursor(1,0);
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	60 e0       	ldi	r22, 0x00	; 0
    21b8:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <LCD_moveCursor>
						LCD_displayString("Tries Remain: ");
    21bc:	8f e3       	ldi	r24, 0x3F	; 63
    21be:	91 e0       	ldi	r25, 0x01	; 1
    21c0:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <LCD_displayString>
						LCD_intgerToString(3-NumOfTries);
    21c4:	fe 01       	movw	r30, r28
    21c6:	e4 55       	subi	r30, 0x54	; 84
    21c8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ca:	80 81       	ld	r24, Z
    21cc:	28 2f       	mov	r18, r24
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	83 e0       	ldi	r24, 0x03	; 3
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	82 1b       	sub	r24, r18
    21d6:	93 0b       	sbc	r25, r19
    21d8:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <LCD_intgerToString>
    21dc:	80 e0       	ldi	r24, 0x00	; 0
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	aa ef       	ldi	r26, 0xFA	; 250
    21e2:	b4 e4       	ldi	r27, 0x44	; 68
    21e4:	8b 87       	std	Y+11, r24	; 0x0b
    21e6:	9c 87       	std	Y+12, r25	; 0x0c
    21e8:	ad 87       	std	Y+13, r26	; 0x0d
    21ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    21ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    21f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	4a ef       	ldi	r20, 0xFA	; 250
    21fa:	54 e4       	ldi	r21, 0x44	; 68
    21fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	8f 83       	std	Y+7, r24	; 0x07
    2206:	98 87       	std	Y+8, r25	; 0x08
    2208:	a9 87       	std	Y+9, r26	; 0x09
    220a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    220c:	6f 81       	ldd	r22, Y+7	; 0x07
    220e:	78 85       	ldd	r23, Y+8	; 0x08
    2210:	89 85       	ldd	r24, Y+9	; 0x09
    2212:	9a 85       	ldd	r25, Y+10	; 0x0a
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	40 e8       	ldi	r20, 0x80	; 128
    221a:	5f e3       	ldi	r21, 0x3F	; 63
    221c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2220:	88 23       	and	r24, r24
    2222:	2c f4       	brge	.+10     	; 0x222e <main+0x1254>
		__ticks = 1;
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	9e 83       	std	Y+6, r25	; 0x06
    222a:	8d 83       	std	Y+5, r24	; 0x05
    222c:	3f c0       	rjmp	.+126    	; 0x22ac <main+0x12d2>
	else if (__tmp > 65535)
    222e:	6f 81       	ldd	r22, Y+7	; 0x07
    2230:	78 85       	ldd	r23, Y+8	; 0x08
    2232:	89 85       	ldd	r24, Y+9	; 0x09
    2234:	9a 85       	ldd	r25, Y+10	; 0x0a
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	3f ef       	ldi	r19, 0xFF	; 255
    223a:	4f e7       	ldi	r20, 0x7F	; 127
    223c:	57 e4       	ldi	r21, 0x47	; 71
    223e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2242:	18 16       	cp	r1, r24
    2244:	4c f5       	brge	.+82     	; 0x2298 <main+0x12be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2246:	6b 85       	ldd	r22, Y+11	; 0x0b
    2248:	7c 85       	ldd	r23, Y+12	; 0x0c
    224a:	8d 85       	ldd	r24, Y+13	; 0x0d
    224c:	9e 85       	ldd	r25, Y+14	; 0x0e
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	40 e2       	ldi	r20, 0x20	; 32
    2254:	51 e4       	ldi	r21, 0x41	; 65
    2256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225a:	dc 01       	movw	r26, r24
    225c:	cb 01       	movw	r24, r22
    225e:	bc 01       	movw	r22, r24
    2260:	cd 01       	movw	r24, r26
    2262:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	9e 83       	std	Y+6, r25	; 0x06
    226c:	8d 83       	std	Y+5, r24	; 0x05
    226e:	0f c0       	rjmp	.+30     	; 0x228e <main+0x12b4>
    2270:	88 ec       	ldi	r24, 0xC8	; 200
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	9c 83       	std	Y+4, r25	; 0x04
    2276:	8b 83       	std	Y+3, r24	; 0x03
    2278:	8b 81       	ldd	r24, Y+3	; 0x03
    227a:	9c 81       	ldd	r25, Y+4	; 0x04
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	f1 f7       	brne	.-4      	; 0x227c <main+0x12a2>
    2280:	9c 83       	std	Y+4, r25	; 0x04
    2282:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2284:	8d 81       	ldd	r24, Y+5	; 0x05
    2286:	9e 81       	ldd	r25, Y+6	; 0x06
    2288:	01 97       	sbiw	r24, 0x01	; 1
    228a:	9e 83       	std	Y+6, r25	; 0x06
    228c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    228e:	8d 81       	ldd	r24, Y+5	; 0x05
    2290:	9e 81       	ldd	r25, Y+6	; 0x06
    2292:	00 97       	sbiw	r24, 0x00	; 0
    2294:	69 f7       	brne	.-38     	; 0x2270 <main+0x1296>
    2296:	14 c0       	rjmp	.+40     	; 0x22c0 <main+0x12e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2298:	6f 81       	ldd	r22, Y+7	; 0x07
    229a:	78 85       	ldd	r23, Y+8	; 0x08
    229c:	89 85       	ldd	r24, Y+9	; 0x09
    229e:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	9e 83       	std	Y+6, r25	; 0x06
    22aa:	8d 83       	std	Y+5, r24	; 0x05
    22ac:	8d 81       	ldd	r24, Y+5	; 0x05
    22ae:	9e 81       	ldd	r25, Y+6	; 0x06
    22b0:	9a 83       	std	Y+2, r25	; 0x02
    22b2:	89 83       	std	Y+1, r24	; 0x01
    22b4:	89 81       	ldd	r24, Y+1	; 0x01
    22b6:	9a 81       	ldd	r25, Y+2	; 0x02
    22b8:	01 97       	sbiw	r24, 0x01	; 1
    22ba:	f1 f7       	brne	.-4      	; 0x22b8 <main+0x12de>
    22bc:	9a 83       	std	Y+2, r25	; 0x02
    22be:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(2000);

					}

				}while((NumOfTries < 3) && !(PassIsCorrectFlag));
    22c0:	fe 01       	movw	r30, r28
    22c2:	e4 55       	subi	r30, 0x54	; 84
    22c4:	ff 4f       	sbci	r31, 0xFF	; 255
    22c6:	80 81       	ld	r24, Z
    22c8:	83 30       	cpi	r24, 0x03	; 3
    22ca:	38 f4       	brcc	.+14     	; 0x22da <main+0x1300>
    22cc:	fe 01       	movw	r30, r28
    22ce:	e5 55       	subi	r30, 0x55	; 85
    22d0:	ff 4f       	sbci	r31, 0xFF	; 255
    22d2:	80 81       	ld	r24, Z
    22d4:	88 23       	and	r24, r24
    22d6:	09 f4       	brne	.+2      	; 0x22da <main+0x1300>
    22d8:	50 ce       	rjmp	.-864    	; 0x1f7a <main+0xfa0>

				if(PassIsCorrectFlag == 0)
    22da:	fe 01       	movw	r30, r28
    22dc:	e5 55       	subi	r30, 0x55	; 85
    22de:	ff 4f       	sbci	r31, 0xFF	; 255
    22e0:	80 81       	ld	r24, Z
    22e2:	88 23       	and	r24, r24
    22e4:	09 f0       	breq	.+2      	; 0x22e8 <main+0x130e>
    22e6:	8d c8       	rjmp	.-3814   	; 0x1402 <main+0x428>
				{
					/* Activate Alarm Mode on MC2 */
					UART_sendByte(OPEN_ALARM);
    22e8:	8d e0       	ldi	r24, 0x0D	; 13
    22ea:	0e 94 a5 1c 	call	0x394a	; 0x394a <UART_sendByte>

					/* Activate the Alarm Mode on MC1 */
					LCD_clearScreen();
    22ee:	0e 94 77 1b 	call	0x36ee	; 0x36ee <LCD_clearScreen>
					Timer1_init(&Timer1_Config);
    22f2:	87 e6       	ldi	r24, 0x67	; 103
    22f4:	91 e0       	ldi	r25, 0x01	; 1
    22f6:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <Timer1_init>
    22fa:	04 c0       	rjmp	.+8      	; 0x2304 <main+0x132a>
					while(Timer1Ticks != 60){
						LCD_displayString("    WARNING!    ");
    22fc:	8e e4       	ldi	r24, 0x4E	; 78
    22fe:	91 e0       	ldi	r25, 0x01	; 1
    2300:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <LCD_displayString>
					UART_sendByte(OPEN_ALARM);

					/* Activate the Alarm Mode on MC1 */
					LCD_clearScreen();
					Timer1_init(&Timer1_Config);
					while(Timer1Ticks != 60){
    2304:	80 91 74 01 	lds	r24, 0x0174
    2308:	8c 33       	cpi	r24, 0x3C	; 60
    230a:	c1 f7       	brne	.-16     	; 0x22fc <main+0x1322>
						LCD_displayString("    WARNING!    ");

					}
					LCD_clearScreen();
    230c:	0e 94 77 1b 	call	0x36ee	; 0x36ee <LCD_clearScreen>
					Timer1Ticks = 0;
    2310:	10 92 74 01 	sts	0x0174, r1
					Timer1_deInit();
    2314:	0e 94 31 1c 	call	0x3862	; 0x3862 <Timer1_deInit>
    2318:	74 c8       	rjmp	.-3864   	; 0x1402 <main+0x428>

0000231a <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    231a:	df 93       	push	r29
    231c:	cf 93       	push	r28
    231e:	00 d0       	rcall	.+0      	; 0x2320 <GPIO_setupPinDirection+0x6>
    2320:	00 d0       	rcall	.+0      	; 0x2322 <GPIO_setupPinDirection+0x8>
    2322:	0f 92       	push	r0
    2324:	cd b7       	in	r28, 0x3d	; 61
    2326:	de b7       	in	r29, 0x3e	; 62
    2328:	89 83       	std	Y+1, r24	; 0x01
    232a:	6a 83       	std	Y+2, r22	; 0x02
    232c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    232e:	8a 81       	ldd	r24, Y+2	; 0x02
    2330:	88 30       	cpi	r24, 0x08	; 8
    2332:	08 f0       	brcs	.+2      	; 0x2336 <GPIO_setupPinDirection+0x1c>
    2334:	d5 c0       	rjmp	.+426    	; 0x24e0 <GPIO_setupPinDirection+0x1c6>
    2336:	89 81       	ldd	r24, Y+1	; 0x01
    2338:	84 30       	cpi	r24, 0x04	; 4
    233a:	08 f0       	brcs	.+2      	; 0x233e <GPIO_setupPinDirection+0x24>
    233c:	d1 c0       	rjmp	.+418    	; 0x24e0 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    233e:	89 81       	ldd	r24, Y+1	; 0x01
    2340:	28 2f       	mov	r18, r24
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	3d 83       	std	Y+5, r19	; 0x05
    2346:	2c 83       	std	Y+4, r18	; 0x04
    2348:	8c 81       	ldd	r24, Y+4	; 0x04
    234a:	9d 81       	ldd	r25, Y+5	; 0x05
    234c:	81 30       	cpi	r24, 0x01	; 1
    234e:	91 05       	cpc	r25, r1
    2350:	09 f4       	brne	.+2      	; 0x2354 <GPIO_setupPinDirection+0x3a>
    2352:	43 c0       	rjmp	.+134    	; 0x23da <GPIO_setupPinDirection+0xc0>
    2354:	2c 81       	ldd	r18, Y+4	; 0x04
    2356:	3d 81       	ldd	r19, Y+5	; 0x05
    2358:	22 30       	cpi	r18, 0x02	; 2
    235a:	31 05       	cpc	r19, r1
    235c:	2c f4       	brge	.+10     	; 0x2368 <GPIO_setupPinDirection+0x4e>
    235e:	8c 81       	ldd	r24, Y+4	; 0x04
    2360:	9d 81       	ldd	r25, Y+5	; 0x05
    2362:	00 97       	sbiw	r24, 0x00	; 0
    2364:	71 f0       	breq	.+28     	; 0x2382 <GPIO_setupPinDirection+0x68>
    2366:	bc c0       	rjmp	.+376    	; 0x24e0 <GPIO_setupPinDirection+0x1c6>
    2368:	2c 81       	ldd	r18, Y+4	; 0x04
    236a:	3d 81       	ldd	r19, Y+5	; 0x05
    236c:	22 30       	cpi	r18, 0x02	; 2
    236e:	31 05       	cpc	r19, r1
    2370:	09 f4       	brne	.+2      	; 0x2374 <GPIO_setupPinDirection+0x5a>
    2372:	5f c0       	rjmp	.+190    	; 0x2432 <GPIO_setupPinDirection+0x118>
    2374:	8c 81       	ldd	r24, Y+4	; 0x04
    2376:	9d 81       	ldd	r25, Y+5	; 0x05
    2378:	83 30       	cpi	r24, 0x03	; 3
    237a:	91 05       	cpc	r25, r1
    237c:	09 f4       	brne	.+2      	; 0x2380 <GPIO_setupPinDirection+0x66>
    237e:	85 c0       	rjmp	.+266    	; 0x248a <GPIO_setupPinDirection+0x170>
    2380:	af c0       	rjmp	.+350    	; 0x24e0 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    2382:	8b 81       	ldd	r24, Y+3	; 0x03
    2384:	81 30       	cpi	r24, 0x01	; 1
    2386:	a1 f4       	brne	.+40     	; 0x23b0 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    2388:	aa e3       	ldi	r26, 0x3A	; 58
    238a:	b0 e0       	ldi	r27, 0x00	; 0
    238c:	ea e3       	ldi	r30, 0x3A	; 58
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	80 81       	ld	r24, Z
    2392:	48 2f       	mov	r20, r24
    2394:	8a 81       	ldd	r24, Y+2	; 0x02
    2396:	28 2f       	mov	r18, r24
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	02 2e       	mov	r0, r18
    23a0:	02 c0       	rjmp	.+4      	; 0x23a6 <GPIO_setupPinDirection+0x8c>
    23a2:	88 0f       	add	r24, r24
    23a4:	99 1f       	adc	r25, r25
    23a6:	0a 94       	dec	r0
    23a8:	e2 f7       	brpl	.-8      	; 0x23a2 <GPIO_setupPinDirection+0x88>
    23aa:	84 2b       	or	r24, r20
    23ac:	8c 93       	st	X, r24
    23ae:	98 c0       	rjmp	.+304    	; 0x24e0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    23b0:	aa e3       	ldi	r26, 0x3A	; 58
    23b2:	b0 e0       	ldi	r27, 0x00	; 0
    23b4:	ea e3       	ldi	r30, 0x3A	; 58
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	80 81       	ld	r24, Z
    23ba:	48 2f       	mov	r20, r24
    23bc:	8a 81       	ldd	r24, Y+2	; 0x02
    23be:	28 2f       	mov	r18, r24
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	02 2e       	mov	r0, r18
    23c8:	02 c0       	rjmp	.+4      	; 0x23ce <GPIO_setupPinDirection+0xb4>
    23ca:	88 0f       	add	r24, r24
    23cc:	99 1f       	adc	r25, r25
    23ce:	0a 94       	dec	r0
    23d0:	e2 f7       	brpl	.-8      	; 0x23ca <GPIO_setupPinDirection+0xb0>
    23d2:	80 95       	com	r24
    23d4:	84 23       	and	r24, r20
    23d6:	8c 93       	st	X, r24
    23d8:	83 c0       	rjmp	.+262    	; 0x24e0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    23da:	8b 81       	ldd	r24, Y+3	; 0x03
    23dc:	81 30       	cpi	r24, 0x01	; 1
    23de:	a1 f4       	brne	.+40     	; 0x2408 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    23e0:	a7 e3       	ldi	r26, 0x37	; 55
    23e2:	b0 e0       	ldi	r27, 0x00	; 0
    23e4:	e7 e3       	ldi	r30, 0x37	; 55
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	80 81       	ld	r24, Z
    23ea:	48 2f       	mov	r20, r24
    23ec:	8a 81       	ldd	r24, Y+2	; 0x02
    23ee:	28 2f       	mov	r18, r24
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	02 2e       	mov	r0, r18
    23f8:	02 c0       	rjmp	.+4      	; 0x23fe <GPIO_setupPinDirection+0xe4>
    23fa:	88 0f       	add	r24, r24
    23fc:	99 1f       	adc	r25, r25
    23fe:	0a 94       	dec	r0
    2400:	e2 f7       	brpl	.-8      	; 0x23fa <GPIO_setupPinDirection+0xe0>
    2402:	84 2b       	or	r24, r20
    2404:	8c 93       	st	X, r24
    2406:	6c c0       	rjmp	.+216    	; 0x24e0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    2408:	a7 e3       	ldi	r26, 0x37	; 55
    240a:	b0 e0       	ldi	r27, 0x00	; 0
    240c:	e7 e3       	ldi	r30, 0x37	; 55
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	80 81       	ld	r24, Z
    2412:	48 2f       	mov	r20, r24
    2414:	8a 81       	ldd	r24, Y+2	; 0x02
    2416:	28 2f       	mov	r18, r24
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	02 2e       	mov	r0, r18
    2420:	02 c0       	rjmp	.+4      	; 0x2426 <GPIO_setupPinDirection+0x10c>
    2422:	88 0f       	add	r24, r24
    2424:	99 1f       	adc	r25, r25
    2426:	0a 94       	dec	r0
    2428:	e2 f7       	brpl	.-8      	; 0x2422 <GPIO_setupPinDirection+0x108>
    242a:	80 95       	com	r24
    242c:	84 23       	and	r24, r20
    242e:	8c 93       	st	X, r24
    2430:	57 c0       	rjmp	.+174    	; 0x24e0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    2432:	8b 81       	ldd	r24, Y+3	; 0x03
    2434:	81 30       	cpi	r24, 0x01	; 1
    2436:	a1 f4       	brne	.+40     	; 0x2460 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    2438:	a4 e3       	ldi	r26, 0x34	; 52
    243a:	b0 e0       	ldi	r27, 0x00	; 0
    243c:	e4 e3       	ldi	r30, 0x34	; 52
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	80 81       	ld	r24, Z
    2442:	48 2f       	mov	r20, r24
    2444:	8a 81       	ldd	r24, Y+2	; 0x02
    2446:	28 2f       	mov	r18, r24
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	02 2e       	mov	r0, r18
    2450:	02 c0       	rjmp	.+4      	; 0x2456 <GPIO_setupPinDirection+0x13c>
    2452:	88 0f       	add	r24, r24
    2454:	99 1f       	adc	r25, r25
    2456:	0a 94       	dec	r0
    2458:	e2 f7       	brpl	.-8      	; 0x2452 <GPIO_setupPinDirection+0x138>
    245a:	84 2b       	or	r24, r20
    245c:	8c 93       	st	X, r24
    245e:	40 c0       	rjmp	.+128    	; 0x24e0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    2460:	a4 e3       	ldi	r26, 0x34	; 52
    2462:	b0 e0       	ldi	r27, 0x00	; 0
    2464:	e4 e3       	ldi	r30, 0x34	; 52
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	80 81       	ld	r24, Z
    246a:	48 2f       	mov	r20, r24
    246c:	8a 81       	ldd	r24, Y+2	; 0x02
    246e:	28 2f       	mov	r18, r24
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	02 2e       	mov	r0, r18
    2478:	02 c0       	rjmp	.+4      	; 0x247e <GPIO_setupPinDirection+0x164>
    247a:	88 0f       	add	r24, r24
    247c:	99 1f       	adc	r25, r25
    247e:	0a 94       	dec	r0
    2480:	e2 f7       	brpl	.-8      	; 0x247a <GPIO_setupPinDirection+0x160>
    2482:	80 95       	com	r24
    2484:	84 23       	and	r24, r20
    2486:	8c 93       	st	X, r24
    2488:	2b c0       	rjmp	.+86     	; 0x24e0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    248a:	8b 81       	ldd	r24, Y+3	; 0x03
    248c:	81 30       	cpi	r24, 0x01	; 1
    248e:	a1 f4       	brne	.+40     	; 0x24b8 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    2490:	a1 e3       	ldi	r26, 0x31	; 49
    2492:	b0 e0       	ldi	r27, 0x00	; 0
    2494:	e1 e3       	ldi	r30, 0x31	; 49
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	80 81       	ld	r24, Z
    249a:	48 2f       	mov	r20, r24
    249c:	8a 81       	ldd	r24, Y+2	; 0x02
    249e:	28 2f       	mov	r18, r24
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	02 2e       	mov	r0, r18
    24a8:	02 c0       	rjmp	.+4      	; 0x24ae <GPIO_setupPinDirection+0x194>
    24aa:	88 0f       	add	r24, r24
    24ac:	99 1f       	adc	r25, r25
    24ae:	0a 94       	dec	r0
    24b0:	e2 f7       	brpl	.-8      	; 0x24aa <GPIO_setupPinDirection+0x190>
    24b2:	84 2b       	or	r24, r20
    24b4:	8c 93       	st	X, r24
    24b6:	14 c0       	rjmp	.+40     	; 0x24e0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    24b8:	a1 e3       	ldi	r26, 0x31	; 49
    24ba:	b0 e0       	ldi	r27, 0x00	; 0
    24bc:	e1 e3       	ldi	r30, 0x31	; 49
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	80 81       	ld	r24, Z
    24c2:	48 2f       	mov	r20, r24
    24c4:	8a 81       	ldd	r24, Y+2	; 0x02
    24c6:	28 2f       	mov	r18, r24
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	02 2e       	mov	r0, r18
    24d0:	02 c0       	rjmp	.+4      	; 0x24d6 <GPIO_setupPinDirection+0x1bc>
    24d2:	88 0f       	add	r24, r24
    24d4:	99 1f       	adc	r25, r25
    24d6:	0a 94       	dec	r0
    24d8:	e2 f7       	brpl	.-8      	; 0x24d2 <GPIO_setupPinDirection+0x1b8>
    24da:	80 95       	com	r24
    24dc:	84 23       	and	r24, r20
    24de:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    24e0:	0f 90       	pop	r0
    24e2:	0f 90       	pop	r0
    24e4:	0f 90       	pop	r0
    24e6:	0f 90       	pop	r0
    24e8:	0f 90       	pop	r0
    24ea:	cf 91       	pop	r28
    24ec:	df 91       	pop	r29
    24ee:	08 95       	ret

000024f0 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    24f0:	df 93       	push	r29
    24f2:	cf 93       	push	r28
    24f4:	00 d0       	rcall	.+0      	; 0x24f6 <GPIO_writePin+0x6>
    24f6:	00 d0       	rcall	.+0      	; 0x24f8 <GPIO_writePin+0x8>
    24f8:	0f 92       	push	r0
    24fa:	cd b7       	in	r28, 0x3d	; 61
    24fc:	de b7       	in	r29, 0x3e	; 62
    24fe:	89 83       	std	Y+1, r24	; 0x01
    2500:	6a 83       	std	Y+2, r22	; 0x02
    2502:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2504:	8a 81       	ldd	r24, Y+2	; 0x02
    2506:	88 30       	cpi	r24, 0x08	; 8
    2508:	08 f0       	brcs	.+2      	; 0x250c <GPIO_writePin+0x1c>
    250a:	d5 c0       	rjmp	.+426    	; 0x26b6 <GPIO_writePin+0x1c6>
    250c:	89 81       	ldd	r24, Y+1	; 0x01
    250e:	84 30       	cpi	r24, 0x04	; 4
    2510:	08 f0       	brcs	.+2      	; 0x2514 <GPIO_writePin+0x24>
    2512:	d1 c0       	rjmp	.+418    	; 0x26b6 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    2514:	89 81       	ldd	r24, Y+1	; 0x01
    2516:	28 2f       	mov	r18, r24
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	3d 83       	std	Y+5, r19	; 0x05
    251c:	2c 83       	std	Y+4, r18	; 0x04
    251e:	8c 81       	ldd	r24, Y+4	; 0x04
    2520:	9d 81       	ldd	r25, Y+5	; 0x05
    2522:	81 30       	cpi	r24, 0x01	; 1
    2524:	91 05       	cpc	r25, r1
    2526:	09 f4       	brne	.+2      	; 0x252a <GPIO_writePin+0x3a>
    2528:	43 c0       	rjmp	.+134    	; 0x25b0 <GPIO_writePin+0xc0>
    252a:	2c 81       	ldd	r18, Y+4	; 0x04
    252c:	3d 81       	ldd	r19, Y+5	; 0x05
    252e:	22 30       	cpi	r18, 0x02	; 2
    2530:	31 05       	cpc	r19, r1
    2532:	2c f4       	brge	.+10     	; 0x253e <GPIO_writePin+0x4e>
    2534:	8c 81       	ldd	r24, Y+4	; 0x04
    2536:	9d 81       	ldd	r25, Y+5	; 0x05
    2538:	00 97       	sbiw	r24, 0x00	; 0
    253a:	71 f0       	breq	.+28     	; 0x2558 <GPIO_writePin+0x68>
    253c:	bc c0       	rjmp	.+376    	; 0x26b6 <GPIO_writePin+0x1c6>
    253e:	2c 81       	ldd	r18, Y+4	; 0x04
    2540:	3d 81       	ldd	r19, Y+5	; 0x05
    2542:	22 30       	cpi	r18, 0x02	; 2
    2544:	31 05       	cpc	r19, r1
    2546:	09 f4       	brne	.+2      	; 0x254a <GPIO_writePin+0x5a>
    2548:	5f c0       	rjmp	.+190    	; 0x2608 <GPIO_writePin+0x118>
    254a:	8c 81       	ldd	r24, Y+4	; 0x04
    254c:	9d 81       	ldd	r25, Y+5	; 0x05
    254e:	83 30       	cpi	r24, 0x03	; 3
    2550:	91 05       	cpc	r25, r1
    2552:	09 f4       	brne	.+2      	; 0x2556 <GPIO_writePin+0x66>
    2554:	85 c0       	rjmp	.+266    	; 0x2660 <GPIO_writePin+0x170>
    2556:	af c0       	rjmp	.+350    	; 0x26b6 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    2558:	8b 81       	ldd	r24, Y+3	; 0x03
    255a:	81 30       	cpi	r24, 0x01	; 1
    255c:	a1 f4       	brne	.+40     	; 0x2586 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    255e:	ab e3       	ldi	r26, 0x3B	; 59
    2560:	b0 e0       	ldi	r27, 0x00	; 0
    2562:	eb e3       	ldi	r30, 0x3B	; 59
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	80 81       	ld	r24, Z
    2568:	48 2f       	mov	r20, r24
    256a:	8a 81       	ldd	r24, Y+2	; 0x02
    256c:	28 2f       	mov	r18, r24
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	02 2e       	mov	r0, r18
    2576:	02 c0       	rjmp	.+4      	; 0x257c <GPIO_writePin+0x8c>
    2578:	88 0f       	add	r24, r24
    257a:	99 1f       	adc	r25, r25
    257c:	0a 94       	dec	r0
    257e:	e2 f7       	brpl	.-8      	; 0x2578 <GPIO_writePin+0x88>
    2580:	84 2b       	or	r24, r20
    2582:	8c 93       	st	X, r24
    2584:	98 c0       	rjmp	.+304    	; 0x26b6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    2586:	ab e3       	ldi	r26, 0x3B	; 59
    2588:	b0 e0       	ldi	r27, 0x00	; 0
    258a:	eb e3       	ldi	r30, 0x3B	; 59
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	80 81       	ld	r24, Z
    2590:	48 2f       	mov	r20, r24
    2592:	8a 81       	ldd	r24, Y+2	; 0x02
    2594:	28 2f       	mov	r18, r24
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	02 2e       	mov	r0, r18
    259e:	02 c0       	rjmp	.+4      	; 0x25a4 <GPIO_writePin+0xb4>
    25a0:	88 0f       	add	r24, r24
    25a2:	99 1f       	adc	r25, r25
    25a4:	0a 94       	dec	r0
    25a6:	e2 f7       	brpl	.-8      	; 0x25a0 <GPIO_writePin+0xb0>
    25a8:	80 95       	com	r24
    25aa:	84 23       	and	r24, r20
    25ac:	8c 93       	st	X, r24
    25ae:	83 c0       	rjmp	.+262    	; 0x26b6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    25b0:	8b 81       	ldd	r24, Y+3	; 0x03
    25b2:	81 30       	cpi	r24, 0x01	; 1
    25b4:	a1 f4       	brne	.+40     	; 0x25de <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    25b6:	a8 e3       	ldi	r26, 0x38	; 56
    25b8:	b0 e0       	ldi	r27, 0x00	; 0
    25ba:	e8 e3       	ldi	r30, 0x38	; 56
    25bc:	f0 e0       	ldi	r31, 0x00	; 0
    25be:	80 81       	ld	r24, Z
    25c0:	48 2f       	mov	r20, r24
    25c2:	8a 81       	ldd	r24, Y+2	; 0x02
    25c4:	28 2f       	mov	r18, r24
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	02 2e       	mov	r0, r18
    25ce:	02 c0       	rjmp	.+4      	; 0x25d4 <GPIO_writePin+0xe4>
    25d0:	88 0f       	add	r24, r24
    25d2:	99 1f       	adc	r25, r25
    25d4:	0a 94       	dec	r0
    25d6:	e2 f7       	brpl	.-8      	; 0x25d0 <GPIO_writePin+0xe0>
    25d8:	84 2b       	or	r24, r20
    25da:	8c 93       	st	X, r24
    25dc:	6c c0       	rjmp	.+216    	; 0x26b6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    25de:	a8 e3       	ldi	r26, 0x38	; 56
    25e0:	b0 e0       	ldi	r27, 0x00	; 0
    25e2:	e8 e3       	ldi	r30, 0x38	; 56
    25e4:	f0 e0       	ldi	r31, 0x00	; 0
    25e6:	80 81       	ld	r24, Z
    25e8:	48 2f       	mov	r20, r24
    25ea:	8a 81       	ldd	r24, Y+2	; 0x02
    25ec:	28 2f       	mov	r18, r24
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	02 2e       	mov	r0, r18
    25f6:	02 c0       	rjmp	.+4      	; 0x25fc <GPIO_writePin+0x10c>
    25f8:	88 0f       	add	r24, r24
    25fa:	99 1f       	adc	r25, r25
    25fc:	0a 94       	dec	r0
    25fe:	e2 f7       	brpl	.-8      	; 0x25f8 <GPIO_writePin+0x108>
    2600:	80 95       	com	r24
    2602:	84 23       	and	r24, r20
    2604:	8c 93       	st	X, r24
    2606:	57 c0       	rjmp	.+174    	; 0x26b6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2608:	8b 81       	ldd	r24, Y+3	; 0x03
    260a:	81 30       	cpi	r24, 0x01	; 1
    260c:	a1 f4       	brne	.+40     	; 0x2636 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    260e:	a5 e3       	ldi	r26, 0x35	; 53
    2610:	b0 e0       	ldi	r27, 0x00	; 0
    2612:	e5 e3       	ldi	r30, 0x35	; 53
    2614:	f0 e0       	ldi	r31, 0x00	; 0
    2616:	80 81       	ld	r24, Z
    2618:	48 2f       	mov	r20, r24
    261a:	8a 81       	ldd	r24, Y+2	; 0x02
    261c:	28 2f       	mov	r18, r24
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	02 2e       	mov	r0, r18
    2626:	02 c0       	rjmp	.+4      	; 0x262c <GPIO_writePin+0x13c>
    2628:	88 0f       	add	r24, r24
    262a:	99 1f       	adc	r25, r25
    262c:	0a 94       	dec	r0
    262e:	e2 f7       	brpl	.-8      	; 0x2628 <GPIO_writePin+0x138>
    2630:	84 2b       	or	r24, r20
    2632:	8c 93       	st	X, r24
    2634:	40 c0       	rjmp	.+128    	; 0x26b6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2636:	a5 e3       	ldi	r26, 0x35	; 53
    2638:	b0 e0       	ldi	r27, 0x00	; 0
    263a:	e5 e3       	ldi	r30, 0x35	; 53
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	80 81       	ld	r24, Z
    2640:	48 2f       	mov	r20, r24
    2642:	8a 81       	ldd	r24, Y+2	; 0x02
    2644:	28 2f       	mov	r18, r24
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	02 2e       	mov	r0, r18
    264e:	02 c0       	rjmp	.+4      	; 0x2654 <GPIO_writePin+0x164>
    2650:	88 0f       	add	r24, r24
    2652:	99 1f       	adc	r25, r25
    2654:	0a 94       	dec	r0
    2656:	e2 f7       	brpl	.-8      	; 0x2650 <GPIO_writePin+0x160>
    2658:	80 95       	com	r24
    265a:	84 23       	and	r24, r20
    265c:	8c 93       	st	X, r24
    265e:	2b c0       	rjmp	.+86     	; 0x26b6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2660:	8b 81       	ldd	r24, Y+3	; 0x03
    2662:	81 30       	cpi	r24, 0x01	; 1
    2664:	a1 f4       	brne	.+40     	; 0x268e <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2666:	a2 e3       	ldi	r26, 0x32	; 50
    2668:	b0 e0       	ldi	r27, 0x00	; 0
    266a:	e2 e3       	ldi	r30, 0x32	; 50
    266c:	f0 e0       	ldi	r31, 0x00	; 0
    266e:	80 81       	ld	r24, Z
    2670:	48 2f       	mov	r20, r24
    2672:	8a 81       	ldd	r24, Y+2	; 0x02
    2674:	28 2f       	mov	r18, r24
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	02 2e       	mov	r0, r18
    267e:	02 c0       	rjmp	.+4      	; 0x2684 <GPIO_writePin+0x194>
    2680:	88 0f       	add	r24, r24
    2682:	99 1f       	adc	r25, r25
    2684:	0a 94       	dec	r0
    2686:	e2 f7       	brpl	.-8      	; 0x2680 <GPIO_writePin+0x190>
    2688:	84 2b       	or	r24, r20
    268a:	8c 93       	st	X, r24
    268c:	14 c0       	rjmp	.+40     	; 0x26b6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    268e:	a2 e3       	ldi	r26, 0x32	; 50
    2690:	b0 e0       	ldi	r27, 0x00	; 0
    2692:	e2 e3       	ldi	r30, 0x32	; 50
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	80 81       	ld	r24, Z
    2698:	48 2f       	mov	r20, r24
    269a:	8a 81       	ldd	r24, Y+2	; 0x02
    269c:	28 2f       	mov	r18, r24
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	02 2e       	mov	r0, r18
    26a6:	02 c0       	rjmp	.+4      	; 0x26ac <GPIO_writePin+0x1bc>
    26a8:	88 0f       	add	r24, r24
    26aa:	99 1f       	adc	r25, r25
    26ac:	0a 94       	dec	r0
    26ae:	e2 f7       	brpl	.-8      	; 0x26a8 <GPIO_writePin+0x1b8>
    26b0:	80 95       	com	r24
    26b2:	84 23       	and	r24, r20
    26b4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    26b6:	0f 90       	pop	r0
    26b8:	0f 90       	pop	r0
    26ba:	0f 90       	pop	r0
    26bc:	0f 90       	pop	r0
    26be:	0f 90       	pop	r0
    26c0:	cf 91       	pop	r28
    26c2:	df 91       	pop	r29
    26c4:	08 95       	ret

000026c6 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    26c6:	df 93       	push	r29
    26c8:	cf 93       	push	r28
    26ca:	00 d0       	rcall	.+0      	; 0x26cc <GPIO_readPin+0x6>
    26cc:	00 d0       	rcall	.+0      	; 0x26ce <GPIO_readPin+0x8>
    26ce:	0f 92       	push	r0
    26d0:	cd b7       	in	r28, 0x3d	; 61
    26d2:	de b7       	in	r29, 0x3e	; 62
    26d4:	8a 83       	std	Y+2, r24	; 0x02
    26d6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    26d8:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    26da:	8b 81       	ldd	r24, Y+3	; 0x03
    26dc:	88 30       	cpi	r24, 0x08	; 8
    26de:	08 f0       	brcs	.+2      	; 0x26e2 <GPIO_readPin+0x1c>
    26e0:	84 c0       	rjmp	.+264    	; 0x27ea <GPIO_readPin+0x124>
    26e2:	8a 81       	ldd	r24, Y+2	; 0x02
    26e4:	84 30       	cpi	r24, 0x04	; 4
    26e6:	08 f0       	brcs	.+2      	; 0x26ea <GPIO_readPin+0x24>
    26e8:	80 c0       	rjmp	.+256    	; 0x27ea <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    26ea:	8a 81       	ldd	r24, Y+2	; 0x02
    26ec:	28 2f       	mov	r18, r24
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	3d 83       	std	Y+5, r19	; 0x05
    26f2:	2c 83       	std	Y+4, r18	; 0x04
    26f4:	4c 81       	ldd	r20, Y+4	; 0x04
    26f6:	5d 81       	ldd	r21, Y+5	; 0x05
    26f8:	41 30       	cpi	r20, 0x01	; 1
    26fa:	51 05       	cpc	r21, r1
    26fc:	79 f1       	breq	.+94     	; 0x275c <GPIO_readPin+0x96>
    26fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2700:	9d 81       	ldd	r25, Y+5	; 0x05
    2702:	82 30       	cpi	r24, 0x02	; 2
    2704:	91 05       	cpc	r25, r1
    2706:	34 f4       	brge	.+12     	; 0x2714 <GPIO_readPin+0x4e>
    2708:	2c 81       	ldd	r18, Y+4	; 0x04
    270a:	3d 81       	ldd	r19, Y+5	; 0x05
    270c:	21 15       	cp	r18, r1
    270e:	31 05       	cpc	r19, r1
    2710:	69 f0       	breq	.+26     	; 0x272c <GPIO_readPin+0x66>
    2712:	6b c0       	rjmp	.+214    	; 0x27ea <GPIO_readPin+0x124>
    2714:	4c 81       	ldd	r20, Y+4	; 0x04
    2716:	5d 81       	ldd	r21, Y+5	; 0x05
    2718:	42 30       	cpi	r20, 0x02	; 2
    271a:	51 05       	cpc	r21, r1
    271c:	b9 f1       	breq	.+110    	; 0x278c <GPIO_readPin+0xc6>
    271e:	8c 81       	ldd	r24, Y+4	; 0x04
    2720:	9d 81       	ldd	r25, Y+5	; 0x05
    2722:	83 30       	cpi	r24, 0x03	; 3
    2724:	91 05       	cpc	r25, r1
    2726:	09 f4       	brne	.+2      	; 0x272a <GPIO_readPin+0x64>
    2728:	49 c0       	rjmp	.+146    	; 0x27bc <GPIO_readPin+0xf6>
    272a:	5f c0       	rjmp	.+190    	; 0x27ea <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    272c:	e9 e3       	ldi	r30, 0x39	; 57
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	80 81       	ld	r24, Z
    2732:	28 2f       	mov	r18, r24
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	8b 81       	ldd	r24, Y+3	; 0x03
    2738:	88 2f       	mov	r24, r24
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	a9 01       	movw	r20, r18
    273e:	02 c0       	rjmp	.+4      	; 0x2744 <GPIO_readPin+0x7e>
    2740:	55 95       	asr	r21
    2742:	47 95       	ror	r20
    2744:	8a 95       	dec	r24
    2746:	e2 f7       	brpl	.-8      	; 0x2740 <GPIO_readPin+0x7a>
    2748:	ca 01       	movw	r24, r20
    274a:	81 70       	andi	r24, 0x01	; 1
    274c:	90 70       	andi	r25, 0x00	; 0
    274e:	88 23       	and	r24, r24
    2750:	19 f0       	breq	.+6      	; 0x2758 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	89 83       	std	Y+1, r24	; 0x01
    2756:	49 c0       	rjmp	.+146    	; 0x27ea <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2758:	19 82       	std	Y+1, r1	; 0x01
    275a:	47 c0       	rjmp	.+142    	; 0x27ea <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    275c:	e6 e3       	ldi	r30, 0x36	; 54
    275e:	f0 e0       	ldi	r31, 0x00	; 0
    2760:	80 81       	ld	r24, Z
    2762:	28 2f       	mov	r18, r24
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	8b 81       	ldd	r24, Y+3	; 0x03
    2768:	88 2f       	mov	r24, r24
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	a9 01       	movw	r20, r18
    276e:	02 c0       	rjmp	.+4      	; 0x2774 <GPIO_readPin+0xae>
    2770:	55 95       	asr	r21
    2772:	47 95       	ror	r20
    2774:	8a 95       	dec	r24
    2776:	e2 f7       	brpl	.-8      	; 0x2770 <GPIO_readPin+0xaa>
    2778:	ca 01       	movw	r24, r20
    277a:	81 70       	andi	r24, 0x01	; 1
    277c:	90 70       	andi	r25, 0x00	; 0
    277e:	88 23       	and	r24, r24
    2780:	19 f0       	breq	.+6      	; 0x2788 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	89 83       	std	Y+1, r24	; 0x01
    2786:	31 c0       	rjmp	.+98     	; 0x27ea <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2788:	19 82       	std	Y+1, r1	; 0x01
    278a:	2f c0       	rjmp	.+94     	; 0x27ea <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    278c:	e3 e3       	ldi	r30, 0x33	; 51
    278e:	f0 e0       	ldi	r31, 0x00	; 0
    2790:	80 81       	ld	r24, Z
    2792:	28 2f       	mov	r18, r24
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	8b 81       	ldd	r24, Y+3	; 0x03
    2798:	88 2f       	mov	r24, r24
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	a9 01       	movw	r20, r18
    279e:	02 c0       	rjmp	.+4      	; 0x27a4 <GPIO_readPin+0xde>
    27a0:	55 95       	asr	r21
    27a2:	47 95       	ror	r20
    27a4:	8a 95       	dec	r24
    27a6:	e2 f7       	brpl	.-8      	; 0x27a0 <GPIO_readPin+0xda>
    27a8:	ca 01       	movw	r24, r20
    27aa:	81 70       	andi	r24, 0x01	; 1
    27ac:	90 70       	andi	r25, 0x00	; 0
    27ae:	88 23       	and	r24, r24
    27b0:	19 f0       	breq	.+6      	; 0x27b8 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    27b2:	81 e0       	ldi	r24, 0x01	; 1
    27b4:	89 83       	std	Y+1, r24	; 0x01
    27b6:	19 c0       	rjmp	.+50     	; 0x27ea <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    27b8:	19 82       	std	Y+1, r1	; 0x01
    27ba:	17 c0       	rjmp	.+46     	; 0x27ea <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    27bc:	e0 e3       	ldi	r30, 0x30	; 48
    27be:	f0 e0       	ldi	r31, 0x00	; 0
    27c0:	80 81       	ld	r24, Z
    27c2:	28 2f       	mov	r18, r24
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	8b 81       	ldd	r24, Y+3	; 0x03
    27c8:	88 2f       	mov	r24, r24
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	a9 01       	movw	r20, r18
    27ce:	02 c0       	rjmp	.+4      	; 0x27d4 <GPIO_readPin+0x10e>
    27d0:	55 95       	asr	r21
    27d2:	47 95       	ror	r20
    27d4:	8a 95       	dec	r24
    27d6:	e2 f7       	brpl	.-8      	; 0x27d0 <GPIO_readPin+0x10a>
    27d8:	ca 01       	movw	r24, r20
    27da:	81 70       	andi	r24, 0x01	; 1
    27dc:	90 70       	andi	r25, 0x00	; 0
    27de:	88 23       	and	r24, r24
    27e0:	19 f0       	breq	.+6      	; 0x27e8 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	89 83       	std	Y+1, r24	; 0x01
    27e6:	01 c0       	rjmp	.+2      	; 0x27ea <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    27e8:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    27ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    27ec:	0f 90       	pop	r0
    27ee:	0f 90       	pop	r0
    27f0:	0f 90       	pop	r0
    27f2:	0f 90       	pop	r0
    27f4:	0f 90       	pop	r0
    27f6:	cf 91       	pop	r28
    27f8:	df 91       	pop	r29
    27fa:	08 95       	ret

000027fc <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    27fc:	df 93       	push	r29
    27fe:	cf 93       	push	r28
    2800:	00 d0       	rcall	.+0      	; 0x2802 <GPIO_setupPortDirection+0x6>
    2802:	00 d0       	rcall	.+0      	; 0x2804 <GPIO_setupPortDirection+0x8>
    2804:	cd b7       	in	r28, 0x3d	; 61
    2806:	de b7       	in	r29, 0x3e	; 62
    2808:	89 83       	std	Y+1, r24	; 0x01
    280a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    280c:	89 81       	ldd	r24, Y+1	; 0x01
    280e:	84 30       	cpi	r24, 0x04	; 4
    2810:	90 f5       	brcc	.+100    	; 0x2876 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2812:	89 81       	ldd	r24, Y+1	; 0x01
    2814:	28 2f       	mov	r18, r24
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	3c 83       	std	Y+4, r19	; 0x04
    281a:	2b 83       	std	Y+3, r18	; 0x03
    281c:	8b 81       	ldd	r24, Y+3	; 0x03
    281e:	9c 81       	ldd	r25, Y+4	; 0x04
    2820:	81 30       	cpi	r24, 0x01	; 1
    2822:	91 05       	cpc	r25, r1
    2824:	d1 f0       	breq	.+52     	; 0x285a <GPIO_setupPortDirection+0x5e>
    2826:	2b 81       	ldd	r18, Y+3	; 0x03
    2828:	3c 81       	ldd	r19, Y+4	; 0x04
    282a:	22 30       	cpi	r18, 0x02	; 2
    282c:	31 05       	cpc	r19, r1
    282e:	2c f4       	brge	.+10     	; 0x283a <GPIO_setupPortDirection+0x3e>
    2830:	8b 81       	ldd	r24, Y+3	; 0x03
    2832:	9c 81       	ldd	r25, Y+4	; 0x04
    2834:	00 97       	sbiw	r24, 0x00	; 0
    2836:	61 f0       	breq	.+24     	; 0x2850 <GPIO_setupPortDirection+0x54>
    2838:	1e c0       	rjmp	.+60     	; 0x2876 <GPIO_setupPortDirection+0x7a>
    283a:	2b 81       	ldd	r18, Y+3	; 0x03
    283c:	3c 81       	ldd	r19, Y+4	; 0x04
    283e:	22 30       	cpi	r18, 0x02	; 2
    2840:	31 05       	cpc	r19, r1
    2842:	81 f0       	breq	.+32     	; 0x2864 <GPIO_setupPortDirection+0x68>
    2844:	8b 81       	ldd	r24, Y+3	; 0x03
    2846:	9c 81       	ldd	r25, Y+4	; 0x04
    2848:	83 30       	cpi	r24, 0x03	; 3
    284a:	91 05       	cpc	r25, r1
    284c:	81 f0       	breq	.+32     	; 0x286e <GPIO_setupPortDirection+0x72>
    284e:	13 c0       	rjmp	.+38     	; 0x2876 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2850:	ea e3       	ldi	r30, 0x3A	; 58
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	8a 81       	ldd	r24, Y+2	; 0x02
    2856:	80 83       	st	Z, r24
    2858:	0e c0       	rjmp	.+28     	; 0x2876 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    285a:	e7 e3       	ldi	r30, 0x37	; 55
    285c:	f0 e0       	ldi	r31, 0x00	; 0
    285e:	8a 81       	ldd	r24, Y+2	; 0x02
    2860:	80 83       	st	Z, r24
    2862:	09 c0       	rjmp	.+18     	; 0x2876 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2864:	e4 e3       	ldi	r30, 0x34	; 52
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	8a 81       	ldd	r24, Y+2	; 0x02
    286a:	80 83       	st	Z, r24
    286c:	04 c0       	rjmp	.+8      	; 0x2876 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    286e:	e1 e3       	ldi	r30, 0x31	; 49
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	8a 81       	ldd	r24, Y+2	; 0x02
    2874:	80 83       	st	Z, r24
			break;
		}
	}
}
    2876:	0f 90       	pop	r0
    2878:	0f 90       	pop	r0
    287a:	0f 90       	pop	r0
    287c:	0f 90       	pop	r0
    287e:	cf 91       	pop	r28
    2880:	df 91       	pop	r29
    2882:	08 95       	ret

00002884 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2884:	df 93       	push	r29
    2886:	cf 93       	push	r28
    2888:	00 d0       	rcall	.+0      	; 0x288a <GPIO_writePort+0x6>
    288a:	00 d0       	rcall	.+0      	; 0x288c <GPIO_writePort+0x8>
    288c:	cd b7       	in	r28, 0x3d	; 61
    288e:	de b7       	in	r29, 0x3e	; 62
    2890:	89 83       	std	Y+1, r24	; 0x01
    2892:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2894:	89 81       	ldd	r24, Y+1	; 0x01
    2896:	84 30       	cpi	r24, 0x04	; 4
    2898:	90 f5       	brcc	.+100    	; 0x28fe <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    289a:	89 81       	ldd	r24, Y+1	; 0x01
    289c:	28 2f       	mov	r18, r24
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	3c 83       	std	Y+4, r19	; 0x04
    28a2:	2b 83       	std	Y+3, r18	; 0x03
    28a4:	8b 81       	ldd	r24, Y+3	; 0x03
    28a6:	9c 81       	ldd	r25, Y+4	; 0x04
    28a8:	81 30       	cpi	r24, 0x01	; 1
    28aa:	91 05       	cpc	r25, r1
    28ac:	d1 f0       	breq	.+52     	; 0x28e2 <GPIO_writePort+0x5e>
    28ae:	2b 81       	ldd	r18, Y+3	; 0x03
    28b0:	3c 81       	ldd	r19, Y+4	; 0x04
    28b2:	22 30       	cpi	r18, 0x02	; 2
    28b4:	31 05       	cpc	r19, r1
    28b6:	2c f4       	brge	.+10     	; 0x28c2 <GPIO_writePort+0x3e>
    28b8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ba:	9c 81       	ldd	r25, Y+4	; 0x04
    28bc:	00 97       	sbiw	r24, 0x00	; 0
    28be:	61 f0       	breq	.+24     	; 0x28d8 <GPIO_writePort+0x54>
    28c0:	1e c0       	rjmp	.+60     	; 0x28fe <GPIO_writePort+0x7a>
    28c2:	2b 81       	ldd	r18, Y+3	; 0x03
    28c4:	3c 81       	ldd	r19, Y+4	; 0x04
    28c6:	22 30       	cpi	r18, 0x02	; 2
    28c8:	31 05       	cpc	r19, r1
    28ca:	81 f0       	breq	.+32     	; 0x28ec <GPIO_writePort+0x68>
    28cc:	8b 81       	ldd	r24, Y+3	; 0x03
    28ce:	9c 81       	ldd	r25, Y+4	; 0x04
    28d0:	83 30       	cpi	r24, 0x03	; 3
    28d2:	91 05       	cpc	r25, r1
    28d4:	81 f0       	breq	.+32     	; 0x28f6 <GPIO_writePort+0x72>
    28d6:	13 c0       	rjmp	.+38     	; 0x28fe <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    28d8:	eb e3       	ldi	r30, 0x3B	; 59
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	8a 81       	ldd	r24, Y+2	; 0x02
    28de:	80 83       	st	Z, r24
    28e0:	0e c0       	rjmp	.+28     	; 0x28fe <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    28e2:	e8 e3       	ldi	r30, 0x38	; 56
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	8a 81       	ldd	r24, Y+2	; 0x02
    28e8:	80 83       	st	Z, r24
    28ea:	09 c0       	rjmp	.+18     	; 0x28fe <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    28ec:	e5 e3       	ldi	r30, 0x35	; 53
    28ee:	f0 e0       	ldi	r31, 0x00	; 0
    28f0:	8a 81       	ldd	r24, Y+2	; 0x02
    28f2:	80 83       	st	Z, r24
    28f4:	04 c0       	rjmp	.+8      	; 0x28fe <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    28f6:	e2 e3       	ldi	r30, 0x32	; 50
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	8a 81       	ldd	r24, Y+2	; 0x02
    28fc:	80 83       	st	Z, r24
			break;
		}
	}
}
    28fe:	0f 90       	pop	r0
    2900:	0f 90       	pop	r0
    2902:	0f 90       	pop	r0
    2904:	0f 90       	pop	r0
    2906:	cf 91       	pop	r28
    2908:	df 91       	pop	r29
    290a:	08 95       	ret

0000290c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    290c:	df 93       	push	r29
    290e:	cf 93       	push	r28
    2910:	00 d0       	rcall	.+0      	; 0x2912 <GPIO_readPort+0x6>
    2912:	00 d0       	rcall	.+0      	; 0x2914 <GPIO_readPort+0x8>
    2914:	cd b7       	in	r28, 0x3d	; 61
    2916:	de b7       	in	r29, 0x3e	; 62
    2918:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    291a:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    291c:	8a 81       	ldd	r24, Y+2	; 0x02
    291e:	84 30       	cpi	r24, 0x04	; 4
    2920:	90 f5       	brcc	.+100    	; 0x2986 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2922:	8a 81       	ldd	r24, Y+2	; 0x02
    2924:	28 2f       	mov	r18, r24
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	3c 83       	std	Y+4, r19	; 0x04
    292a:	2b 83       	std	Y+3, r18	; 0x03
    292c:	8b 81       	ldd	r24, Y+3	; 0x03
    292e:	9c 81       	ldd	r25, Y+4	; 0x04
    2930:	81 30       	cpi	r24, 0x01	; 1
    2932:	91 05       	cpc	r25, r1
    2934:	d1 f0       	breq	.+52     	; 0x296a <GPIO_readPort+0x5e>
    2936:	2b 81       	ldd	r18, Y+3	; 0x03
    2938:	3c 81       	ldd	r19, Y+4	; 0x04
    293a:	22 30       	cpi	r18, 0x02	; 2
    293c:	31 05       	cpc	r19, r1
    293e:	2c f4       	brge	.+10     	; 0x294a <GPIO_readPort+0x3e>
    2940:	8b 81       	ldd	r24, Y+3	; 0x03
    2942:	9c 81       	ldd	r25, Y+4	; 0x04
    2944:	00 97       	sbiw	r24, 0x00	; 0
    2946:	61 f0       	breq	.+24     	; 0x2960 <GPIO_readPort+0x54>
    2948:	1e c0       	rjmp	.+60     	; 0x2986 <GPIO_readPort+0x7a>
    294a:	2b 81       	ldd	r18, Y+3	; 0x03
    294c:	3c 81       	ldd	r19, Y+4	; 0x04
    294e:	22 30       	cpi	r18, 0x02	; 2
    2950:	31 05       	cpc	r19, r1
    2952:	81 f0       	breq	.+32     	; 0x2974 <GPIO_readPort+0x68>
    2954:	8b 81       	ldd	r24, Y+3	; 0x03
    2956:	9c 81       	ldd	r25, Y+4	; 0x04
    2958:	83 30       	cpi	r24, 0x03	; 3
    295a:	91 05       	cpc	r25, r1
    295c:	81 f0       	breq	.+32     	; 0x297e <GPIO_readPort+0x72>
    295e:	13 c0       	rjmp	.+38     	; 0x2986 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2960:	e9 e3       	ldi	r30, 0x39	; 57
    2962:	f0 e0       	ldi	r31, 0x00	; 0
    2964:	80 81       	ld	r24, Z
    2966:	89 83       	std	Y+1, r24	; 0x01
    2968:	0e c0       	rjmp	.+28     	; 0x2986 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    296a:	e6 e3       	ldi	r30, 0x36	; 54
    296c:	f0 e0       	ldi	r31, 0x00	; 0
    296e:	80 81       	ld	r24, Z
    2970:	89 83       	std	Y+1, r24	; 0x01
    2972:	09 c0       	rjmp	.+18     	; 0x2986 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2974:	e3 e3       	ldi	r30, 0x33	; 51
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	80 81       	ld	r24, Z
    297a:	89 83       	std	Y+1, r24	; 0x01
    297c:	04 c0       	rjmp	.+8      	; 0x2986 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    297e:	e0 e3       	ldi	r30, 0x30	; 48
    2980:	f0 e0       	ldi	r31, 0x00	; 0
    2982:	80 81       	ld	r24, Z
    2984:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2986:	89 81       	ldd	r24, Y+1	; 0x01
}
    2988:	0f 90       	pop	r0
    298a:	0f 90       	pop	r0
    298c:	0f 90       	pop	r0
    298e:	0f 90       	pop	r0
    2990:	cf 91       	pop	r28
    2992:	df 91       	pop	r29
    2994:	08 95       	ret

00002996 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    2996:	df 93       	push	r29
    2998:	cf 93       	push	r28
    299a:	cd b7       	in	r28, 0x3d	; 61
    299c:	de b7       	in	r29, 0x3e	; 62
    299e:	60 97       	sbiw	r28, 0x10	; 16
    29a0:	0f b6       	in	r0, 0x3f	; 63
    29a2:	f8 94       	cli
    29a4:	de bf       	out	0x3e, r29	; 62
    29a6:	0f be       	out	0x3f, r0	; 63
    29a8:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    29aa:	80 e0       	ldi	r24, 0x00	; 0
    29ac:	60 e0       	ldi	r22, 0x00	; 0
    29ae:	40 e0       	ldi	r20, 0x00	; 0
    29b0:	0e 94 8d 11 	call	0x231a	; 0x231a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    29b4:	80 e0       	ldi	r24, 0x00	; 0
    29b6:	61 e0       	ldi	r22, 0x01	; 1
    29b8:	40 e0       	ldi	r20, 0x00	; 0
    29ba:	0e 94 8d 11 	call	0x231a	; 0x231a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    29be:	80 e0       	ldi	r24, 0x00	; 0
    29c0:	62 e0       	ldi	r22, 0x02	; 2
    29c2:	40 e0       	ldi	r20, 0x00	; 0
    29c4:	0e 94 8d 11 	call	0x231a	; 0x231a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    29c8:	80 e0       	ldi	r24, 0x00	; 0
    29ca:	63 e0       	ldi	r22, 0x03	; 3
    29cc:	40 e0       	ldi	r20, 0x00	; 0
    29ce:	0e 94 8d 11 	call	0x231a	; 0x231a <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    29d2:	80 e0       	ldi	r24, 0x00	; 0
    29d4:	64 e0       	ldi	r22, 0x04	; 4
    29d6:	40 e0       	ldi	r20, 0x00	; 0
    29d8:	0e 94 8d 11 	call	0x231a	; 0x231a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    29dc:	80 e0       	ldi	r24, 0x00	; 0
    29de:	65 e0       	ldi	r22, 0x05	; 5
    29e0:	40 e0       	ldi	r20, 0x00	; 0
    29e2:	0e 94 8d 11 	call	0x231a	; 0x231a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    29e6:	80 e0       	ldi	r24, 0x00	; 0
    29e8:	66 e0       	ldi	r22, 0x06	; 6
    29ea:	40 e0       	ldi	r20, 0x00	; 0
    29ec:	0e 94 8d 11 	call	0x231a	; 0x231a <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    29f0:	80 e0       	ldi	r24, 0x00	; 0
    29f2:	67 e0       	ldi	r22, 0x07	; 7
    29f4:	40 e0       	ldi	r20, 0x00	; 0
    29f6:	0e 94 8d 11 	call	0x231a	; 0x231a <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    29fa:	1f 86       	std	Y+15, r1	; 0x0f
    29fc:	ab c0       	rjmp	.+342    	; 0x2b54 <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    29fe:	80 e0       	ldi	r24, 0x00	; 0
    2a00:	6f 85       	ldd	r22, Y+15	; 0x0f
    2a02:	41 e0       	ldi	r20, 0x01	; 1
    2a04:	0e 94 8d 11 	call	0x231a	; 0x231a <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2a08:	80 e0       	ldi	r24, 0x00	; 0
    2a0a:	6f 85       	ldd	r22, Y+15	; 0x0f
    2a0c:	40 e0       	ldi	r20, 0x00	; 0
    2a0e:	0e 94 78 12 	call	0x24f0	; 0x24f0 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2a12:	18 8a       	std	Y+16, r1	; 0x10
    2a14:	22 c0       	rjmp	.+68     	; 0x2a5a <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    2a16:	88 89       	ldd	r24, Y+16	; 0x10
    2a18:	98 2f       	mov	r25, r24
    2a1a:	9c 5f       	subi	r25, 0xFC	; 252
    2a1c:	80 e0       	ldi	r24, 0x00	; 0
    2a1e:	69 2f       	mov	r22, r25
    2a20:	0e 94 63 13 	call	0x26c6	; 0x26c6 <GPIO_readPin>
    2a24:	88 23       	and	r24, r24
    2a26:	b1 f4       	brne	.+44     	; 0x2a54 <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2a28:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a2a:	88 2f       	mov	r24, r24
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	88 0f       	add	r24, r24
    2a30:	99 1f       	adc	r25, r25
    2a32:	88 0f       	add	r24, r24
    2a34:	99 1f       	adc	r25, r25
    2a36:	98 2f       	mov	r25, r24
    2a38:	88 89       	ldd	r24, Y+16	; 0x10
    2a3a:	89 0f       	add	r24, r25
    2a3c:	8f 5f       	subi	r24, 0xFF	; 255
    2a3e:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    2a42:	60 96       	adiw	r28, 0x10	; 16
    2a44:	0f b6       	in	r0, 0x3f	; 63
    2a46:	f8 94       	cli
    2a48:	de bf       	out	0x3e, r29	; 62
    2a4a:	0f be       	out	0x3f, r0	; 63
    2a4c:	cd bf       	out	0x3d, r28	; 61
    2a4e:	cf 91       	pop	r28
    2a50:	df 91       	pop	r29
    2a52:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2a54:	88 89       	ldd	r24, Y+16	; 0x10
    2a56:	8f 5f       	subi	r24, 0xFF	; 255
    2a58:	88 8b       	std	Y+16, r24	; 0x10
    2a5a:	88 89       	ldd	r24, Y+16	; 0x10
    2a5c:	84 30       	cpi	r24, 0x04	; 4
    2a5e:	d8 f2       	brcs	.-74     	; 0x2a16 <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    2a60:	80 e0       	ldi	r24, 0x00	; 0
    2a62:	6f 85       	ldd	r22, Y+15	; 0x0f
    2a64:	40 e0       	ldi	r20, 0x00	; 0
    2a66:	0e 94 8d 11 	call	0x231a	; 0x231a <GPIO_setupPinDirection>
    2a6a:	80 e0       	ldi	r24, 0x00	; 0
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	a0 ea       	ldi	r26, 0xA0	; 160
    2a70:	b0 e4       	ldi	r27, 0x40	; 64
    2a72:	8b 87       	std	Y+11, r24	; 0x0b
    2a74:	9c 87       	std	Y+12, r25	; 0x0c
    2a76:	ad 87       	std	Y+13, r26	; 0x0d
    2a78:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a80:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a82:	20 e0       	ldi	r18, 0x00	; 0
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	4a ef       	ldi	r20, 0xFA	; 250
    2a88:	54 e4       	ldi	r21, 0x44	; 68
    2a8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a8e:	dc 01       	movw	r26, r24
    2a90:	cb 01       	movw	r24, r22
    2a92:	8f 83       	std	Y+7, r24	; 0x07
    2a94:	98 87       	std	Y+8, r25	; 0x08
    2a96:	a9 87       	std	Y+9, r26	; 0x09
    2a98:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a9c:	78 85       	ldd	r23, Y+8	; 0x08
    2a9e:	89 85       	ldd	r24, Y+9	; 0x09
    2aa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	40 e8       	ldi	r20, 0x80	; 128
    2aa8:	5f e3       	ldi	r21, 0x3F	; 63
    2aaa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2aae:	88 23       	and	r24, r24
    2ab0:	2c f4       	brge	.+10     	; 0x2abc <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	9e 83       	std	Y+6, r25	; 0x06
    2ab8:	8d 83       	std	Y+5, r24	; 0x05
    2aba:	3f c0       	rjmp	.+126    	; 0x2b3a <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    2abc:	6f 81       	ldd	r22, Y+7	; 0x07
    2abe:	78 85       	ldd	r23, Y+8	; 0x08
    2ac0:	89 85       	ldd	r24, Y+9	; 0x09
    2ac2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	3f ef       	ldi	r19, 0xFF	; 255
    2ac8:	4f e7       	ldi	r20, 0x7F	; 127
    2aca:	57 e4       	ldi	r21, 0x47	; 71
    2acc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ad0:	18 16       	cp	r1, r24
    2ad2:	4c f5       	brge	.+82     	; 0x2b26 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ad4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ad6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ad8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ada:	9e 85       	ldd	r25, Y+14	; 0x0e
    2adc:	20 e0       	ldi	r18, 0x00	; 0
    2ade:	30 e0       	ldi	r19, 0x00	; 0
    2ae0:	40 e2       	ldi	r20, 0x20	; 32
    2ae2:	51 e4       	ldi	r21, 0x41	; 65
    2ae4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	bc 01       	movw	r22, r24
    2aee:	cd 01       	movw	r24, r26
    2af0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af4:	dc 01       	movw	r26, r24
    2af6:	cb 01       	movw	r24, r22
    2af8:	9e 83       	std	Y+6, r25	; 0x06
    2afa:	8d 83       	std	Y+5, r24	; 0x05
    2afc:	0f c0       	rjmp	.+30     	; 0x2b1c <KEYPAD_getPressedKey+0x186>
    2afe:	88 ec       	ldi	r24, 0xC8	; 200
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	9c 83       	std	Y+4, r25	; 0x04
    2b04:	8b 83       	std	Y+3, r24	; 0x03
    2b06:	8b 81       	ldd	r24, Y+3	; 0x03
    2b08:	9c 81       	ldd	r25, Y+4	; 0x04
    2b0a:	01 97       	sbiw	r24, 0x01	; 1
    2b0c:	f1 f7       	brne	.-4      	; 0x2b0a <KEYPAD_getPressedKey+0x174>
    2b0e:	9c 83       	std	Y+4, r25	; 0x04
    2b10:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b12:	8d 81       	ldd	r24, Y+5	; 0x05
    2b14:	9e 81       	ldd	r25, Y+6	; 0x06
    2b16:	01 97       	sbiw	r24, 0x01	; 1
    2b18:	9e 83       	std	Y+6, r25	; 0x06
    2b1a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b20:	00 97       	sbiw	r24, 0x00	; 0
    2b22:	69 f7       	brne	.-38     	; 0x2afe <KEYPAD_getPressedKey+0x168>
    2b24:	14 c0       	rjmp	.+40     	; 0x2b4e <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b26:	6f 81       	ldd	r22, Y+7	; 0x07
    2b28:	78 85       	ldd	r23, Y+8	; 0x08
    2b2a:	89 85       	ldd	r24, Y+9	; 0x09
    2b2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b32:	dc 01       	movw	r26, r24
    2b34:	cb 01       	movw	r24, r22
    2b36:	9e 83       	std	Y+6, r25	; 0x06
    2b38:	8d 83       	std	Y+5, r24	; 0x05
    2b3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b3e:	9a 83       	std	Y+2, r25	; 0x02
    2b40:	89 83       	std	Y+1, r24	; 0x01
    2b42:	89 81       	ldd	r24, Y+1	; 0x01
    2b44:	9a 81       	ldd	r25, Y+2	; 0x02
    2b46:	01 97       	sbiw	r24, 0x01	; 1
    2b48:	f1 f7       	brne	.-4      	; 0x2b46 <KEYPAD_getPressedKey+0x1b0>
    2b4a:	9a 83       	std	Y+2, r25	; 0x02
    2b4c:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2b4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b50:	8f 5f       	subi	r24, 0xFF	; 255
    2b52:	8f 87       	std	Y+15, r24	; 0x0f
    2b54:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b56:	84 30       	cpi	r24, 0x04	; 4
    2b58:	08 f4       	brcc	.+2      	; 0x2b5c <KEYPAD_getPressedKey+0x1c6>
    2b5a:	51 cf       	rjmp	.-350    	; 0x29fe <KEYPAD_getPressedKey+0x68>
    2b5c:	4e cf       	rjmp	.-356    	; 0x29fa <KEYPAD_getPressedKey+0x64>

00002b5e <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2b5e:	df 93       	push	r29
    2b60:	cf 93       	push	r28
    2b62:	00 d0       	rcall	.+0      	; 0x2b64 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2b64:	00 d0       	rcall	.+0      	; 0x2b66 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2b66:	cd b7       	in	r28, 0x3d	; 61
    2b68:	de b7       	in	r29, 0x3e	; 62
    2b6a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2b6c:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b70:	28 2f       	mov	r18, r24
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	3c 83       	std	Y+4, r19	; 0x04
    2b76:	2b 83       	std	Y+3, r18	; 0x03
    2b78:	8b 81       	ldd	r24, Y+3	; 0x03
    2b7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b7c:	88 30       	cpi	r24, 0x08	; 8
    2b7e:	91 05       	cpc	r25, r1
    2b80:	09 f4       	brne	.+2      	; 0x2b84 <KEYPAD_4x4_adjustKeyNumber+0x26>
    2b82:	70 c0       	rjmp	.+224    	; 0x2c64 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2b84:	2b 81       	ldd	r18, Y+3	; 0x03
    2b86:	3c 81       	ldd	r19, Y+4	; 0x04
    2b88:	29 30       	cpi	r18, 0x09	; 9
    2b8a:	31 05       	cpc	r19, r1
    2b8c:	5c f5       	brge	.+86     	; 0x2be4 <KEYPAD_4x4_adjustKeyNumber+0x86>
    2b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b90:	9c 81       	ldd	r25, Y+4	; 0x04
    2b92:	84 30       	cpi	r24, 0x04	; 4
    2b94:	91 05       	cpc	r25, r1
    2b96:	09 f4       	brne	.+2      	; 0x2b9a <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2b98:	59 c0       	rjmp	.+178    	; 0x2c4c <KEYPAD_4x4_adjustKeyNumber+0xee>
    2b9a:	2b 81       	ldd	r18, Y+3	; 0x03
    2b9c:	3c 81       	ldd	r19, Y+4	; 0x04
    2b9e:	25 30       	cpi	r18, 0x05	; 5
    2ba0:	31 05       	cpc	r19, r1
    2ba2:	9c f4       	brge	.+38     	; 0x2bca <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba8:	82 30       	cpi	r24, 0x02	; 2
    2baa:	91 05       	cpc	r25, r1
    2bac:	09 f4       	brne	.+2      	; 0x2bb0 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2bae:	48 c0       	rjmp	.+144    	; 0x2c40 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2bb0:	2b 81       	ldd	r18, Y+3	; 0x03
    2bb2:	3c 81       	ldd	r19, Y+4	; 0x04
    2bb4:	23 30       	cpi	r18, 0x03	; 3
    2bb6:	31 05       	cpc	r19, r1
    2bb8:	0c f0       	brlt	.+2      	; 0x2bbc <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2bba:	45 c0       	rjmp	.+138    	; 0x2c46 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bbe:	9c 81       	ldd	r25, Y+4	; 0x04
    2bc0:	81 30       	cpi	r24, 0x01	; 1
    2bc2:	91 05       	cpc	r25, r1
    2bc4:	09 f4       	brne	.+2      	; 0x2bc8 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2bc6:	39 c0       	rjmp	.+114    	; 0x2c3a <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2bc8:	67 c0       	rjmp	.+206    	; 0x2c98 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2bca:	2b 81       	ldd	r18, Y+3	; 0x03
    2bcc:	3c 81       	ldd	r19, Y+4	; 0x04
    2bce:	26 30       	cpi	r18, 0x06	; 6
    2bd0:	31 05       	cpc	r19, r1
    2bd2:	09 f4       	brne	.+2      	; 0x2bd6 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2bd4:	41 c0       	rjmp	.+130    	; 0x2c58 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd8:	9c 81       	ldd	r25, Y+4	; 0x04
    2bda:	87 30       	cpi	r24, 0x07	; 7
    2bdc:	91 05       	cpc	r25, r1
    2bde:	0c f0       	brlt	.+2      	; 0x2be2 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2be0:	3e c0       	rjmp	.+124    	; 0x2c5e <KEYPAD_4x4_adjustKeyNumber+0x100>
    2be2:	37 c0       	rjmp	.+110    	; 0x2c52 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2be4:	2b 81       	ldd	r18, Y+3	; 0x03
    2be6:	3c 81       	ldd	r19, Y+4	; 0x04
    2be8:	2c 30       	cpi	r18, 0x0C	; 12
    2bea:	31 05       	cpc	r19, r1
    2bec:	09 f4       	brne	.+2      	; 0x2bf0 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2bee:	46 c0       	rjmp	.+140    	; 0x2c7c <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf2:	9c 81       	ldd	r25, Y+4	; 0x04
    2bf4:	8d 30       	cpi	r24, 0x0D	; 13
    2bf6:	91 05       	cpc	r25, r1
    2bf8:	5c f4       	brge	.+22     	; 0x2c10 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2bfa:	2b 81       	ldd	r18, Y+3	; 0x03
    2bfc:	3c 81       	ldd	r19, Y+4	; 0x04
    2bfe:	2a 30       	cpi	r18, 0x0A	; 10
    2c00:	31 05       	cpc	r19, r1
    2c02:	b1 f1       	breq	.+108    	; 0x2c70 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2c04:	8b 81       	ldd	r24, Y+3	; 0x03
    2c06:	9c 81       	ldd	r25, Y+4	; 0x04
    2c08:	8b 30       	cpi	r24, 0x0B	; 11
    2c0a:	91 05       	cpc	r25, r1
    2c0c:	a4 f5       	brge	.+104    	; 0x2c76 <KEYPAD_4x4_adjustKeyNumber+0x118>
    2c0e:	2d c0       	rjmp	.+90     	; 0x2c6a <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2c10:	2b 81       	ldd	r18, Y+3	; 0x03
    2c12:	3c 81       	ldd	r19, Y+4	; 0x04
    2c14:	2e 30       	cpi	r18, 0x0E	; 14
    2c16:	31 05       	cpc	r19, r1
    2c18:	b9 f1       	breq	.+110    	; 0x2c88 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c1e:	8e 30       	cpi	r24, 0x0E	; 14
    2c20:	91 05       	cpc	r25, r1
    2c22:	7c f1       	brlt	.+94     	; 0x2c82 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2c24:	2b 81       	ldd	r18, Y+3	; 0x03
    2c26:	3c 81       	ldd	r19, Y+4	; 0x04
    2c28:	2f 30       	cpi	r18, 0x0F	; 15
    2c2a:	31 05       	cpc	r19, r1
    2c2c:	79 f1       	breq	.+94     	; 0x2c8c <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c30:	9c 81       	ldd	r25, Y+4	; 0x04
    2c32:	80 31       	cpi	r24, 0x10	; 16
    2c34:	91 05       	cpc	r25, r1
    2c36:	69 f1       	breq	.+90     	; 0x2c92 <KEYPAD_4x4_adjustKeyNumber+0x134>
    2c38:	2f c0       	rjmp	.+94     	; 0x2c98 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2c3a:	87 e0       	ldi	r24, 0x07	; 7
    2c3c:	89 83       	std	Y+1, r24	; 0x01
    2c3e:	2e c0       	rjmp	.+92     	; 0x2c9c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2c40:	88 e0       	ldi	r24, 0x08	; 8
    2c42:	89 83       	std	Y+1, r24	; 0x01
    2c44:	2b c0       	rjmp	.+86     	; 0x2c9c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2c46:	89 e0       	ldi	r24, 0x09	; 9
    2c48:	89 83       	std	Y+1, r24	; 0x01
    2c4a:	28 c0       	rjmp	.+80     	; 0x2c9c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '/'; // ASCII Code of %
    2c4c:	8f e2       	ldi	r24, 0x2F	; 47
    2c4e:	89 83       	std	Y+1, r24	; 0x01
    2c50:	25 c0       	rjmp	.+74     	; 0x2c9c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2c52:	84 e0       	ldi	r24, 0x04	; 4
    2c54:	89 83       	std	Y+1, r24	; 0x01
    2c56:	22 c0       	rjmp	.+68     	; 0x2c9c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2c58:	85 e0       	ldi	r24, 0x05	; 5
    2c5a:	89 83       	std	Y+1, r24	; 0x01
    2c5c:	1f c0       	rjmp	.+62     	; 0x2c9c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2c5e:	86 e0       	ldi	r24, 0x06	; 6
    2c60:	89 83       	std	Y+1, r24	; 0x01
    2c62:	1c c0       	rjmp	.+56     	; 0x2c9c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2c64:	8a e2       	ldi	r24, 0x2A	; 42
    2c66:	89 83       	std	Y+1, r24	; 0x01
    2c68:	19 c0       	rjmp	.+50     	; 0x2c9c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2c6a:	81 e0       	ldi	r24, 0x01	; 1
    2c6c:	89 83       	std	Y+1, r24	; 0x01
    2c6e:	16 c0       	rjmp	.+44     	; 0x2c9c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2c70:	82 e0       	ldi	r24, 0x02	; 2
    2c72:	89 83       	std	Y+1, r24	; 0x01
    2c74:	13 c0       	rjmp	.+38     	; 0x2c9c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2c76:	83 e0       	ldi	r24, 0x03	; 3
    2c78:	89 83       	std	Y+1, r24	; 0x01
    2c7a:	10 c0       	rjmp	.+32     	; 0x2c9c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2c7c:	8d e2       	ldi	r24, 0x2D	; 45
    2c7e:	89 83       	std	Y+1, r24	; 0x01
    2c80:	0d c0       	rjmp	.+26     	; 0x2c9c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2c82:	8d e0       	ldi	r24, 0x0D	; 13
    2c84:	89 83       	std	Y+1, r24	; 0x01
    2c86:	0a c0       	rjmp	.+20     	; 0x2c9c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2c88:	19 82       	std	Y+1, r1	; 0x01
    2c8a:	08 c0       	rjmp	.+16     	; 0x2c9c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2c8c:	8d e3       	ldi	r24, 0x3D	; 61
    2c8e:	89 83       	std	Y+1, r24	; 0x01
    2c90:	05 c0       	rjmp	.+10     	; 0x2c9c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2c92:	8b e2       	ldi	r24, 0x2B	; 43
    2c94:	89 83       	std	Y+1, r24	; 0x01
    2c96:	02 c0       	rjmp	.+4      	; 0x2c9c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2c98:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2c9c:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2c9e:	0f 90       	pop	r0
    2ca0:	0f 90       	pop	r0
    2ca2:	0f 90       	pop	r0
    2ca4:	0f 90       	pop	r0
    2ca6:	cf 91       	pop	r28
    2ca8:	df 91       	pop	r29
    2caa:	08 95       	ret

00002cac <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2cac:	df 93       	push	r29
    2cae:	cf 93       	push	r28
    2cb0:	cd b7       	in	r28, 0x3d	; 61
    2cb2:	de b7       	in	r29, 0x3e	; 62
    2cb4:	2e 97       	sbiw	r28, 0x0e	; 14
    2cb6:	0f b6       	in	r0, 0x3f	; 63
    2cb8:	f8 94       	cli
    2cba:	de bf       	out	0x3e, r29	; 62
    2cbc:	0f be       	out	0x3f, r0	; 63
    2cbe:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2cc0:	83 e0       	ldi	r24, 0x03	; 3
    2cc2:	62 e0       	ldi	r22, 0x02	; 2
    2cc4:	41 e0       	ldi	r20, 0x01	; 1
    2cc6:	0e 94 8d 11 	call	0x231a	; 0x231a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2cca:	83 e0       	ldi	r24, 0x03	; 3
    2ccc:	63 e0       	ldi	r22, 0x03	; 3
    2cce:	41 e0       	ldi	r20, 0x01	; 1
    2cd0:	0e 94 8d 11 	call	0x231a	; 0x231a <GPIO_setupPinDirection>
    2cd4:	80 e0       	ldi	r24, 0x00	; 0
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	a0 ea       	ldi	r26, 0xA0	; 160
    2cda:	b1 e4       	ldi	r27, 0x41	; 65
    2cdc:	8b 87       	std	Y+11, r24	; 0x0b
    2cde:	9c 87       	std	Y+12, r25	; 0x0c
    2ce0:	ad 87       	std	Y+13, r26	; 0x0d
    2ce2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ce4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ce6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ce8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cea:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	4a ef       	ldi	r20, 0xFA	; 250
    2cf2:	54 e4       	ldi	r21, 0x44	; 68
    2cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf8:	dc 01       	movw	r26, r24
    2cfa:	cb 01       	movw	r24, r22
    2cfc:	8f 83       	std	Y+7, r24	; 0x07
    2cfe:	98 87       	std	Y+8, r25	; 0x08
    2d00:	a9 87       	std	Y+9, r26	; 0x09
    2d02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d04:	6f 81       	ldd	r22, Y+7	; 0x07
    2d06:	78 85       	ldd	r23, Y+8	; 0x08
    2d08:	89 85       	ldd	r24, Y+9	; 0x09
    2d0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d0c:	20 e0       	ldi	r18, 0x00	; 0
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	40 e8       	ldi	r20, 0x80	; 128
    2d12:	5f e3       	ldi	r21, 0x3F	; 63
    2d14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d18:	88 23       	and	r24, r24
    2d1a:	2c f4       	brge	.+10     	; 0x2d26 <LCD_init+0x7a>
		__ticks = 1;
    2d1c:	81 e0       	ldi	r24, 0x01	; 1
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	9e 83       	std	Y+6, r25	; 0x06
    2d22:	8d 83       	std	Y+5, r24	; 0x05
    2d24:	3f c0       	rjmp	.+126    	; 0x2da4 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2d26:	6f 81       	ldd	r22, Y+7	; 0x07
    2d28:	78 85       	ldd	r23, Y+8	; 0x08
    2d2a:	89 85       	ldd	r24, Y+9	; 0x09
    2d2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d2e:	20 e0       	ldi	r18, 0x00	; 0
    2d30:	3f ef       	ldi	r19, 0xFF	; 255
    2d32:	4f e7       	ldi	r20, 0x7F	; 127
    2d34:	57 e4       	ldi	r21, 0x47	; 71
    2d36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d3a:	18 16       	cp	r1, r24
    2d3c:	4c f5       	brge	.+82     	; 0x2d90 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d40:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d42:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d44:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	40 e2       	ldi	r20, 0x20	; 32
    2d4c:	51 e4       	ldi	r21, 0x41	; 65
    2d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d52:	dc 01       	movw	r26, r24
    2d54:	cb 01       	movw	r24, r22
    2d56:	bc 01       	movw	r22, r24
    2d58:	cd 01       	movw	r24, r26
    2d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d5e:	dc 01       	movw	r26, r24
    2d60:	cb 01       	movw	r24, r22
    2d62:	9e 83       	std	Y+6, r25	; 0x06
    2d64:	8d 83       	std	Y+5, r24	; 0x05
    2d66:	0f c0       	rjmp	.+30     	; 0x2d86 <LCD_init+0xda>
    2d68:	88 ec       	ldi	r24, 0xC8	; 200
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	9c 83       	std	Y+4, r25	; 0x04
    2d6e:	8b 83       	std	Y+3, r24	; 0x03
    2d70:	8b 81       	ldd	r24, Y+3	; 0x03
    2d72:	9c 81       	ldd	r25, Y+4	; 0x04
    2d74:	01 97       	sbiw	r24, 0x01	; 1
    2d76:	f1 f7       	brne	.-4      	; 0x2d74 <LCD_init+0xc8>
    2d78:	9c 83       	std	Y+4, r25	; 0x04
    2d7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d80:	01 97       	sbiw	r24, 0x01	; 1
    2d82:	9e 83       	std	Y+6, r25	; 0x06
    2d84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d86:	8d 81       	ldd	r24, Y+5	; 0x05
    2d88:	9e 81       	ldd	r25, Y+6	; 0x06
    2d8a:	00 97       	sbiw	r24, 0x00	; 0
    2d8c:	69 f7       	brne	.-38     	; 0x2d68 <LCD_init+0xbc>
    2d8e:	14 c0       	rjmp	.+40     	; 0x2db8 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d90:	6f 81       	ldd	r22, Y+7	; 0x07
    2d92:	78 85       	ldd	r23, Y+8	; 0x08
    2d94:	89 85       	ldd	r24, Y+9	; 0x09
    2d96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d9c:	dc 01       	movw	r26, r24
    2d9e:	cb 01       	movw	r24, r22
    2da0:	9e 83       	std	Y+6, r25	; 0x06
    2da2:	8d 83       	std	Y+5, r24	; 0x05
    2da4:	8d 81       	ldd	r24, Y+5	; 0x05
    2da6:	9e 81       	ldd	r25, Y+6	; 0x06
    2da8:	9a 83       	std	Y+2, r25	; 0x02
    2daa:	89 83       	std	Y+1, r24	; 0x01
    2dac:	89 81       	ldd	r24, Y+1	; 0x01
    2dae:	9a 81       	ldd	r25, Y+2	; 0x02
    2db0:	01 97       	sbiw	r24, 0x01	; 1
    2db2:	f1 f7       	brne	.-4      	; 0x2db0 <LCD_init+0x104>
    2db4:	9a 83       	std	Y+2, r25	; 0x02
    2db6:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2db8:	81 e0       	ldi	r24, 0x01	; 1
    2dba:	6f ef       	ldi	r22, 0xFF	; 255
    2dbc:	0e 94 fe 13 	call	0x27fc	; 0x27fc <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2dc0:	88 e3       	ldi	r24, 0x38	; 56
    2dc2:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2dc6:	8c e0       	ldi	r24, 0x0C	; 12
    2dc8:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2dcc:	81 e0       	ldi	r24, 0x01	; 1
    2dce:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <LCD_sendCommand>
}
    2dd2:	2e 96       	adiw	r28, 0x0e	; 14
    2dd4:	0f b6       	in	r0, 0x3f	; 63
    2dd6:	f8 94       	cli
    2dd8:	de bf       	out	0x3e, r29	; 62
    2dda:	0f be       	out	0x3f, r0	; 63
    2ddc:	cd bf       	out	0x3d, r28	; 61
    2dde:	cf 91       	pop	r28
    2de0:	df 91       	pop	r29
    2de2:	08 95       	ret

00002de4 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2de4:	df 93       	push	r29
    2de6:	cf 93       	push	r28
    2de8:	cd b7       	in	r28, 0x3d	; 61
    2dea:	de b7       	in	r29, 0x3e	; 62
    2dec:	e9 97       	sbiw	r28, 0x39	; 57
    2dee:	0f b6       	in	r0, 0x3f	; 63
    2df0:	f8 94       	cli
    2df2:	de bf       	out	0x3e, r29	; 62
    2df4:	0f be       	out	0x3f, r0	; 63
    2df6:	cd bf       	out	0x3d, r28	; 61
    2df8:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2dfa:	83 e0       	ldi	r24, 0x03	; 3
    2dfc:	62 e0       	ldi	r22, 0x02	; 2
    2dfe:	40 e0       	ldi	r20, 0x00	; 0
    2e00:	0e 94 78 12 	call	0x24f0	; 0x24f0 <GPIO_writePin>
    2e04:	80 e0       	ldi	r24, 0x00	; 0
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	a0 e8       	ldi	r26, 0x80	; 128
    2e0a:	bf e3       	ldi	r27, 0x3F	; 63
    2e0c:	8d ab       	std	Y+53, r24	; 0x35
    2e0e:	9e ab       	std	Y+54, r25	; 0x36
    2e10:	af ab       	std	Y+55, r26	; 0x37
    2e12:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e14:	6d a9       	ldd	r22, Y+53	; 0x35
    2e16:	7e a9       	ldd	r23, Y+54	; 0x36
    2e18:	8f a9       	ldd	r24, Y+55	; 0x37
    2e1a:	98 ad       	ldd	r25, Y+56	; 0x38
    2e1c:	20 e0       	ldi	r18, 0x00	; 0
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	4a ef       	ldi	r20, 0xFA	; 250
    2e22:	54 e4       	ldi	r21, 0x44	; 68
    2e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e28:	dc 01       	movw	r26, r24
    2e2a:	cb 01       	movw	r24, r22
    2e2c:	89 ab       	std	Y+49, r24	; 0x31
    2e2e:	9a ab       	std	Y+50, r25	; 0x32
    2e30:	ab ab       	std	Y+51, r26	; 0x33
    2e32:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e34:	69 a9       	ldd	r22, Y+49	; 0x31
    2e36:	7a a9       	ldd	r23, Y+50	; 0x32
    2e38:	8b a9       	ldd	r24, Y+51	; 0x33
    2e3a:	9c a9       	ldd	r25, Y+52	; 0x34
    2e3c:	20 e0       	ldi	r18, 0x00	; 0
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	40 e8       	ldi	r20, 0x80	; 128
    2e42:	5f e3       	ldi	r21, 0x3F	; 63
    2e44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e48:	88 23       	and	r24, r24
    2e4a:	2c f4       	brge	.+10     	; 0x2e56 <LCD_sendCommand+0x72>
		__ticks = 1;
    2e4c:	81 e0       	ldi	r24, 0x01	; 1
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	98 ab       	std	Y+48, r25	; 0x30
    2e52:	8f a7       	std	Y+47, r24	; 0x2f
    2e54:	3f c0       	rjmp	.+126    	; 0x2ed4 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2e56:	69 a9       	ldd	r22, Y+49	; 0x31
    2e58:	7a a9       	ldd	r23, Y+50	; 0x32
    2e5a:	8b a9       	ldd	r24, Y+51	; 0x33
    2e5c:	9c a9       	ldd	r25, Y+52	; 0x34
    2e5e:	20 e0       	ldi	r18, 0x00	; 0
    2e60:	3f ef       	ldi	r19, 0xFF	; 255
    2e62:	4f e7       	ldi	r20, 0x7F	; 127
    2e64:	57 e4       	ldi	r21, 0x47	; 71
    2e66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e6a:	18 16       	cp	r1, r24
    2e6c:	4c f5       	brge	.+82     	; 0x2ec0 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e6e:	6d a9       	ldd	r22, Y+53	; 0x35
    2e70:	7e a9       	ldd	r23, Y+54	; 0x36
    2e72:	8f a9       	ldd	r24, Y+55	; 0x37
    2e74:	98 ad       	ldd	r25, Y+56	; 0x38
    2e76:	20 e0       	ldi	r18, 0x00	; 0
    2e78:	30 e0       	ldi	r19, 0x00	; 0
    2e7a:	40 e2       	ldi	r20, 0x20	; 32
    2e7c:	51 e4       	ldi	r21, 0x41	; 65
    2e7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e82:	dc 01       	movw	r26, r24
    2e84:	cb 01       	movw	r24, r22
    2e86:	bc 01       	movw	r22, r24
    2e88:	cd 01       	movw	r24, r26
    2e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e8e:	dc 01       	movw	r26, r24
    2e90:	cb 01       	movw	r24, r22
    2e92:	98 ab       	std	Y+48, r25	; 0x30
    2e94:	8f a7       	std	Y+47, r24	; 0x2f
    2e96:	0f c0       	rjmp	.+30     	; 0x2eb6 <LCD_sendCommand+0xd2>
    2e98:	88 ec       	ldi	r24, 0xC8	; 200
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	9e a7       	std	Y+46, r25	; 0x2e
    2e9e:	8d a7       	std	Y+45, r24	; 0x2d
    2ea0:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ea2:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ea4:	01 97       	sbiw	r24, 0x01	; 1
    2ea6:	f1 f7       	brne	.-4      	; 0x2ea4 <LCD_sendCommand+0xc0>
    2ea8:	9e a7       	std	Y+46, r25	; 0x2e
    2eaa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eac:	8f a5       	ldd	r24, Y+47	; 0x2f
    2eae:	98 a9       	ldd	r25, Y+48	; 0x30
    2eb0:	01 97       	sbiw	r24, 0x01	; 1
    2eb2:	98 ab       	std	Y+48, r25	; 0x30
    2eb4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eb6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2eb8:	98 a9       	ldd	r25, Y+48	; 0x30
    2eba:	00 97       	sbiw	r24, 0x00	; 0
    2ebc:	69 f7       	brne	.-38     	; 0x2e98 <LCD_sendCommand+0xb4>
    2ebe:	14 c0       	rjmp	.+40     	; 0x2ee8 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ec0:	69 a9       	ldd	r22, Y+49	; 0x31
    2ec2:	7a a9       	ldd	r23, Y+50	; 0x32
    2ec4:	8b a9       	ldd	r24, Y+51	; 0x33
    2ec6:	9c a9       	ldd	r25, Y+52	; 0x34
    2ec8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ecc:	dc 01       	movw	r26, r24
    2ece:	cb 01       	movw	r24, r22
    2ed0:	98 ab       	std	Y+48, r25	; 0x30
    2ed2:	8f a7       	std	Y+47, r24	; 0x2f
    2ed4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ed6:	98 a9       	ldd	r25, Y+48	; 0x30
    2ed8:	9c a7       	std	Y+44, r25	; 0x2c
    2eda:	8b a7       	std	Y+43, r24	; 0x2b
    2edc:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ede:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ee0:	01 97       	sbiw	r24, 0x01	; 1
    2ee2:	f1 f7       	brne	.-4      	; 0x2ee0 <LCD_sendCommand+0xfc>
    2ee4:	9c a7       	std	Y+44, r25	; 0x2c
    2ee6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2ee8:	83 e0       	ldi	r24, 0x03	; 3
    2eea:	63 e0       	ldi	r22, 0x03	; 3
    2eec:	41 e0       	ldi	r20, 0x01	; 1
    2eee:	0e 94 78 12 	call	0x24f0	; 0x24f0 <GPIO_writePin>
    2ef2:	80 e0       	ldi	r24, 0x00	; 0
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	a0 e8       	ldi	r26, 0x80	; 128
    2ef8:	bf e3       	ldi	r27, 0x3F	; 63
    2efa:	8f a3       	std	Y+39, r24	; 0x27
    2efc:	98 a7       	std	Y+40, r25	; 0x28
    2efe:	a9 a7       	std	Y+41, r26	; 0x29
    2f00:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f02:	6f a1       	ldd	r22, Y+39	; 0x27
    2f04:	78 a5       	ldd	r23, Y+40	; 0x28
    2f06:	89 a5       	ldd	r24, Y+41	; 0x29
    2f08:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f0a:	20 e0       	ldi	r18, 0x00	; 0
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	4a ef       	ldi	r20, 0xFA	; 250
    2f10:	54 e4       	ldi	r21, 0x44	; 68
    2f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f16:	dc 01       	movw	r26, r24
    2f18:	cb 01       	movw	r24, r22
    2f1a:	8b a3       	std	Y+35, r24	; 0x23
    2f1c:	9c a3       	std	Y+36, r25	; 0x24
    2f1e:	ad a3       	std	Y+37, r26	; 0x25
    2f20:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f22:	6b a1       	ldd	r22, Y+35	; 0x23
    2f24:	7c a1       	ldd	r23, Y+36	; 0x24
    2f26:	8d a1       	ldd	r24, Y+37	; 0x25
    2f28:	9e a1       	ldd	r25, Y+38	; 0x26
    2f2a:	20 e0       	ldi	r18, 0x00	; 0
    2f2c:	30 e0       	ldi	r19, 0x00	; 0
    2f2e:	40 e8       	ldi	r20, 0x80	; 128
    2f30:	5f e3       	ldi	r21, 0x3F	; 63
    2f32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f36:	88 23       	and	r24, r24
    2f38:	2c f4       	brge	.+10     	; 0x2f44 <LCD_sendCommand+0x160>
		__ticks = 1;
    2f3a:	81 e0       	ldi	r24, 0x01	; 1
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	9a a3       	std	Y+34, r25	; 0x22
    2f40:	89 a3       	std	Y+33, r24	; 0x21
    2f42:	3f c0       	rjmp	.+126    	; 0x2fc2 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2f44:	6b a1       	ldd	r22, Y+35	; 0x23
    2f46:	7c a1       	ldd	r23, Y+36	; 0x24
    2f48:	8d a1       	ldd	r24, Y+37	; 0x25
    2f4a:	9e a1       	ldd	r25, Y+38	; 0x26
    2f4c:	20 e0       	ldi	r18, 0x00	; 0
    2f4e:	3f ef       	ldi	r19, 0xFF	; 255
    2f50:	4f e7       	ldi	r20, 0x7F	; 127
    2f52:	57 e4       	ldi	r21, 0x47	; 71
    2f54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f58:	18 16       	cp	r1, r24
    2f5a:	4c f5       	brge	.+82     	; 0x2fae <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f5c:	6f a1       	ldd	r22, Y+39	; 0x27
    2f5e:	78 a5       	ldd	r23, Y+40	; 0x28
    2f60:	89 a5       	ldd	r24, Y+41	; 0x29
    2f62:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f64:	20 e0       	ldi	r18, 0x00	; 0
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	40 e2       	ldi	r20, 0x20	; 32
    2f6a:	51 e4       	ldi	r21, 0x41	; 65
    2f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f70:	dc 01       	movw	r26, r24
    2f72:	cb 01       	movw	r24, r22
    2f74:	bc 01       	movw	r22, r24
    2f76:	cd 01       	movw	r24, r26
    2f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f7c:	dc 01       	movw	r26, r24
    2f7e:	cb 01       	movw	r24, r22
    2f80:	9a a3       	std	Y+34, r25	; 0x22
    2f82:	89 a3       	std	Y+33, r24	; 0x21
    2f84:	0f c0       	rjmp	.+30     	; 0x2fa4 <LCD_sendCommand+0x1c0>
    2f86:	88 ec       	ldi	r24, 0xC8	; 200
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	98 a3       	std	Y+32, r25	; 0x20
    2f8c:	8f 8f       	std	Y+31, r24	; 0x1f
    2f8e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f90:	98 a1       	ldd	r25, Y+32	; 0x20
    2f92:	01 97       	sbiw	r24, 0x01	; 1
    2f94:	f1 f7       	brne	.-4      	; 0x2f92 <LCD_sendCommand+0x1ae>
    2f96:	98 a3       	std	Y+32, r25	; 0x20
    2f98:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f9a:	89 a1       	ldd	r24, Y+33	; 0x21
    2f9c:	9a a1       	ldd	r25, Y+34	; 0x22
    2f9e:	01 97       	sbiw	r24, 0x01	; 1
    2fa0:	9a a3       	std	Y+34, r25	; 0x22
    2fa2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fa4:	89 a1       	ldd	r24, Y+33	; 0x21
    2fa6:	9a a1       	ldd	r25, Y+34	; 0x22
    2fa8:	00 97       	sbiw	r24, 0x00	; 0
    2faa:	69 f7       	brne	.-38     	; 0x2f86 <LCD_sendCommand+0x1a2>
    2fac:	14 c0       	rjmp	.+40     	; 0x2fd6 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fae:	6b a1       	ldd	r22, Y+35	; 0x23
    2fb0:	7c a1       	ldd	r23, Y+36	; 0x24
    2fb2:	8d a1       	ldd	r24, Y+37	; 0x25
    2fb4:	9e a1       	ldd	r25, Y+38	; 0x26
    2fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fba:	dc 01       	movw	r26, r24
    2fbc:	cb 01       	movw	r24, r22
    2fbe:	9a a3       	std	Y+34, r25	; 0x22
    2fc0:	89 a3       	std	Y+33, r24	; 0x21
    2fc2:	89 a1       	ldd	r24, Y+33	; 0x21
    2fc4:	9a a1       	ldd	r25, Y+34	; 0x22
    2fc6:	9e 8f       	std	Y+30, r25	; 0x1e
    2fc8:	8d 8f       	std	Y+29, r24	; 0x1d
    2fca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fcc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2fce:	01 97       	sbiw	r24, 0x01	; 1
    2fd0:	f1 f7       	brne	.-4      	; 0x2fce <LCD_sendCommand+0x1ea>
    2fd2:	9e 8f       	std	Y+30, r25	; 0x1e
    2fd4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2fd6:	81 e0       	ldi	r24, 0x01	; 1
    2fd8:	69 ad       	ldd	r22, Y+57	; 0x39
    2fda:	0e 94 42 14 	call	0x2884	; 0x2884 <GPIO_writePort>
    2fde:	80 e0       	ldi	r24, 0x00	; 0
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	a0 e8       	ldi	r26, 0x80	; 128
    2fe4:	bf e3       	ldi	r27, 0x3F	; 63
    2fe6:	89 8f       	std	Y+25, r24	; 0x19
    2fe8:	9a 8f       	std	Y+26, r25	; 0x1a
    2fea:	ab 8f       	std	Y+27, r26	; 0x1b
    2fec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fee:	69 8d       	ldd	r22, Y+25	; 0x19
    2ff0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ff2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ff4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ff6:	20 e0       	ldi	r18, 0x00	; 0
    2ff8:	30 e0       	ldi	r19, 0x00	; 0
    2ffa:	4a ef       	ldi	r20, 0xFA	; 250
    2ffc:	54 e4       	ldi	r21, 0x44	; 68
    2ffe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3002:	dc 01       	movw	r26, r24
    3004:	cb 01       	movw	r24, r22
    3006:	8d 8b       	std	Y+21, r24	; 0x15
    3008:	9e 8b       	std	Y+22, r25	; 0x16
    300a:	af 8b       	std	Y+23, r26	; 0x17
    300c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    300e:	6d 89       	ldd	r22, Y+21	; 0x15
    3010:	7e 89       	ldd	r23, Y+22	; 0x16
    3012:	8f 89       	ldd	r24, Y+23	; 0x17
    3014:	98 8d       	ldd	r25, Y+24	; 0x18
    3016:	20 e0       	ldi	r18, 0x00	; 0
    3018:	30 e0       	ldi	r19, 0x00	; 0
    301a:	40 e8       	ldi	r20, 0x80	; 128
    301c:	5f e3       	ldi	r21, 0x3F	; 63
    301e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3022:	88 23       	and	r24, r24
    3024:	2c f4       	brge	.+10     	; 0x3030 <LCD_sendCommand+0x24c>
		__ticks = 1;
    3026:	81 e0       	ldi	r24, 0x01	; 1
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	9c 8b       	std	Y+20, r25	; 0x14
    302c:	8b 8b       	std	Y+19, r24	; 0x13
    302e:	3f c0       	rjmp	.+126    	; 0x30ae <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    3030:	6d 89       	ldd	r22, Y+21	; 0x15
    3032:	7e 89       	ldd	r23, Y+22	; 0x16
    3034:	8f 89       	ldd	r24, Y+23	; 0x17
    3036:	98 8d       	ldd	r25, Y+24	; 0x18
    3038:	20 e0       	ldi	r18, 0x00	; 0
    303a:	3f ef       	ldi	r19, 0xFF	; 255
    303c:	4f e7       	ldi	r20, 0x7F	; 127
    303e:	57 e4       	ldi	r21, 0x47	; 71
    3040:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3044:	18 16       	cp	r1, r24
    3046:	4c f5       	brge	.+82     	; 0x309a <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3048:	69 8d       	ldd	r22, Y+25	; 0x19
    304a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    304c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    304e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	40 e2       	ldi	r20, 0x20	; 32
    3056:	51 e4       	ldi	r21, 0x41	; 65
    3058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    305c:	dc 01       	movw	r26, r24
    305e:	cb 01       	movw	r24, r22
    3060:	bc 01       	movw	r22, r24
    3062:	cd 01       	movw	r24, r26
    3064:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3068:	dc 01       	movw	r26, r24
    306a:	cb 01       	movw	r24, r22
    306c:	9c 8b       	std	Y+20, r25	; 0x14
    306e:	8b 8b       	std	Y+19, r24	; 0x13
    3070:	0f c0       	rjmp	.+30     	; 0x3090 <LCD_sendCommand+0x2ac>
    3072:	88 ec       	ldi	r24, 0xC8	; 200
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	9a 8b       	std	Y+18, r25	; 0x12
    3078:	89 8b       	std	Y+17, r24	; 0x11
    307a:	89 89       	ldd	r24, Y+17	; 0x11
    307c:	9a 89       	ldd	r25, Y+18	; 0x12
    307e:	01 97       	sbiw	r24, 0x01	; 1
    3080:	f1 f7       	brne	.-4      	; 0x307e <LCD_sendCommand+0x29a>
    3082:	9a 8b       	std	Y+18, r25	; 0x12
    3084:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3086:	8b 89       	ldd	r24, Y+19	; 0x13
    3088:	9c 89       	ldd	r25, Y+20	; 0x14
    308a:	01 97       	sbiw	r24, 0x01	; 1
    308c:	9c 8b       	std	Y+20, r25	; 0x14
    308e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3090:	8b 89       	ldd	r24, Y+19	; 0x13
    3092:	9c 89       	ldd	r25, Y+20	; 0x14
    3094:	00 97       	sbiw	r24, 0x00	; 0
    3096:	69 f7       	brne	.-38     	; 0x3072 <LCD_sendCommand+0x28e>
    3098:	14 c0       	rjmp	.+40     	; 0x30c2 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    309a:	6d 89       	ldd	r22, Y+21	; 0x15
    309c:	7e 89       	ldd	r23, Y+22	; 0x16
    309e:	8f 89       	ldd	r24, Y+23	; 0x17
    30a0:	98 8d       	ldd	r25, Y+24	; 0x18
    30a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30a6:	dc 01       	movw	r26, r24
    30a8:	cb 01       	movw	r24, r22
    30aa:	9c 8b       	std	Y+20, r25	; 0x14
    30ac:	8b 8b       	std	Y+19, r24	; 0x13
    30ae:	8b 89       	ldd	r24, Y+19	; 0x13
    30b0:	9c 89       	ldd	r25, Y+20	; 0x14
    30b2:	98 8b       	std	Y+16, r25	; 0x10
    30b4:	8f 87       	std	Y+15, r24	; 0x0f
    30b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    30b8:	98 89       	ldd	r25, Y+16	; 0x10
    30ba:	01 97       	sbiw	r24, 0x01	; 1
    30bc:	f1 f7       	brne	.-4      	; 0x30ba <LCD_sendCommand+0x2d6>
    30be:	98 8b       	std	Y+16, r25	; 0x10
    30c0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    30c2:	83 e0       	ldi	r24, 0x03	; 3
    30c4:	63 e0       	ldi	r22, 0x03	; 3
    30c6:	40 e0       	ldi	r20, 0x00	; 0
    30c8:	0e 94 78 12 	call	0x24f0	; 0x24f0 <GPIO_writePin>
    30cc:	80 e0       	ldi	r24, 0x00	; 0
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	a0 e8       	ldi	r26, 0x80	; 128
    30d2:	bf e3       	ldi	r27, 0x3F	; 63
    30d4:	8b 87       	std	Y+11, r24	; 0x0b
    30d6:	9c 87       	std	Y+12, r25	; 0x0c
    30d8:	ad 87       	std	Y+13, r26	; 0x0d
    30da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    30de:	7c 85       	ldd	r23, Y+12	; 0x0c
    30e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    30e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    30e4:	20 e0       	ldi	r18, 0x00	; 0
    30e6:	30 e0       	ldi	r19, 0x00	; 0
    30e8:	4a ef       	ldi	r20, 0xFA	; 250
    30ea:	54 e4       	ldi	r21, 0x44	; 68
    30ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f0:	dc 01       	movw	r26, r24
    30f2:	cb 01       	movw	r24, r22
    30f4:	8f 83       	std	Y+7, r24	; 0x07
    30f6:	98 87       	std	Y+8, r25	; 0x08
    30f8:	a9 87       	std	Y+9, r26	; 0x09
    30fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30fc:	6f 81       	ldd	r22, Y+7	; 0x07
    30fe:	78 85       	ldd	r23, Y+8	; 0x08
    3100:	89 85       	ldd	r24, Y+9	; 0x09
    3102:	9a 85       	ldd	r25, Y+10	; 0x0a
    3104:	20 e0       	ldi	r18, 0x00	; 0
    3106:	30 e0       	ldi	r19, 0x00	; 0
    3108:	40 e8       	ldi	r20, 0x80	; 128
    310a:	5f e3       	ldi	r21, 0x3F	; 63
    310c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3110:	88 23       	and	r24, r24
    3112:	2c f4       	brge	.+10     	; 0x311e <LCD_sendCommand+0x33a>
		__ticks = 1;
    3114:	81 e0       	ldi	r24, 0x01	; 1
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	9e 83       	std	Y+6, r25	; 0x06
    311a:	8d 83       	std	Y+5, r24	; 0x05
    311c:	3f c0       	rjmp	.+126    	; 0x319c <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    311e:	6f 81       	ldd	r22, Y+7	; 0x07
    3120:	78 85       	ldd	r23, Y+8	; 0x08
    3122:	89 85       	ldd	r24, Y+9	; 0x09
    3124:	9a 85       	ldd	r25, Y+10	; 0x0a
    3126:	20 e0       	ldi	r18, 0x00	; 0
    3128:	3f ef       	ldi	r19, 0xFF	; 255
    312a:	4f e7       	ldi	r20, 0x7F	; 127
    312c:	57 e4       	ldi	r21, 0x47	; 71
    312e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3132:	18 16       	cp	r1, r24
    3134:	4c f5       	brge	.+82     	; 0x3188 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3136:	6b 85       	ldd	r22, Y+11	; 0x0b
    3138:	7c 85       	ldd	r23, Y+12	; 0x0c
    313a:	8d 85       	ldd	r24, Y+13	; 0x0d
    313c:	9e 85       	ldd	r25, Y+14	; 0x0e
    313e:	20 e0       	ldi	r18, 0x00	; 0
    3140:	30 e0       	ldi	r19, 0x00	; 0
    3142:	40 e2       	ldi	r20, 0x20	; 32
    3144:	51 e4       	ldi	r21, 0x41	; 65
    3146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    314a:	dc 01       	movw	r26, r24
    314c:	cb 01       	movw	r24, r22
    314e:	bc 01       	movw	r22, r24
    3150:	cd 01       	movw	r24, r26
    3152:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3156:	dc 01       	movw	r26, r24
    3158:	cb 01       	movw	r24, r22
    315a:	9e 83       	std	Y+6, r25	; 0x06
    315c:	8d 83       	std	Y+5, r24	; 0x05
    315e:	0f c0       	rjmp	.+30     	; 0x317e <LCD_sendCommand+0x39a>
    3160:	88 ec       	ldi	r24, 0xC8	; 200
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	9c 83       	std	Y+4, r25	; 0x04
    3166:	8b 83       	std	Y+3, r24	; 0x03
    3168:	8b 81       	ldd	r24, Y+3	; 0x03
    316a:	9c 81       	ldd	r25, Y+4	; 0x04
    316c:	01 97       	sbiw	r24, 0x01	; 1
    316e:	f1 f7       	brne	.-4      	; 0x316c <LCD_sendCommand+0x388>
    3170:	9c 83       	std	Y+4, r25	; 0x04
    3172:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3174:	8d 81       	ldd	r24, Y+5	; 0x05
    3176:	9e 81       	ldd	r25, Y+6	; 0x06
    3178:	01 97       	sbiw	r24, 0x01	; 1
    317a:	9e 83       	std	Y+6, r25	; 0x06
    317c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    317e:	8d 81       	ldd	r24, Y+5	; 0x05
    3180:	9e 81       	ldd	r25, Y+6	; 0x06
    3182:	00 97       	sbiw	r24, 0x00	; 0
    3184:	69 f7       	brne	.-38     	; 0x3160 <LCD_sendCommand+0x37c>
    3186:	14 c0       	rjmp	.+40     	; 0x31b0 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3188:	6f 81       	ldd	r22, Y+7	; 0x07
    318a:	78 85       	ldd	r23, Y+8	; 0x08
    318c:	89 85       	ldd	r24, Y+9	; 0x09
    318e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3194:	dc 01       	movw	r26, r24
    3196:	cb 01       	movw	r24, r22
    3198:	9e 83       	std	Y+6, r25	; 0x06
    319a:	8d 83       	std	Y+5, r24	; 0x05
    319c:	8d 81       	ldd	r24, Y+5	; 0x05
    319e:	9e 81       	ldd	r25, Y+6	; 0x06
    31a0:	9a 83       	std	Y+2, r25	; 0x02
    31a2:	89 83       	std	Y+1, r24	; 0x01
    31a4:	89 81       	ldd	r24, Y+1	; 0x01
    31a6:	9a 81       	ldd	r25, Y+2	; 0x02
    31a8:	01 97       	sbiw	r24, 0x01	; 1
    31aa:	f1 f7       	brne	.-4      	; 0x31a8 <LCD_sendCommand+0x3c4>
    31ac:	9a 83       	std	Y+2, r25	; 0x02
    31ae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    31b0:	e9 96       	adiw	r28, 0x39	; 57
    31b2:	0f b6       	in	r0, 0x3f	; 63
    31b4:	f8 94       	cli
    31b6:	de bf       	out	0x3e, r29	; 62
    31b8:	0f be       	out	0x3f, r0	; 63
    31ba:	cd bf       	out	0x3d, r28	; 61
    31bc:	cf 91       	pop	r28
    31be:	df 91       	pop	r29
    31c0:	08 95       	ret

000031c2 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    31c2:	df 93       	push	r29
    31c4:	cf 93       	push	r28
    31c6:	cd b7       	in	r28, 0x3d	; 61
    31c8:	de b7       	in	r29, 0x3e	; 62
    31ca:	e9 97       	sbiw	r28, 0x39	; 57
    31cc:	0f b6       	in	r0, 0x3f	; 63
    31ce:	f8 94       	cli
    31d0:	de bf       	out	0x3e, r29	; 62
    31d2:	0f be       	out	0x3f, r0	; 63
    31d4:	cd bf       	out	0x3d, r28	; 61
    31d6:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    31d8:	83 e0       	ldi	r24, 0x03	; 3
    31da:	62 e0       	ldi	r22, 0x02	; 2
    31dc:	41 e0       	ldi	r20, 0x01	; 1
    31de:	0e 94 78 12 	call	0x24f0	; 0x24f0 <GPIO_writePin>
    31e2:	80 e0       	ldi	r24, 0x00	; 0
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	a0 e8       	ldi	r26, 0x80	; 128
    31e8:	bf e3       	ldi	r27, 0x3F	; 63
    31ea:	8d ab       	std	Y+53, r24	; 0x35
    31ec:	9e ab       	std	Y+54, r25	; 0x36
    31ee:	af ab       	std	Y+55, r26	; 0x37
    31f0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31f2:	6d a9       	ldd	r22, Y+53	; 0x35
    31f4:	7e a9       	ldd	r23, Y+54	; 0x36
    31f6:	8f a9       	ldd	r24, Y+55	; 0x37
    31f8:	98 ad       	ldd	r25, Y+56	; 0x38
    31fa:	20 e0       	ldi	r18, 0x00	; 0
    31fc:	30 e0       	ldi	r19, 0x00	; 0
    31fe:	4a ef       	ldi	r20, 0xFA	; 250
    3200:	54 e4       	ldi	r21, 0x44	; 68
    3202:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3206:	dc 01       	movw	r26, r24
    3208:	cb 01       	movw	r24, r22
    320a:	89 ab       	std	Y+49, r24	; 0x31
    320c:	9a ab       	std	Y+50, r25	; 0x32
    320e:	ab ab       	std	Y+51, r26	; 0x33
    3210:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3212:	69 a9       	ldd	r22, Y+49	; 0x31
    3214:	7a a9       	ldd	r23, Y+50	; 0x32
    3216:	8b a9       	ldd	r24, Y+51	; 0x33
    3218:	9c a9       	ldd	r25, Y+52	; 0x34
    321a:	20 e0       	ldi	r18, 0x00	; 0
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	40 e8       	ldi	r20, 0x80	; 128
    3220:	5f e3       	ldi	r21, 0x3F	; 63
    3222:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3226:	88 23       	and	r24, r24
    3228:	2c f4       	brge	.+10     	; 0x3234 <LCD_displayCharacter+0x72>
		__ticks = 1;
    322a:	81 e0       	ldi	r24, 0x01	; 1
    322c:	90 e0       	ldi	r25, 0x00	; 0
    322e:	98 ab       	std	Y+48, r25	; 0x30
    3230:	8f a7       	std	Y+47, r24	; 0x2f
    3232:	3f c0       	rjmp	.+126    	; 0x32b2 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    3234:	69 a9       	ldd	r22, Y+49	; 0x31
    3236:	7a a9       	ldd	r23, Y+50	; 0x32
    3238:	8b a9       	ldd	r24, Y+51	; 0x33
    323a:	9c a9       	ldd	r25, Y+52	; 0x34
    323c:	20 e0       	ldi	r18, 0x00	; 0
    323e:	3f ef       	ldi	r19, 0xFF	; 255
    3240:	4f e7       	ldi	r20, 0x7F	; 127
    3242:	57 e4       	ldi	r21, 0x47	; 71
    3244:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3248:	18 16       	cp	r1, r24
    324a:	4c f5       	brge	.+82     	; 0x329e <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    324c:	6d a9       	ldd	r22, Y+53	; 0x35
    324e:	7e a9       	ldd	r23, Y+54	; 0x36
    3250:	8f a9       	ldd	r24, Y+55	; 0x37
    3252:	98 ad       	ldd	r25, Y+56	; 0x38
    3254:	20 e0       	ldi	r18, 0x00	; 0
    3256:	30 e0       	ldi	r19, 0x00	; 0
    3258:	40 e2       	ldi	r20, 0x20	; 32
    325a:	51 e4       	ldi	r21, 0x41	; 65
    325c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3260:	dc 01       	movw	r26, r24
    3262:	cb 01       	movw	r24, r22
    3264:	bc 01       	movw	r22, r24
    3266:	cd 01       	movw	r24, r26
    3268:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    326c:	dc 01       	movw	r26, r24
    326e:	cb 01       	movw	r24, r22
    3270:	98 ab       	std	Y+48, r25	; 0x30
    3272:	8f a7       	std	Y+47, r24	; 0x2f
    3274:	0f c0       	rjmp	.+30     	; 0x3294 <LCD_displayCharacter+0xd2>
    3276:	88 ec       	ldi	r24, 0xC8	; 200
    3278:	90 e0       	ldi	r25, 0x00	; 0
    327a:	9e a7       	std	Y+46, r25	; 0x2e
    327c:	8d a7       	std	Y+45, r24	; 0x2d
    327e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3280:	9e a5       	ldd	r25, Y+46	; 0x2e
    3282:	01 97       	sbiw	r24, 0x01	; 1
    3284:	f1 f7       	brne	.-4      	; 0x3282 <LCD_displayCharacter+0xc0>
    3286:	9e a7       	std	Y+46, r25	; 0x2e
    3288:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    328a:	8f a5       	ldd	r24, Y+47	; 0x2f
    328c:	98 a9       	ldd	r25, Y+48	; 0x30
    328e:	01 97       	sbiw	r24, 0x01	; 1
    3290:	98 ab       	std	Y+48, r25	; 0x30
    3292:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3294:	8f a5       	ldd	r24, Y+47	; 0x2f
    3296:	98 a9       	ldd	r25, Y+48	; 0x30
    3298:	00 97       	sbiw	r24, 0x00	; 0
    329a:	69 f7       	brne	.-38     	; 0x3276 <LCD_displayCharacter+0xb4>
    329c:	14 c0       	rjmp	.+40     	; 0x32c6 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    329e:	69 a9       	ldd	r22, Y+49	; 0x31
    32a0:	7a a9       	ldd	r23, Y+50	; 0x32
    32a2:	8b a9       	ldd	r24, Y+51	; 0x33
    32a4:	9c a9       	ldd	r25, Y+52	; 0x34
    32a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32aa:	dc 01       	movw	r26, r24
    32ac:	cb 01       	movw	r24, r22
    32ae:	98 ab       	std	Y+48, r25	; 0x30
    32b0:	8f a7       	std	Y+47, r24	; 0x2f
    32b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    32b4:	98 a9       	ldd	r25, Y+48	; 0x30
    32b6:	9c a7       	std	Y+44, r25	; 0x2c
    32b8:	8b a7       	std	Y+43, r24	; 0x2b
    32ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    32bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    32be:	01 97       	sbiw	r24, 0x01	; 1
    32c0:	f1 f7       	brne	.-4      	; 0x32be <LCD_displayCharacter+0xfc>
    32c2:	9c a7       	std	Y+44, r25	; 0x2c
    32c4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    32c6:	83 e0       	ldi	r24, 0x03	; 3
    32c8:	63 e0       	ldi	r22, 0x03	; 3
    32ca:	41 e0       	ldi	r20, 0x01	; 1
    32cc:	0e 94 78 12 	call	0x24f0	; 0x24f0 <GPIO_writePin>
    32d0:	80 e0       	ldi	r24, 0x00	; 0
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	a0 e8       	ldi	r26, 0x80	; 128
    32d6:	bf e3       	ldi	r27, 0x3F	; 63
    32d8:	8f a3       	std	Y+39, r24	; 0x27
    32da:	98 a7       	std	Y+40, r25	; 0x28
    32dc:	a9 a7       	std	Y+41, r26	; 0x29
    32de:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32e0:	6f a1       	ldd	r22, Y+39	; 0x27
    32e2:	78 a5       	ldd	r23, Y+40	; 0x28
    32e4:	89 a5       	ldd	r24, Y+41	; 0x29
    32e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    32e8:	20 e0       	ldi	r18, 0x00	; 0
    32ea:	30 e0       	ldi	r19, 0x00	; 0
    32ec:	4a ef       	ldi	r20, 0xFA	; 250
    32ee:	54 e4       	ldi	r21, 0x44	; 68
    32f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f4:	dc 01       	movw	r26, r24
    32f6:	cb 01       	movw	r24, r22
    32f8:	8b a3       	std	Y+35, r24	; 0x23
    32fa:	9c a3       	std	Y+36, r25	; 0x24
    32fc:	ad a3       	std	Y+37, r26	; 0x25
    32fe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3300:	6b a1       	ldd	r22, Y+35	; 0x23
    3302:	7c a1       	ldd	r23, Y+36	; 0x24
    3304:	8d a1       	ldd	r24, Y+37	; 0x25
    3306:	9e a1       	ldd	r25, Y+38	; 0x26
    3308:	20 e0       	ldi	r18, 0x00	; 0
    330a:	30 e0       	ldi	r19, 0x00	; 0
    330c:	40 e8       	ldi	r20, 0x80	; 128
    330e:	5f e3       	ldi	r21, 0x3F	; 63
    3310:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3314:	88 23       	and	r24, r24
    3316:	2c f4       	brge	.+10     	; 0x3322 <LCD_displayCharacter+0x160>
		__ticks = 1;
    3318:	81 e0       	ldi	r24, 0x01	; 1
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	9a a3       	std	Y+34, r25	; 0x22
    331e:	89 a3       	std	Y+33, r24	; 0x21
    3320:	3f c0       	rjmp	.+126    	; 0x33a0 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    3322:	6b a1       	ldd	r22, Y+35	; 0x23
    3324:	7c a1       	ldd	r23, Y+36	; 0x24
    3326:	8d a1       	ldd	r24, Y+37	; 0x25
    3328:	9e a1       	ldd	r25, Y+38	; 0x26
    332a:	20 e0       	ldi	r18, 0x00	; 0
    332c:	3f ef       	ldi	r19, 0xFF	; 255
    332e:	4f e7       	ldi	r20, 0x7F	; 127
    3330:	57 e4       	ldi	r21, 0x47	; 71
    3332:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3336:	18 16       	cp	r1, r24
    3338:	4c f5       	brge	.+82     	; 0x338c <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    333a:	6f a1       	ldd	r22, Y+39	; 0x27
    333c:	78 a5       	ldd	r23, Y+40	; 0x28
    333e:	89 a5       	ldd	r24, Y+41	; 0x29
    3340:	9a a5       	ldd	r25, Y+42	; 0x2a
    3342:	20 e0       	ldi	r18, 0x00	; 0
    3344:	30 e0       	ldi	r19, 0x00	; 0
    3346:	40 e2       	ldi	r20, 0x20	; 32
    3348:	51 e4       	ldi	r21, 0x41	; 65
    334a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    334e:	dc 01       	movw	r26, r24
    3350:	cb 01       	movw	r24, r22
    3352:	bc 01       	movw	r22, r24
    3354:	cd 01       	movw	r24, r26
    3356:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    335a:	dc 01       	movw	r26, r24
    335c:	cb 01       	movw	r24, r22
    335e:	9a a3       	std	Y+34, r25	; 0x22
    3360:	89 a3       	std	Y+33, r24	; 0x21
    3362:	0f c0       	rjmp	.+30     	; 0x3382 <LCD_displayCharacter+0x1c0>
    3364:	88 ec       	ldi	r24, 0xC8	; 200
    3366:	90 e0       	ldi	r25, 0x00	; 0
    3368:	98 a3       	std	Y+32, r25	; 0x20
    336a:	8f 8f       	std	Y+31, r24	; 0x1f
    336c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    336e:	98 a1       	ldd	r25, Y+32	; 0x20
    3370:	01 97       	sbiw	r24, 0x01	; 1
    3372:	f1 f7       	brne	.-4      	; 0x3370 <LCD_displayCharacter+0x1ae>
    3374:	98 a3       	std	Y+32, r25	; 0x20
    3376:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3378:	89 a1       	ldd	r24, Y+33	; 0x21
    337a:	9a a1       	ldd	r25, Y+34	; 0x22
    337c:	01 97       	sbiw	r24, 0x01	; 1
    337e:	9a a3       	std	Y+34, r25	; 0x22
    3380:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3382:	89 a1       	ldd	r24, Y+33	; 0x21
    3384:	9a a1       	ldd	r25, Y+34	; 0x22
    3386:	00 97       	sbiw	r24, 0x00	; 0
    3388:	69 f7       	brne	.-38     	; 0x3364 <LCD_displayCharacter+0x1a2>
    338a:	14 c0       	rjmp	.+40     	; 0x33b4 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    338c:	6b a1       	ldd	r22, Y+35	; 0x23
    338e:	7c a1       	ldd	r23, Y+36	; 0x24
    3390:	8d a1       	ldd	r24, Y+37	; 0x25
    3392:	9e a1       	ldd	r25, Y+38	; 0x26
    3394:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3398:	dc 01       	movw	r26, r24
    339a:	cb 01       	movw	r24, r22
    339c:	9a a3       	std	Y+34, r25	; 0x22
    339e:	89 a3       	std	Y+33, r24	; 0x21
    33a0:	89 a1       	ldd	r24, Y+33	; 0x21
    33a2:	9a a1       	ldd	r25, Y+34	; 0x22
    33a4:	9e 8f       	std	Y+30, r25	; 0x1e
    33a6:	8d 8f       	std	Y+29, r24	; 0x1d
    33a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    33ac:	01 97       	sbiw	r24, 0x01	; 1
    33ae:	f1 f7       	brne	.-4      	; 0x33ac <LCD_displayCharacter+0x1ea>
    33b0:	9e 8f       	std	Y+30, r25	; 0x1e
    33b2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    33b4:	81 e0       	ldi	r24, 0x01	; 1
    33b6:	69 ad       	ldd	r22, Y+57	; 0x39
    33b8:	0e 94 42 14 	call	0x2884	; 0x2884 <GPIO_writePort>
    33bc:	80 e0       	ldi	r24, 0x00	; 0
    33be:	90 e0       	ldi	r25, 0x00	; 0
    33c0:	a0 e8       	ldi	r26, 0x80	; 128
    33c2:	bf e3       	ldi	r27, 0x3F	; 63
    33c4:	89 8f       	std	Y+25, r24	; 0x19
    33c6:	9a 8f       	std	Y+26, r25	; 0x1a
    33c8:	ab 8f       	std	Y+27, r26	; 0x1b
    33ca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33cc:	69 8d       	ldd	r22, Y+25	; 0x19
    33ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33d4:	20 e0       	ldi	r18, 0x00	; 0
    33d6:	30 e0       	ldi	r19, 0x00	; 0
    33d8:	4a ef       	ldi	r20, 0xFA	; 250
    33da:	54 e4       	ldi	r21, 0x44	; 68
    33dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e0:	dc 01       	movw	r26, r24
    33e2:	cb 01       	movw	r24, r22
    33e4:	8d 8b       	std	Y+21, r24	; 0x15
    33e6:	9e 8b       	std	Y+22, r25	; 0x16
    33e8:	af 8b       	std	Y+23, r26	; 0x17
    33ea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33ec:	6d 89       	ldd	r22, Y+21	; 0x15
    33ee:	7e 89       	ldd	r23, Y+22	; 0x16
    33f0:	8f 89       	ldd	r24, Y+23	; 0x17
    33f2:	98 8d       	ldd	r25, Y+24	; 0x18
    33f4:	20 e0       	ldi	r18, 0x00	; 0
    33f6:	30 e0       	ldi	r19, 0x00	; 0
    33f8:	40 e8       	ldi	r20, 0x80	; 128
    33fa:	5f e3       	ldi	r21, 0x3F	; 63
    33fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3400:	88 23       	and	r24, r24
    3402:	2c f4       	brge	.+10     	; 0x340e <LCD_displayCharacter+0x24c>
		__ticks = 1;
    3404:	81 e0       	ldi	r24, 0x01	; 1
    3406:	90 e0       	ldi	r25, 0x00	; 0
    3408:	9c 8b       	std	Y+20, r25	; 0x14
    340a:	8b 8b       	std	Y+19, r24	; 0x13
    340c:	3f c0       	rjmp	.+126    	; 0x348c <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    340e:	6d 89       	ldd	r22, Y+21	; 0x15
    3410:	7e 89       	ldd	r23, Y+22	; 0x16
    3412:	8f 89       	ldd	r24, Y+23	; 0x17
    3414:	98 8d       	ldd	r25, Y+24	; 0x18
    3416:	20 e0       	ldi	r18, 0x00	; 0
    3418:	3f ef       	ldi	r19, 0xFF	; 255
    341a:	4f e7       	ldi	r20, 0x7F	; 127
    341c:	57 e4       	ldi	r21, 0x47	; 71
    341e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3422:	18 16       	cp	r1, r24
    3424:	4c f5       	brge	.+82     	; 0x3478 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3426:	69 8d       	ldd	r22, Y+25	; 0x19
    3428:	7a 8d       	ldd	r23, Y+26	; 0x1a
    342a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    342c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    342e:	20 e0       	ldi	r18, 0x00	; 0
    3430:	30 e0       	ldi	r19, 0x00	; 0
    3432:	40 e2       	ldi	r20, 0x20	; 32
    3434:	51 e4       	ldi	r21, 0x41	; 65
    3436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    343a:	dc 01       	movw	r26, r24
    343c:	cb 01       	movw	r24, r22
    343e:	bc 01       	movw	r22, r24
    3440:	cd 01       	movw	r24, r26
    3442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3446:	dc 01       	movw	r26, r24
    3448:	cb 01       	movw	r24, r22
    344a:	9c 8b       	std	Y+20, r25	; 0x14
    344c:	8b 8b       	std	Y+19, r24	; 0x13
    344e:	0f c0       	rjmp	.+30     	; 0x346e <LCD_displayCharacter+0x2ac>
    3450:	88 ec       	ldi	r24, 0xC8	; 200
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	9a 8b       	std	Y+18, r25	; 0x12
    3456:	89 8b       	std	Y+17, r24	; 0x11
    3458:	89 89       	ldd	r24, Y+17	; 0x11
    345a:	9a 89       	ldd	r25, Y+18	; 0x12
    345c:	01 97       	sbiw	r24, 0x01	; 1
    345e:	f1 f7       	brne	.-4      	; 0x345c <LCD_displayCharacter+0x29a>
    3460:	9a 8b       	std	Y+18, r25	; 0x12
    3462:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3464:	8b 89       	ldd	r24, Y+19	; 0x13
    3466:	9c 89       	ldd	r25, Y+20	; 0x14
    3468:	01 97       	sbiw	r24, 0x01	; 1
    346a:	9c 8b       	std	Y+20, r25	; 0x14
    346c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    346e:	8b 89       	ldd	r24, Y+19	; 0x13
    3470:	9c 89       	ldd	r25, Y+20	; 0x14
    3472:	00 97       	sbiw	r24, 0x00	; 0
    3474:	69 f7       	brne	.-38     	; 0x3450 <LCD_displayCharacter+0x28e>
    3476:	14 c0       	rjmp	.+40     	; 0x34a0 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3478:	6d 89       	ldd	r22, Y+21	; 0x15
    347a:	7e 89       	ldd	r23, Y+22	; 0x16
    347c:	8f 89       	ldd	r24, Y+23	; 0x17
    347e:	98 8d       	ldd	r25, Y+24	; 0x18
    3480:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3484:	dc 01       	movw	r26, r24
    3486:	cb 01       	movw	r24, r22
    3488:	9c 8b       	std	Y+20, r25	; 0x14
    348a:	8b 8b       	std	Y+19, r24	; 0x13
    348c:	8b 89       	ldd	r24, Y+19	; 0x13
    348e:	9c 89       	ldd	r25, Y+20	; 0x14
    3490:	98 8b       	std	Y+16, r25	; 0x10
    3492:	8f 87       	std	Y+15, r24	; 0x0f
    3494:	8f 85       	ldd	r24, Y+15	; 0x0f
    3496:	98 89       	ldd	r25, Y+16	; 0x10
    3498:	01 97       	sbiw	r24, 0x01	; 1
    349a:	f1 f7       	brne	.-4      	; 0x3498 <LCD_displayCharacter+0x2d6>
    349c:	98 8b       	std	Y+16, r25	; 0x10
    349e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    34a0:	83 e0       	ldi	r24, 0x03	; 3
    34a2:	63 e0       	ldi	r22, 0x03	; 3
    34a4:	40 e0       	ldi	r20, 0x00	; 0
    34a6:	0e 94 78 12 	call	0x24f0	; 0x24f0 <GPIO_writePin>
    34aa:	80 e0       	ldi	r24, 0x00	; 0
    34ac:	90 e0       	ldi	r25, 0x00	; 0
    34ae:	a0 e8       	ldi	r26, 0x80	; 128
    34b0:	bf e3       	ldi	r27, 0x3F	; 63
    34b2:	8b 87       	std	Y+11, r24	; 0x0b
    34b4:	9c 87       	std	Y+12, r25	; 0x0c
    34b6:	ad 87       	std	Y+13, r26	; 0x0d
    34b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    34bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    34be:	8d 85       	ldd	r24, Y+13	; 0x0d
    34c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    34c2:	20 e0       	ldi	r18, 0x00	; 0
    34c4:	30 e0       	ldi	r19, 0x00	; 0
    34c6:	4a ef       	ldi	r20, 0xFA	; 250
    34c8:	54 e4       	ldi	r21, 0x44	; 68
    34ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ce:	dc 01       	movw	r26, r24
    34d0:	cb 01       	movw	r24, r22
    34d2:	8f 83       	std	Y+7, r24	; 0x07
    34d4:	98 87       	std	Y+8, r25	; 0x08
    34d6:	a9 87       	std	Y+9, r26	; 0x09
    34d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34da:	6f 81       	ldd	r22, Y+7	; 0x07
    34dc:	78 85       	ldd	r23, Y+8	; 0x08
    34de:	89 85       	ldd	r24, Y+9	; 0x09
    34e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    34e2:	20 e0       	ldi	r18, 0x00	; 0
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	40 e8       	ldi	r20, 0x80	; 128
    34e8:	5f e3       	ldi	r21, 0x3F	; 63
    34ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34ee:	88 23       	and	r24, r24
    34f0:	2c f4       	brge	.+10     	; 0x34fc <LCD_displayCharacter+0x33a>
		__ticks = 1;
    34f2:	81 e0       	ldi	r24, 0x01	; 1
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	9e 83       	std	Y+6, r25	; 0x06
    34f8:	8d 83       	std	Y+5, r24	; 0x05
    34fa:	3f c0       	rjmp	.+126    	; 0x357a <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    34fc:	6f 81       	ldd	r22, Y+7	; 0x07
    34fe:	78 85       	ldd	r23, Y+8	; 0x08
    3500:	89 85       	ldd	r24, Y+9	; 0x09
    3502:	9a 85       	ldd	r25, Y+10	; 0x0a
    3504:	20 e0       	ldi	r18, 0x00	; 0
    3506:	3f ef       	ldi	r19, 0xFF	; 255
    3508:	4f e7       	ldi	r20, 0x7F	; 127
    350a:	57 e4       	ldi	r21, 0x47	; 71
    350c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3510:	18 16       	cp	r1, r24
    3512:	4c f5       	brge	.+82     	; 0x3566 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3514:	6b 85       	ldd	r22, Y+11	; 0x0b
    3516:	7c 85       	ldd	r23, Y+12	; 0x0c
    3518:	8d 85       	ldd	r24, Y+13	; 0x0d
    351a:	9e 85       	ldd	r25, Y+14	; 0x0e
    351c:	20 e0       	ldi	r18, 0x00	; 0
    351e:	30 e0       	ldi	r19, 0x00	; 0
    3520:	40 e2       	ldi	r20, 0x20	; 32
    3522:	51 e4       	ldi	r21, 0x41	; 65
    3524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3528:	dc 01       	movw	r26, r24
    352a:	cb 01       	movw	r24, r22
    352c:	bc 01       	movw	r22, r24
    352e:	cd 01       	movw	r24, r26
    3530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3534:	dc 01       	movw	r26, r24
    3536:	cb 01       	movw	r24, r22
    3538:	9e 83       	std	Y+6, r25	; 0x06
    353a:	8d 83       	std	Y+5, r24	; 0x05
    353c:	0f c0       	rjmp	.+30     	; 0x355c <LCD_displayCharacter+0x39a>
    353e:	88 ec       	ldi	r24, 0xC8	; 200
    3540:	90 e0       	ldi	r25, 0x00	; 0
    3542:	9c 83       	std	Y+4, r25	; 0x04
    3544:	8b 83       	std	Y+3, r24	; 0x03
    3546:	8b 81       	ldd	r24, Y+3	; 0x03
    3548:	9c 81       	ldd	r25, Y+4	; 0x04
    354a:	01 97       	sbiw	r24, 0x01	; 1
    354c:	f1 f7       	brne	.-4      	; 0x354a <LCD_displayCharacter+0x388>
    354e:	9c 83       	std	Y+4, r25	; 0x04
    3550:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3552:	8d 81       	ldd	r24, Y+5	; 0x05
    3554:	9e 81       	ldd	r25, Y+6	; 0x06
    3556:	01 97       	sbiw	r24, 0x01	; 1
    3558:	9e 83       	std	Y+6, r25	; 0x06
    355a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    355c:	8d 81       	ldd	r24, Y+5	; 0x05
    355e:	9e 81       	ldd	r25, Y+6	; 0x06
    3560:	00 97       	sbiw	r24, 0x00	; 0
    3562:	69 f7       	brne	.-38     	; 0x353e <LCD_displayCharacter+0x37c>
    3564:	14 c0       	rjmp	.+40     	; 0x358e <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3566:	6f 81       	ldd	r22, Y+7	; 0x07
    3568:	78 85       	ldd	r23, Y+8	; 0x08
    356a:	89 85       	ldd	r24, Y+9	; 0x09
    356c:	9a 85       	ldd	r25, Y+10	; 0x0a
    356e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3572:	dc 01       	movw	r26, r24
    3574:	cb 01       	movw	r24, r22
    3576:	9e 83       	std	Y+6, r25	; 0x06
    3578:	8d 83       	std	Y+5, r24	; 0x05
    357a:	8d 81       	ldd	r24, Y+5	; 0x05
    357c:	9e 81       	ldd	r25, Y+6	; 0x06
    357e:	9a 83       	std	Y+2, r25	; 0x02
    3580:	89 83       	std	Y+1, r24	; 0x01
    3582:	89 81       	ldd	r24, Y+1	; 0x01
    3584:	9a 81       	ldd	r25, Y+2	; 0x02
    3586:	01 97       	sbiw	r24, 0x01	; 1
    3588:	f1 f7       	brne	.-4      	; 0x3586 <LCD_displayCharacter+0x3c4>
    358a:	9a 83       	std	Y+2, r25	; 0x02
    358c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    358e:	e9 96       	adiw	r28, 0x39	; 57
    3590:	0f b6       	in	r0, 0x3f	; 63
    3592:	f8 94       	cli
    3594:	de bf       	out	0x3e, r29	; 62
    3596:	0f be       	out	0x3f, r0	; 63
    3598:	cd bf       	out	0x3d, r28	; 61
    359a:	cf 91       	pop	r28
    359c:	df 91       	pop	r29
    359e:	08 95       	ret

000035a0 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    35a0:	df 93       	push	r29
    35a2:	cf 93       	push	r28
    35a4:	00 d0       	rcall	.+0      	; 0x35a6 <LCD_displayString+0x6>
    35a6:	0f 92       	push	r0
    35a8:	cd b7       	in	r28, 0x3d	; 61
    35aa:	de b7       	in	r29, 0x3e	; 62
    35ac:	9b 83       	std	Y+3, r25	; 0x03
    35ae:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    35b0:	19 82       	std	Y+1, r1	; 0x01
    35b2:	0e c0       	rjmp	.+28     	; 0x35d0 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    35b4:	89 81       	ldd	r24, Y+1	; 0x01
    35b6:	28 2f       	mov	r18, r24
    35b8:	30 e0       	ldi	r19, 0x00	; 0
    35ba:	8a 81       	ldd	r24, Y+2	; 0x02
    35bc:	9b 81       	ldd	r25, Y+3	; 0x03
    35be:	fc 01       	movw	r30, r24
    35c0:	e2 0f       	add	r30, r18
    35c2:	f3 1f       	adc	r31, r19
    35c4:	80 81       	ld	r24, Z
    35c6:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <LCD_displayCharacter>
		i++;
    35ca:	89 81       	ldd	r24, Y+1	; 0x01
    35cc:	8f 5f       	subi	r24, 0xFF	; 255
    35ce:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    35d0:	89 81       	ldd	r24, Y+1	; 0x01
    35d2:	28 2f       	mov	r18, r24
    35d4:	30 e0       	ldi	r19, 0x00	; 0
    35d6:	8a 81       	ldd	r24, Y+2	; 0x02
    35d8:	9b 81       	ldd	r25, Y+3	; 0x03
    35da:	fc 01       	movw	r30, r24
    35dc:	e2 0f       	add	r30, r18
    35de:	f3 1f       	adc	r31, r19
    35e0:	80 81       	ld	r24, Z
    35e2:	88 23       	and	r24, r24
    35e4:	39 f7       	brne	.-50     	; 0x35b4 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    35e6:	0f 90       	pop	r0
    35e8:	0f 90       	pop	r0
    35ea:	0f 90       	pop	r0
    35ec:	cf 91       	pop	r28
    35ee:	df 91       	pop	r29
    35f0:	08 95       	ret

000035f2 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    35f2:	df 93       	push	r29
    35f4:	cf 93       	push	r28
    35f6:	00 d0       	rcall	.+0      	; 0x35f8 <LCD_moveCursor+0x6>
    35f8:	00 d0       	rcall	.+0      	; 0x35fa <LCD_moveCursor+0x8>
    35fa:	0f 92       	push	r0
    35fc:	cd b7       	in	r28, 0x3d	; 61
    35fe:	de b7       	in	r29, 0x3e	; 62
    3600:	8a 83       	std	Y+2, r24	; 0x02
    3602:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3604:	8a 81       	ldd	r24, Y+2	; 0x02
    3606:	28 2f       	mov	r18, r24
    3608:	30 e0       	ldi	r19, 0x00	; 0
    360a:	3d 83       	std	Y+5, r19	; 0x05
    360c:	2c 83       	std	Y+4, r18	; 0x04
    360e:	8c 81       	ldd	r24, Y+4	; 0x04
    3610:	9d 81       	ldd	r25, Y+5	; 0x05
    3612:	81 30       	cpi	r24, 0x01	; 1
    3614:	91 05       	cpc	r25, r1
    3616:	c1 f0       	breq	.+48     	; 0x3648 <LCD_moveCursor+0x56>
    3618:	2c 81       	ldd	r18, Y+4	; 0x04
    361a:	3d 81       	ldd	r19, Y+5	; 0x05
    361c:	22 30       	cpi	r18, 0x02	; 2
    361e:	31 05       	cpc	r19, r1
    3620:	2c f4       	brge	.+10     	; 0x362c <LCD_moveCursor+0x3a>
    3622:	8c 81       	ldd	r24, Y+4	; 0x04
    3624:	9d 81       	ldd	r25, Y+5	; 0x05
    3626:	00 97       	sbiw	r24, 0x00	; 0
    3628:	61 f0       	breq	.+24     	; 0x3642 <LCD_moveCursor+0x50>
    362a:	19 c0       	rjmp	.+50     	; 0x365e <LCD_moveCursor+0x6c>
    362c:	2c 81       	ldd	r18, Y+4	; 0x04
    362e:	3d 81       	ldd	r19, Y+5	; 0x05
    3630:	22 30       	cpi	r18, 0x02	; 2
    3632:	31 05       	cpc	r19, r1
    3634:	69 f0       	breq	.+26     	; 0x3650 <LCD_moveCursor+0x5e>
    3636:	8c 81       	ldd	r24, Y+4	; 0x04
    3638:	9d 81       	ldd	r25, Y+5	; 0x05
    363a:	83 30       	cpi	r24, 0x03	; 3
    363c:	91 05       	cpc	r25, r1
    363e:	61 f0       	breq	.+24     	; 0x3658 <LCD_moveCursor+0x66>
    3640:	0e c0       	rjmp	.+28     	; 0x365e <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    3642:	8b 81       	ldd	r24, Y+3	; 0x03
    3644:	89 83       	std	Y+1, r24	; 0x01
    3646:	0b c0       	rjmp	.+22     	; 0x365e <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    3648:	8b 81       	ldd	r24, Y+3	; 0x03
    364a:	80 5c       	subi	r24, 0xC0	; 192
    364c:	89 83       	std	Y+1, r24	; 0x01
    364e:	07 c0       	rjmp	.+14     	; 0x365e <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    3650:	8b 81       	ldd	r24, Y+3	; 0x03
    3652:	80 5f       	subi	r24, 0xF0	; 240
    3654:	89 83       	std	Y+1, r24	; 0x01
    3656:	03 c0       	rjmp	.+6      	; 0x365e <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    3658:	8b 81       	ldd	r24, Y+3	; 0x03
    365a:	80 5b       	subi	r24, 0xB0	; 176
    365c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    365e:	89 81       	ldd	r24, Y+1	; 0x01
    3660:	80 68       	ori	r24, 0x80	; 128
    3662:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <LCD_sendCommand>
}
    3666:	0f 90       	pop	r0
    3668:	0f 90       	pop	r0
    366a:	0f 90       	pop	r0
    366c:	0f 90       	pop	r0
    366e:	0f 90       	pop	r0
    3670:	cf 91       	pop	r28
    3672:	df 91       	pop	r29
    3674:	08 95       	ret

00003676 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3676:	df 93       	push	r29
    3678:	cf 93       	push	r28
    367a:	00 d0       	rcall	.+0      	; 0x367c <LCD_displayStringRowColumn+0x6>
    367c:	00 d0       	rcall	.+0      	; 0x367e <LCD_displayStringRowColumn+0x8>
    367e:	cd b7       	in	r28, 0x3d	; 61
    3680:	de b7       	in	r29, 0x3e	; 62
    3682:	89 83       	std	Y+1, r24	; 0x01
    3684:	6a 83       	std	Y+2, r22	; 0x02
    3686:	5c 83       	std	Y+4, r21	; 0x04
    3688:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    368a:	89 81       	ldd	r24, Y+1	; 0x01
    368c:	6a 81       	ldd	r22, Y+2	; 0x02
    368e:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    3692:	8b 81       	ldd	r24, Y+3	; 0x03
    3694:	9c 81       	ldd	r25, Y+4	; 0x04
    3696:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <LCD_displayString>
}
    369a:	0f 90       	pop	r0
    369c:	0f 90       	pop	r0
    369e:	0f 90       	pop	r0
    36a0:	0f 90       	pop	r0
    36a2:	cf 91       	pop	r28
    36a4:	df 91       	pop	r29
    36a6:	08 95       	ret

000036a8 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    36a8:	df 93       	push	r29
    36aa:	cf 93       	push	r28
    36ac:	cd b7       	in	r28, 0x3d	; 61
    36ae:	de b7       	in	r29, 0x3e	; 62
    36b0:	62 97       	sbiw	r28, 0x12	; 18
    36b2:	0f b6       	in	r0, 0x3f	; 63
    36b4:	f8 94       	cli
    36b6:	de bf       	out	0x3e, r29	; 62
    36b8:	0f be       	out	0x3f, r0	; 63
    36ba:	cd bf       	out	0x3d, r28	; 61
    36bc:	9a 8b       	std	Y+18, r25	; 0x12
    36be:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    36c0:	89 89       	ldd	r24, Y+17	; 0x11
    36c2:	9a 89       	ldd	r25, Y+18	; 0x12
    36c4:	9e 01       	movw	r18, r28
    36c6:	2f 5f       	subi	r18, 0xFF	; 255
    36c8:	3f 4f       	sbci	r19, 0xFF	; 255
    36ca:	b9 01       	movw	r22, r18
    36cc:	4a e0       	ldi	r20, 0x0A	; 10
    36ce:	50 e0       	ldi	r21, 0x00	; 0
    36d0:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <itoa>
   LCD_displayString(buff); /* Display the string */
    36d4:	ce 01       	movw	r24, r28
    36d6:	01 96       	adiw	r24, 0x01	; 1
    36d8:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <LCD_displayString>
}
    36dc:	62 96       	adiw	r28, 0x12	; 18
    36de:	0f b6       	in	r0, 0x3f	; 63
    36e0:	f8 94       	cli
    36e2:	de bf       	out	0x3e, r29	; 62
    36e4:	0f be       	out	0x3f, r0	; 63
    36e6:	cd bf       	out	0x3d, r28	; 61
    36e8:	cf 91       	pop	r28
    36ea:	df 91       	pop	r29
    36ec:	08 95       	ret

000036ee <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    36ee:	df 93       	push	r29
    36f0:	cf 93       	push	r28
    36f2:	cd b7       	in	r28, 0x3d	; 61
    36f4:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    36f6:	81 e0       	ldi	r24, 0x01	; 1
    36f8:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <LCD_sendCommand>
}
    36fc:	cf 91       	pop	r28
    36fe:	df 91       	pop	r29
    3700:	08 95       	ret

00003702 <__vector_9>:
 *                               ISR                                           *
 *******************************************************************************/

/* ISR for Overflow Mode */
ISR (TIMER1_OVF_vect)
{
    3702:	1f 92       	push	r1
    3704:	0f 92       	push	r0
    3706:	0f b6       	in	r0, 0x3f	; 63
    3708:	0f 92       	push	r0
    370a:	11 24       	eor	r1, r1
    370c:	2f 93       	push	r18
    370e:	3f 93       	push	r19
    3710:	4f 93       	push	r20
    3712:	5f 93       	push	r21
    3714:	6f 93       	push	r22
    3716:	7f 93       	push	r23
    3718:	8f 93       	push	r24
    371a:	9f 93       	push	r25
    371c:	af 93       	push	r26
    371e:	bf 93       	push	r27
    3720:	ef 93       	push	r30
    3722:	ff 93       	push	r31
    3724:	df 93       	push	r29
    3726:	cf 93       	push	r28
    3728:	cd b7       	in	r28, 0x3d	; 61
    372a:	de b7       	in	r29, 0x3e	; 62
	if(calling_ISR != NULL_PTR)
    372c:	80 91 75 01 	lds	r24, 0x0175
    3730:	90 91 76 01 	lds	r25, 0x0176
    3734:	00 97       	sbiw	r24, 0x00	; 0
    3736:	29 f0       	breq	.+10     	; 0x3742 <__vector_9+0x40>
	{
		(*calling_ISR)();
    3738:	e0 91 75 01 	lds	r30, 0x0175
    373c:	f0 91 76 01 	lds	r31, 0x0176
    3740:	09 95       	icall
	}
}
    3742:	cf 91       	pop	r28
    3744:	df 91       	pop	r29
    3746:	ff 91       	pop	r31
    3748:	ef 91       	pop	r30
    374a:	bf 91       	pop	r27
    374c:	af 91       	pop	r26
    374e:	9f 91       	pop	r25
    3750:	8f 91       	pop	r24
    3752:	7f 91       	pop	r23
    3754:	6f 91       	pop	r22
    3756:	5f 91       	pop	r21
    3758:	4f 91       	pop	r20
    375a:	3f 91       	pop	r19
    375c:	2f 91       	pop	r18
    375e:	0f 90       	pop	r0
    3760:	0f be       	out	0x3f, r0	; 63
    3762:	0f 90       	pop	r0
    3764:	1f 90       	pop	r1
    3766:	18 95       	reti

00003768 <__vector_7>:


/* ISR for Compare Mode */
ISR (TIMER1_COMPA_vect)
{
    3768:	1f 92       	push	r1
    376a:	0f 92       	push	r0
    376c:	0f b6       	in	r0, 0x3f	; 63
    376e:	0f 92       	push	r0
    3770:	11 24       	eor	r1, r1
    3772:	2f 93       	push	r18
    3774:	3f 93       	push	r19
    3776:	4f 93       	push	r20
    3778:	5f 93       	push	r21
    377a:	6f 93       	push	r22
    377c:	7f 93       	push	r23
    377e:	8f 93       	push	r24
    3780:	9f 93       	push	r25
    3782:	af 93       	push	r26
    3784:	bf 93       	push	r27
    3786:	ef 93       	push	r30
    3788:	ff 93       	push	r31
    378a:	df 93       	push	r29
    378c:	cf 93       	push	r28
    378e:	cd b7       	in	r28, 0x3d	; 61
    3790:	de b7       	in	r29, 0x3e	; 62
	if(calling_ISR != NULL_PTR)
    3792:	80 91 75 01 	lds	r24, 0x0175
    3796:	90 91 76 01 	lds	r25, 0x0176
    379a:	00 97       	sbiw	r24, 0x00	; 0
    379c:	29 f0       	breq	.+10     	; 0x37a8 <__vector_7+0x40>
	{
		(*calling_ISR)();
    379e:	e0 91 75 01 	lds	r30, 0x0175
    37a2:	f0 91 76 01 	lds	r31, 0x0176
    37a6:	09 95       	icall
	}
}
    37a8:	cf 91       	pop	r28
    37aa:	df 91       	pop	r29
    37ac:	ff 91       	pop	r31
    37ae:	ef 91       	pop	r30
    37b0:	bf 91       	pop	r27
    37b2:	af 91       	pop	r26
    37b4:	9f 91       	pop	r25
    37b6:	8f 91       	pop	r24
    37b8:	7f 91       	pop	r23
    37ba:	6f 91       	pop	r22
    37bc:	5f 91       	pop	r21
    37be:	4f 91       	pop	r20
    37c0:	3f 91       	pop	r19
    37c2:	2f 91       	pop	r18
    37c4:	0f 90       	pop	r0
    37c6:	0f be       	out	0x3f, r0	; 63
    37c8:	0f 90       	pop	r0
    37ca:	1f 90       	pop	r1
    37cc:	18 95       	reti

000037ce <Timer1_init>:
 *  1. Inserting the initial value for the timer.
 *  2. Selecting Timer1 Prescaler.
 *  3. Selecting Timer1 Mode.
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    37ce:	df 93       	push	r29
    37d0:	cf 93       	push	r28
    37d2:	00 d0       	rcall	.+0      	; 0x37d4 <Timer1_init+0x6>
    37d4:	cd b7       	in	r28, 0x3d	; 61
    37d6:	de b7       	in	r29, 0x3e	; 62
    37d8:	9a 83       	std	Y+2, r25	; 0x02
    37da:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Config_Ptr ->initial_value ;  /* Set the initial value for Timer1 */
    37dc:	ac e4       	ldi	r26, 0x4C	; 76
    37de:	b0 e0       	ldi	r27, 0x00	; 0
    37e0:	e9 81       	ldd	r30, Y+1	; 0x01
    37e2:	fa 81       	ldd	r31, Y+2	; 0x02
    37e4:	80 81       	ld	r24, Z
    37e6:	91 81       	ldd	r25, Z+1	; 0x01
    37e8:	11 96       	adiw	r26, 0x01	; 1
    37ea:	9c 93       	st	X, r25
    37ec:	8e 93       	st	-X, r24

	if(Config_Ptr -> mode == TIMER1_NORMAL_MODE)
    37ee:	e9 81       	ldd	r30, Y+1	; 0x01
    37f0:	fa 81       	ldd	r31, Y+2	; 0x02
    37f2:	85 81       	ldd	r24, Z+5	; 0x05
    37f4:	88 23       	and	r24, r24
    37f6:	91 f4       	brne	.+36     	; 0x381c <Timer1_init+0x4e>
	{
		TIMSK |= (1<<TOIE1);  /* Enable Timer1 Overflow Interrupt */
    37f8:	a9 e5       	ldi	r26, 0x59	; 89
    37fa:	b0 e0       	ldi	r27, 0x00	; 0
    37fc:	e9 e5       	ldi	r30, 0x59	; 89
    37fe:	f0 e0       	ldi	r31, 0x00	; 0
    3800:	80 81       	ld	r24, Z
    3802:	84 60       	ori	r24, 0x04	; 4
    3804:	8c 93       	st	X, r24

		/*  1. Active for non-PWM mode.
		 *  2. Choose Normal Mode.
		 *  3. Disable All Features except Normal Mode Features.
		 */
		TCCR1A = (1<<FOC1A);
    3806:	ef e4       	ldi	r30, 0x4F	; 79
    3808:	f0 e0       	ldi	r31, 0x00	; 0
    380a:	88 e0       	ldi	r24, 0x08	; 8
    380c:	80 83       	st	Z, r24

		TCCR1B = Config_Ptr -> prescaler; /* Set the prescaler for Timer1 */
    380e:	ae e4       	ldi	r26, 0x4E	; 78
    3810:	b0 e0       	ldi	r27, 0x00	; 0
    3812:	e9 81       	ldd	r30, Y+1	; 0x01
    3814:	fa 81       	ldd	r31, Y+2	; 0x02
    3816:	84 81       	ldd	r24, Z+4	; 0x04
    3818:	8c 93       	st	X, r24
    381a:	1e c0       	rjmp	.+60     	; 0x3858 <Timer1_init+0x8a>

	}

	else
	{
		OCR1A = Config_Ptr -> compare_value ; /* Put the compare value for Timer1 */
    381c:	aa e4       	ldi	r26, 0x4A	; 74
    381e:	b0 e0       	ldi	r27, 0x00	; 0
    3820:	e9 81       	ldd	r30, Y+1	; 0x01
    3822:	fa 81       	ldd	r31, Y+2	; 0x02
    3824:	82 81       	ldd	r24, Z+2	; 0x02
    3826:	93 81       	ldd	r25, Z+3	; 0x03
    3828:	11 96       	adiw	r26, 0x01	; 1
    382a:	9c 93       	st	X, r25
    382c:	8e 93       	st	-X, r24

		TIMSK |= (1<<OCIE1A);  /* Output Compare A Match Interrupt Enable */
    382e:	a9 e5       	ldi	r26, 0x59	; 89
    3830:	b0 e0       	ldi	r27, 0x00	; 0
    3832:	e9 e5       	ldi	r30, 0x59	; 89
    3834:	f0 e0       	ldi	r31, 0x00	; 0
    3836:	80 81       	ld	r24, Z
    3838:	80 61       	ori	r24, 0x10	; 16
    383a:	8c 93       	st	X, r24

		/*  1. Active for non-PWM mode.
		 *  2. Choose CTC Mode.
		 */
		TCCR1A = (1<<FOC1A);
    383c:	ef e4       	ldi	r30, 0x4F	; 79
    383e:	f0 e0       	ldi	r31, 0x00	; 0
    3840:	88 e0       	ldi	r24, 0x08	; 8
    3842:	80 83       	st	Z, r24


		/*
		 * Choose the prescaler and mode.
		 */
		TCCR1B = Config_Ptr->prescaler | Config_Ptr->mode;
    3844:	ae e4       	ldi	r26, 0x4E	; 78
    3846:	b0 e0       	ldi	r27, 0x00	; 0
    3848:	e9 81       	ldd	r30, Y+1	; 0x01
    384a:	fa 81       	ldd	r31, Y+2	; 0x02
    384c:	94 81       	ldd	r25, Z+4	; 0x04
    384e:	e9 81       	ldd	r30, Y+1	; 0x01
    3850:	fa 81       	ldd	r31, Y+2	; 0x02
    3852:	85 81       	ldd	r24, Z+5	; 0x05
    3854:	89 2b       	or	r24, r25
    3856:	8c 93       	st	X, r24
	}
}
    3858:	0f 90       	pop	r0
    385a:	0f 90       	pop	r0
    385c:	cf 91       	pop	r28
    385e:	df 91       	pop	r29
    3860:	08 95       	ret

00003862 <Timer1_deInit>:
/*
 * Description :
 * Function to deinitialization Timer1.
 */
void Timer1_deInit(void)
{
    3862:	df 93       	push	r29
    3864:	cf 93       	push	r28
    3866:	cd b7       	in	r28, 0x3d	; 61
    3868:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    386a:	ec e4       	ldi	r30, 0x4C	; 76
    386c:	f0 e0       	ldi	r31, 0x00	; 0
    386e:	11 82       	std	Z+1, r1	; 0x01
    3870:	10 82       	st	Z, r1

	TCCR1B = 0;
    3872:	ee e4       	ldi	r30, 0x4E	; 78
    3874:	f0 e0       	ldi	r31, 0x00	; 0
    3876:	10 82       	st	Z, r1
}
    3878:	cf 91       	pop	r28
    387a:	df 91       	pop	r29
    387c:	08 95       	ret

0000387e <Timer1_setCallBack>:
/*
 * Description :
 * Function to set the Call Back function address.
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    387e:	df 93       	push	r29
    3880:	cf 93       	push	r28
    3882:	00 d0       	rcall	.+0      	; 0x3884 <Timer1_setCallBack+0x6>
    3884:	cd b7       	in	r28, 0x3d	; 61
    3886:	de b7       	in	r29, 0x3e	; 62
    3888:	9a 83       	std	Y+2, r25	; 0x02
    388a:	89 83       	std	Y+1, r24	; 0x01
	calling_ISR = a_ptr;
    388c:	89 81       	ldd	r24, Y+1	; 0x01
    388e:	9a 81       	ldd	r25, Y+2	; 0x02
    3890:	90 93 76 01 	sts	0x0176, r25
    3894:	80 93 75 01 	sts	0x0175, r24
}
    3898:	0f 90       	pop	r0
    389a:	0f 90       	pop	r0
    389c:	cf 91       	pop	r28
    389e:	df 91       	pop	r29
    38a0:	08 95       	ret

000038a2 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    38a2:	df 93       	push	r29
    38a4:	cf 93       	push	r28
    38a6:	00 d0       	rcall	.+0      	; 0x38a8 <UART_init+0x6>
    38a8:	00 d0       	rcall	.+0      	; 0x38aa <UART_init+0x8>
    38aa:	cd b7       	in	r28, 0x3d	; 61
    38ac:	de b7       	in	r29, 0x3e	; 62
    38ae:	9c 83       	std	Y+4, r25	; 0x04
    38b0:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    38b2:	1a 82       	std	Y+2, r1	; 0x02
    38b4:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    38b6:	eb e2       	ldi	r30, 0x2B	; 43
    38b8:	f0 e0       	ldi	r31, 0x00	; 0
    38ba:	82 e0       	ldi	r24, 0x02	; 2
    38bc:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    38be:	ea e2       	ldi	r30, 0x2A	; 42
    38c0:	f0 e0       	ldi	r31, 0x00	; 0
    38c2:	88 e1       	ldi	r24, 0x18	; 24
    38c4:	80 83       	st	Z, r24
	 * UPM1:0  =  parity bit
	 * USBS    = stop bit
	 * UCSZ1:0 =  data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (Config_Ptr -> parity) | (Config_Ptr -> bit_data) | (Config_Ptr -> stop_bit);
    38c6:	a0 e4       	ldi	r26, 0x40	; 64
    38c8:	b0 e0       	ldi	r27, 0x00	; 0
    38ca:	eb 81       	ldd	r30, Y+3	; 0x03
    38cc:	fc 81       	ldd	r31, Y+4	; 0x04
    38ce:	91 81       	ldd	r25, Z+1	; 0x01
    38d0:	eb 81       	ldd	r30, Y+3	; 0x03
    38d2:	fc 81       	ldd	r31, Y+4	; 0x04
    38d4:	80 81       	ld	r24, Z
    38d6:	98 2b       	or	r25, r24
    38d8:	eb 81       	ldd	r30, Y+3	; 0x03
    38da:	fc 81       	ldd	r31, Y+4	; 0x04
    38dc:	82 81       	ldd	r24, Z+2	; 0x02
    38de:	89 2b       	or	r24, r25
    38e0:	80 68       	ori	r24, 0x80	; 128
    38e2:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr -> baud_rate * 8UL))) - 1);
    38e4:	eb 81       	ldd	r30, Y+3	; 0x03
    38e6:	fc 81       	ldd	r31, Y+4	; 0x04
    38e8:	83 81       	ldd	r24, Z+3	; 0x03
    38ea:	94 81       	ldd	r25, Z+4	; 0x04
    38ec:	a5 81       	ldd	r26, Z+5	; 0x05
    38ee:	b6 81       	ldd	r27, Z+6	; 0x06
    38f0:	88 0f       	add	r24, r24
    38f2:	99 1f       	adc	r25, r25
    38f4:	aa 1f       	adc	r26, r26
    38f6:	bb 1f       	adc	r27, r27
    38f8:	88 0f       	add	r24, r24
    38fa:	99 1f       	adc	r25, r25
    38fc:	aa 1f       	adc	r26, r26
    38fe:	bb 1f       	adc	r27, r27
    3900:	88 0f       	add	r24, r24
    3902:	99 1f       	adc	r25, r25
    3904:	aa 1f       	adc	r26, r26
    3906:	bb 1f       	adc	r27, r27
    3908:	9c 01       	movw	r18, r24
    390a:	ad 01       	movw	r20, r26
    390c:	80 e0       	ldi	r24, 0x00	; 0
    390e:	92 e1       	ldi	r25, 0x12	; 18
    3910:	aa e7       	ldi	r26, 0x7A	; 122
    3912:	b0 e0       	ldi	r27, 0x00	; 0
    3914:	bc 01       	movw	r22, r24
    3916:	cd 01       	movw	r24, r26
    3918:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <__udivmodsi4>
    391c:	da 01       	movw	r26, r20
    391e:	c9 01       	movw	r24, r18
    3920:	01 97       	sbiw	r24, 0x01	; 1
    3922:	9a 83       	std	Y+2, r25	; 0x02
    3924:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3926:	e0 e4       	ldi	r30, 0x40	; 64
    3928:	f0 e0       	ldi	r31, 0x00	; 0
    392a:	89 81       	ldd	r24, Y+1	; 0x01
    392c:	9a 81       	ldd	r25, Y+2	; 0x02
    392e:	89 2f       	mov	r24, r25
    3930:	99 27       	eor	r25, r25
    3932:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3934:	e9 e2       	ldi	r30, 0x29	; 41
    3936:	f0 e0       	ldi	r31, 0x00	; 0
    3938:	89 81       	ldd	r24, Y+1	; 0x01
    393a:	80 83       	st	Z, r24
}
    393c:	0f 90       	pop	r0
    393e:	0f 90       	pop	r0
    3940:	0f 90       	pop	r0
    3942:	0f 90       	pop	r0
    3944:	cf 91       	pop	r28
    3946:	df 91       	pop	r29
    3948:	08 95       	ret

0000394a <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    394a:	df 93       	push	r29
    394c:	cf 93       	push	r28
    394e:	0f 92       	push	r0
    3950:	cd b7       	in	r28, 0x3d	; 61
    3952:	de b7       	in	r29, 0x3e	; 62
    3954:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3956:	eb e2       	ldi	r30, 0x2B	; 43
    3958:	f0 e0       	ldi	r31, 0x00	; 0
    395a:	80 81       	ld	r24, Z
    395c:	88 2f       	mov	r24, r24
    395e:	90 e0       	ldi	r25, 0x00	; 0
    3960:	80 72       	andi	r24, 0x20	; 32
    3962:	90 70       	andi	r25, 0x00	; 0
    3964:	00 97       	sbiw	r24, 0x00	; 0
    3966:	b9 f3       	breq	.-18     	; 0x3956 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3968:	ec e2       	ldi	r30, 0x2C	; 44
    396a:	f0 e0       	ldi	r31, 0x00	; 0
    396c:	89 81       	ldd	r24, Y+1	; 0x01
    396e:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3970:	0f 90       	pop	r0
    3972:	cf 91       	pop	r28
    3974:	df 91       	pop	r29
    3976:	08 95       	ret

00003978 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3978:	df 93       	push	r29
    397a:	cf 93       	push	r28
    397c:	cd b7       	in	r28, 0x3d	; 61
    397e:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3980:	eb e2       	ldi	r30, 0x2B	; 43
    3982:	f0 e0       	ldi	r31, 0x00	; 0
    3984:	80 81       	ld	r24, Z
    3986:	88 23       	and	r24, r24
    3988:	dc f7       	brge	.-10     	; 0x3980 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    398a:	ec e2       	ldi	r30, 0x2C	; 44
    398c:	f0 e0       	ldi	r31, 0x00	; 0
    398e:	80 81       	ld	r24, Z
}
    3990:	cf 91       	pop	r28
    3992:	df 91       	pop	r29
    3994:	08 95       	ret

00003996 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3996:	df 93       	push	r29
    3998:	cf 93       	push	r28
    399a:	00 d0       	rcall	.+0      	; 0x399c <UART_sendString+0x6>
    399c:	0f 92       	push	r0
    399e:	cd b7       	in	r28, 0x3d	; 61
    39a0:	de b7       	in	r29, 0x3e	; 62
    39a2:	9b 83       	std	Y+3, r25	; 0x03
    39a4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    39a6:	19 82       	std	Y+1, r1	; 0x01
    39a8:	0e c0       	rjmp	.+28     	; 0x39c6 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    39aa:	89 81       	ldd	r24, Y+1	; 0x01
    39ac:	28 2f       	mov	r18, r24
    39ae:	30 e0       	ldi	r19, 0x00	; 0
    39b0:	8a 81       	ldd	r24, Y+2	; 0x02
    39b2:	9b 81       	ldd	r25, Y+3	; 0x03
    39b4:	fc 01       	movw	r30, r24
    39b6:	e2 0f       	add	r30, r18
    39b8:	f3 1f       	adc	r31, r19
    39ba:	80 81       	ld	r24, Z
    39bc:	0e 94 a5 1c 	call	0x394a	; 0x394a <UART_sendByte>
		i++;
    39c0:	89 81       	ldd	r24, Y+1	; 0x01
    39c2:	8f 5f       	subi	r24, 0xFF	; 255
    39c4:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    39c6:	89 81       	ldd	r24, Y+1	; 0x01
    39c8:	28 2f       	mov	r18, r24
    39ca:	30 e0       	ldi	r19, 0x00	; 0
    39cc:	8a 81       	ldd	r24, Y+2	; 0x02
    39ce:	9b 81       	ldd	r25, Y+3	; 0x03
    39d0:	fc 01       	movw	r30, r24
    39d2:	e2 0f       	add	r30, r18
    39d4:	f3 1f       	adc	r31, r19
    39d6:	80 81       	ld	r24, Z
    39d8:	88 23       	and	r24, r24
    39da:	39 f7       	brne	.-50     	; 0x39aa <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    39dc:	0f 90       	pop	r0
    39de:	0f 90       	pop	r0
    39e0:	0f 90       	pop	r0
    39e2:	cf 91       	pop	r28
    39e4:	df 91       	pop	r29
    39e6:	08 95       	ret

000039e8 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    39e8:	0f 93       	push	r16
    39ea:	1f 93       	push	r17
    39ec:	df 93       	push	r29
    39ee:	cf 93       	push	r28
    39f0:	00 d0       	rcall	.+0      	; 0x39f2 <UART_receiveString+0xa>
    39f2:	0f 92       	push	r0
    39f4:	cd b7       	in	r28, 0x3d	; 61
    39f6:	de b7       	in	r29, 0x3e	; 62
    39f8:	9b 83       	std	Y+3, r25	; 0x03
    39fa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    39fc:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    39fe:	89 81       	ldd	r24, Y+1	; 0x01
    3a00:	28 2f       	mov	r18, r24
    3a02:	30 e0       	ldi	r19, 0x00	; 0
    3a04:	8a 81       	ldd	r24, Y+2	; 0x02
    3a06:	9b 81       	ldd	r25, Y+3	; 0x03
    3a08:	8c 01       	movw	r16, r24
    3a0a:	02 0f       	add	r16, r18
    3a0c:	13 1f       	adc	r17, r19
    3a0e:	0e 94 bc 1c 	call	0x3978	; 0x3978 <UART_recieveByte>
    3a12:	f8 01       	movw	r30, r16
    3a14:	80 83       	st	Z, r24
    3a16:	0f c0       	rjmp	.+30     	; 0x3a36 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3a18:	89 81       	ldd	r24, Y+1	; 0x01
    3a1a:	8f 5f       	subi	r24, 0xFF	; 255
    3a1c:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3a1e:	89 81       	ldd	r24, Y+1	; 0x01
    3a20:	28 2f       	mov	r18, r24
    3a22:	30 e0       	ldi	r19, 0x00	; 0
    3a24:	8a 81       	ldd	r24, Y+2	; 0x02
    3a26:	9b 81       	ldd	r25, Y+3	; 0x03
    3a28:	8c 01       	movw	r16, r24
    3a2a:	02 0f       	add	r16, r18
    3a2c:	13 1f       	adc	r17, r19
    3a2e:	0e 94 bc 1c 	call	0x3978	; 0x3978 <UART_recieveByte>
    3a32:	f8 01       	movw	r30, r16
    3a34:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3a36:	89 81       	ldd	r24, Y+1	; 0x01
    3a38:	28 2f       	mov	r18, r24
    3a3a:	30 e0       	ldi	r19, 0x00	; 0
    3a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a3e:	9b 81       	ldd	r25, Y+3	; 0x03
    3a40:	fc 01       	movw	r30, r24
    3a42:	e2 0f       	add	r30, r18
    3a44:	f3 1f       	adc	r31, r19
    3a46:	80 81       	ld	r24, Z
    3a48:	83 32       	cpi	r24, 0x23	; 35
    3a4a:	31 f7       	brne	.-52     	; 0x3a18 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3a4c:	89 81       	ldd	r24, Y+1	; 0x01
    3a4e:	28 2f       	mov	r18, r24
    3a50:	30 e0       	ldi	r19, 0x00	; 0
    3a52:	8a 81       	ldd	r24, Y+2	; 0x02
    3a54:	9b 81       	ldd	r25, Y+3	; 0x03
    3a56:	fc 01       	movw	r30, r24
    3a58:	e2 0f       	add	r30, r18
    3a5a:	f3 1f       	adc	r31, r19
    3a5c:	10 82       	st	Z, r1
}
    3a5e:	0f 90       	pop	r0
    3a60:	0f 90       	pop	r0
    3a62:	0f 90       	pop	r0
    3a64:	cf 91       	pop	r28
    3a66:	df 91       	pop	r29
    3a68:	1f 91       	pop	r17
    3a6a:	0f 91       	pop	r16
    3a6c:	08 95       	ret

00003a6e <__udivmodsi4>:
    3a6e:	a1 e2       	ldi	r26, 0x21	; 33
    3a70:	1a 2e       	mov	r1, r26
    3a72:	aa 1b       	sub	r26, r26
    3a74:	bb 1b       	sub	r27, r27
    3a76:	fd 01       	movw	r30, r26
    3a78:	0d c0       	rjmp	.+26     	; 0x3a94 <__udivmodsi4_ep>

00003a7a <__udivmodsi4_loop>:
    3a7a:	aa 1f       	adc	r26, r26
    3a7c:	bb 1f       	adc	r27, r27
    3a7e:	ee 1f       	adc	r30, r30
    3a80:	ff 1f       	adc	r31, r31
    3a82:	a2 17       	cp	r26, r18
    3a84:	b3 07       	cpc	r27, r19
    3a86:	e4 07       	cpc	r30, r20
    3a88:	f5 07       	cpc	r31, r21
    3a8a:	20 f0       	brcs	.+8      	; 0x3a94 <__udivmodsi4_ep>
    3a8c:	a2 1b       	sub	r26, r18
    3a8e:	b3 0b       	sbc	r27, r19
    3a90:	e4 0b       	sbc	r30, r20
    3a92:	f5 0b       	sbc	r31, r21

00003a94 <__udivmodsi4_ep>:
    3a94:	66 1f       	adc	r22, r22
    3a96:	77 1f       	adc	r23, r23
    3a98:	88 1f       	adc	r24, r24
    3a9a:	99 1f       	adc	r25, r25
    3a9c:	1a 94       	dec	r1
    3a9e:	69 f7       	brne	.-38     	; 0x3a7a <__udivmodsi4_loop>
    3aa0:	60 95       	com	r22
    3aa2:	70 95       	com	r23
    3aa4:	80 95       	com	r24
    3aa6:	90 95       	com	r25
    3aa8:	9b 01       	movw	r18, r22
    3aaa:	ac 01       	movw	r20, r24
    3aac:	bd 01       	movw	r22, r26
    3aae:	cf 01       	movw	r24, r30
    3ab0:	08 95       	ret

00003ab2 <__prologue_saves__>:
    3ab2:	2f 92       	push	r2
    3ab4:	3f 92       	push	r3
    3ab6:	4f 92       	push	r4
    3ab8:	5f 92       	push	r5
    3aba:	6f 92       	push	r6
    3abc:	7f 92       	push	r7
    3abe:	8f 92       	push	r8
    3ac0:	9f 92       	push	r9
    3ac2:	af 92       	push	r10
    3ac4:	bf 92       	push	r11
    3ac6:	cf 92       	push	r12
    3ac8:	df 92       	push	r13
    3aca:	ef 92       	push	r14
    3acc:	ff 92       	push	r15
    3ace:	0f 93       	push	r16
    3ad0:	1f 93       	push	r17
    3ad2:	cf 93       	push	r28
    3ad4:	df 93       	push	r29
    3ad6:	cd b7       	in	r28, 0x3d	; 61
    3ad8:	de b7       	in	r29, 0x3e	; 62
    3ada:	ca 1b       	sub	r28, r26
    3adc:	db 0b       	sbc	r29, r27
    3ade:	0f b6       	in	r0, 0x3f	; 63
    3ae0:	f8 94       	cli
    3ae2:	de bf       	out	0x3e, r29	; 62
    3ae4:	0f be       	out	0x3f, r0	; 63
    3ae6:	cd bf       	out	0x3d, r28	; 61
    3ae8:	09 94       	ijmp

00003aea <__epilogue_restores__>:
    3aea:	2a 88       	ldd	r2, Y+18	; 0x12
    3aec:	39 88       	ldd	r3, Y+17	; 0x11
    3aee:	48 88       	ldd	r4, Y+16	; 0x10
    3af0:	5f 84       	ldd	r5, Y+15	; 0x0f
    3af2:	6e 84       	ldd	r6, Y+14	; 0x0e
    3af4:	7d 84       	ldd	r7, Y+13	; 0x0d
    3af6:	8c 84       	ldd	r8, Y+12	; 0x0c
    3af8:	9b 84       	ldd	r9, Y+11	; 0x0b
    3afa:	aa 84       	ldd	r10, Y+10	; 0x0a
    3afc:	b9 84       	ldd	r11, Y+9	; 0x09
    3afe:	c8 84       	ldd	r12, Y+8	; 0x08
    3b00:	df 80       	ldd	r13, Y+7	; 0x07
    3b02:	ee 80       	ldd	r14, Y+6	; 0x06
    3b04:	fd 80       	ldd	r15, Y+5	; 0x05
    3b06:	0c 81       	ldd	r16, Y+4	; 0x04
    3b08:	1b 81       	ldd	r17, Y+3	; 0x03
    3b0a:	aa 81       	ldd	r26, Y+2	; 0x02
    3b0c:	b9 81       	ldd	r27, Y+1	; 0x01
    3b0e:	ce 0f       	add	r28, r30
    3b10:	d1 1d       	adc	r29, r1
    3b12:	0f b6       	in	r0, 0x3f	; 63
    3b14:	f8 94       	cli
    3b16:	de bf       	out	0x3e, r29	; 62
    3b18:	0f be       	out	0x3f, r0	; 63
    3b1a:	cd bf       	out	0x3d, r28	; 61
    3b1c:	ed 01       	movw	r28, r26
    3b1e:	08 95       	ret

00003b20 <itoa>:
    3b20:	fb 01       	movw	r30, r22
    3b22:	9f 01       	movw	r18, r30
    3b24:	e8 94       	clt
    3b26:	42 30       	cpi	r20, 0x02	; 2
    3b28:	c4 f0       	brlt	.+48     	; 0x3b5a <itoa+0x3a>
    3b2a:	45 32       	cpi	r20, 0x25	; 37
    3b2c:	b4 f4       	brge	.+44     	; 0x3b5a <itoa+0x3a>
    3b2e:	4a 30       	cpi	r20, 0x0A	; 10
    3b30:	29 f4       	brne	.+10     	; 0x3b3c <itoa+0x1c>
    3b32:	97 fb       	bst	r25, 7
    3b34:	1e f4       	brtc	.+6      	; 0x3b3c <itoa+0x1c>
    3b36:	90 95       	com	r25
    3b38:	81 95       	neg	r24
    3b3a:	9f 4f       	sbci	r25, 0xFF	; 255
    3b3c:	64 2f       	mov	r22, r20
    3b3e:	77 27       	eor	r23, r23
    3b40:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__udivmodhi4>
    3b44:	80 5d       	subi	r24, 0xD0	; 208
    3b46:	8a 33       	cpi	r24, 0x3A	; 58
    3b48:	0c f0       	brlt	.+2      	; 0x3b4c <itoa+0x2c>
    3b4a:	89 5d       	subi	r24, 0xD9	; 217
    3b4c:	81 93       	st	Z+, r24
    3b4e:	cb 01       	movw	r24, r22
    3b50:	00 97       	sbiw	r24, 0x00	; 0
    3b52:	a1 f7       	brne	.-24     	; 0x3b3c <itoa+0x1c>
    3b54:	16 f4       	brtc	.+4      	; 0x3b5a <itoa+0x3a>
    3b56:	5d e2       	ldi	r21, 0x2D	; 45
    3b58:	51 93       	st	Z+, r21
    3b5a:	10 82       	st	Z, r1
    3b5c:	c9 01       	movw	r24, r18
    3b5e:	0c 94 b1 1d 	jmp	0x3b62	; 0x3b62 <strrev>

00003b62 <strrev>:
    3b62:	dc 01       	movw	r26, r24
    3b64:	fc 01       	movw	r30, r24
    3b66:	67 2f       	mov	r22, r23
    3b68:	71 91       	ld	r23, Z+
    3b6a:	77 23       	and	r23, r23
    3b6c:	e1 f7       	brne	.-8      	; 0x3b66 <strrev+0x4>
    3b6e:	32 97       	sbiw	r30, 0x02	; 2
    3b70:	04 c0       	rjmp	.+8      	; 0x3b7a <strrev+0x18>
    3b72:	7c 91       	ld	r23, X
    3b74:	6d 93       	st	X+, r22
    3b76:	70 83       	st	Z, r23
    3b78:	62 91       	ld	r22, -Z
    3b7a:	ae 17       	cp	r26, r30
    3b7c:	bf 07       	cpc	r27, r31
    3b7e:	c8 f3       	brcs	.-14     	; 0x3b72 <strrev+0x10>
    3b80:	08 95       	ret

00003b82 <__udivmodhi4>:
    3b82:	aa 1b       	sub	r26, r26
    3b84:	bb 1b       	sub	r27, r27
    3b86:	51 e1       	ldi	r21, 0x11	; 17
    3b88:	07 c0       	rjmp	.+14     	; 0x3b98 <__udivmodhi4_ep>

00003b8a <__udivmodhi4_loop>:
    3b8a:	aa 1f       	adc	r26, r26
    3b8c:	bb 1f       	adc	r27, r27
    3b8e:	a6 17       	cp	r26, r22
    3b90:	b7 07       	cpc	r27, r23
    3b92:	10 f0       	brcs	.+4      	; 0x3b98 <__udivmodhi4_ep>
    3b94:	a6 1b       	sub	r26, r22
    3b96:	b7 0b       	sbc	r27, r23

00003b98 <__udivmodhi4_ep>:
    3b98:	88 1f       	adc	r24, r24
    3b9a:	99 1f       	adc	r25, r25
    3b9c:	5a 95       	dec	r21
    3b9e:	a9 f7       	brne	.-22     	; 0x3b8a <__udivmodhi4_loop>
    3ba0:	80 95       	com	r24
    3ba2:	90 95       	com	r25
    3ba4:	bc 01       	movw	r22, r24
    3ba6:	cd 01       	movw	r24, r26
    3ba8:	08 95       	ret

00003baa <_exit>:
    3baa:	f8 94       	cli

00003bac <__stop_program>:
    3bac:	ff cf       	rjmp	.-2      	; 0x3bac <__stop_program>
