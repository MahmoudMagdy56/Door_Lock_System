
MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000026b2  00002746  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800076  00800076  0000275c  2**0
                  ALLOC
  3 .stab         00002700  00000000  00000000  0000275c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001375  00000000  00000000  00004e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000061d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006311  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006481  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000080ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008fb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009d64  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a151  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a91f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 e0 10 	jmp	0x21c0	; 0x21c0 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 ad 10 	jmp	0x215a	; 0x215a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 eb       	ldi	r30, 0xB2	; 178
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 37       	cpi	r26, 0x79	; 121
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4f 06 	call	0xc9e	; 0xc9e <main>
      8a:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 20 13 	jmp	0x2640	; 0x2640 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3c 13 	jmp	0x2678	; 0x2678 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2c 13 	jmp	0x2658	; 0x2658 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 48 13 	jmp	0x2690	; 0x2690 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2c 13 	jmp	0x2658	; 0x2658 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 48 13 	jmp	0x2690	; 0x2690 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 20 13 	jmp	0x2640	; 0x2640 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3c 13 	jmp	0x2678	; 0x2678 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2c 13 	jmp	0x2658	; 0x2658 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 48 13 	jmp	0x2690	; 0x2690 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 2c 13 	jmp	0x2658	; 0x2658 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 48 13 	jmp	0x2690	; 0x2690 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 2c 13 	jmp	0x2658	; 0x2658 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 48 13 	jmp	0x2690	; 0x2690 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 30 13 	jmp	0x2660	; 0x2660 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 4c 13 	jmp	0x2698	; 0x2698 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <receive_password>:
/*
 * Description :
 * Function responsible for receiving the password from MC1
 */
void receive_password(uint8 *Password)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	61 97       	sbiw	r28, 0x11	; 17
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	de bf       	out	0x3e, r29	; 62
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	cd bf       	out	0x3d, r28	; 61
     b5e:	99 8b       	std	Y+17, r25	; 0x11
     b60:	88 8b       	std	Y+16, r24	; 0x10
	uint8 counter ;
	for(counter = 0 ; counter < 5  ; counter++)
     b62:	1f 86       	std	Y+15, r1	; 0x0f
     b64:	81 c0       	rjmp	.+258    	; 0xc68 <receive_password+0x122>
	{
		Password[counter] = UART_recieveByte();
     b66:	8f 85       	ldd	r24, Y+15	; 0x0f
     b68:	28 2f       	mov	r18, r24
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	88 89       	ldd	r24, Y+16	; 0x10
     b6e:	99 89       	ldd	r25, Y+17	; 0x11
     b70:	8c 01       	movw	r16, r24
     b72:	02 0f       	add	r16, r18
     b74:	13 1f       	adc	r17, r19
     b76:	0e 94 6f 12 	call	0x24de	; 0x24de <UART_recieveByte>
     b7a:	f8 01       	movw	r30, r16
     b7c:	80 83       	st	Z, r24
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	a0 e7       	ldi	r26, 0x70	; 112
     b84:	b1 e4       	ldi	r27, 0x41	; 65
     b86:	8b 87       	std	Y+11, r24	; 0x0b
     b88:	9c 87       	std	Y+12, r25	; 0x0c
     b8a:	ad 87       	std	Y+13, r26	; 0x0d
     b8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b8e:	6b 85       	ldd	r22, Y+11	; 0x0b
     b90:	7c 85       	ldd	r23, Y+12	; 0x0c
     b92:	8d 85       	ldd	r24, Y+13	; 0x0d
     b94:	9e 85       	ldd	r25, Y+14	; 0x0e
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	4a ef       	ldi	r20, 0xFA	; 250
     b9c:	54 e4       	ldi	r21, 0x44	; 68
     b9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ba2:	dc 01       	movw	r26, r24
     ba4:	cb 01       	movw	r24, r22
     ba6:	8f 83       	std	Y+7, r24	; 0x07
     ba8:	98 87       	std	Y+8, r25	; 0x08
     baa:	a9 87       	std	Y+9, r26	; 0x09
     bac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bae:	6f 81       	ldd	r22, Y+7	; 0x07
     bb0:	78 85       	ldd	r23, Y+8	; 0x08
     bb2:	89 85       	ldd	r24, Y+9	; 0x09
     bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
     bb6:	20 e0       	ldi	r18, 0x00	; 0
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	40 e8       	ldi	r20, 0x80	; 128
     bbc:	5f e3       	ldi	r21, 0x3F	; 63
     bbe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bc2:	88 23       	and	r24, r24
     bc4:	2c f4       	brge	.+10     	; 0xbd0 <receive_password+0x8a>
		__ticks = 1;
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	9e 83       	std	Y+6, r25	; 0x06
     bcc:	8d 83       	std	Y+5, r24	; 0x05
     bce:	3f c0       	rjmp	.+126    	; 0xc4e <receive_password+0x108>
	else if (__tmp > 65535)
     bd0:	6f 81       	ldd	r22, Y+7	; 0x07
     bd2:	78 85       	ldd	r23, Y+8	; 0x08
     bd4:	89 85       	ldd	r24, Y+9	; 0x09
     bd6:	9a 85       	ldd	r25, Y+10	; 0x0a
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	3f ef       	ldi	r19, 0xFF	; 255
     bdc:	4f e7       	ldi	r20, 0x7F	; 127
     bde:	57 e4       	ldi	r21, 0x47	; 71
     be0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be4:	18 16       	cp	r1, r24
     be6:	4c f5       	brge	.+82     	; 0xc3a <receive_password+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     be8:	6b 85       	ldd	r22, Y+11	; 0x0b
     bea:	7c 85       	ldd	r23, Y+12	; 0x0c
     bec:	8d 85       	ldd	r24, Y+13	; 0x0d
     bee:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	40 e2       	ldi	r20, 0x20	; 32
     bf6:	51 e4       	ldi	r21, 0x41	; 65
     bf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bfc:	dc 01       	movw	r26, r24
     bfe:	cb 01       	movw	r24, r22
     c00:	bc 01       	movw	r22, r24
     c02:	cd 01       	movw	r24, r26
     c04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c08:	dc 01       	movw	r26, r24
     c0a:	cb 01       	movw	r24, r22
     c0c:	9e 83       	std	Y+6, r25	; 0x06
     c0e:	8d 83       	std	Y+5, r24	; 0x05
     c10:	0f c0       	rjmp	.+30     	; 0xc30 <receive_password+0xea>
     c12:	88 ec       	ldi	r24, 0xC8	; 200
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	9c 83       	std	Y+4, r25	; 0x04
     c18:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c1a:	8b 81       	ldd	r24, Y+3	; 0x03
     c1c:	9c 81       	ldd	r25, Y+4	; 0x04
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	f1 f7       	brne	.-4      	; 0xc1e <receive_password+0xd8>
     c22:	9c 83       	std	Y+4, r25	; 0x04
     c24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c26:	8d 81       	ldd	r24, Y+5	; 0x05
     c28:	9e 81       	ldd	r25, Y+6	; 0x06
     c2a:	01 97       	sbiw	r24, 0x01	; 1
     c2c:	9e 83       	std	Y+6, r25	; 0x06
     c2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c30:	8d 81       	ldd	r24, Y+5	; 0x05
     c32:	9e 81       	ldd	r25, Y+6	; 0x06
     c34:	00 97       	sbiw	r24, 0x00	; 0
     c36:	69 f7       	brne	.-38     	; 0xc12 <receive_password+0xcc>
     c38:	14 c0       	rjmp	.+40     	; 0xc62 <receive_password+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c3a:	6f 81       	ldd	r22, Y+7	; 0x07
     c3c:	78 85       	ldd	r23, Y+8	; 0x08
     c3e:	89 85       	ldd	r24, Y+9	; 0x09
     c40:	9a 85       	ldd	r25, Y+10	; 0x0a
     c42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c46:	dc 01       	movw	r26, r24
     c48:	cb 01       	movw	r24, r22
     c4a:	9e 83       	std	Y+6, r25	; 0x06
     c4c:	8d 83       	std	Y+5, r24	; 0x05
     c4e:	8d 81       	ldd	r24, Y+5	; 0x05
     c50:	9e 81       	ldd	r25, Y+6	; 0x06
     c52:	9a 83       	std	Y+2, r25	; 0x02
     c54:	89 83       	std	Y+1, r24	; 0x01
     c56:	89 81       	ldd	r24, Y+1	; 0x01
     c58:	9a 81       	ldd	r25, Y+2	; 0x02
     c5a:	01 97       	sbiw	r24, 0x01	; 1
     c5c:	f1 f7       	brne	.-4      	; 0xc5a <receive_password+0x114>
     c5e:	9a 83       	std	Y+2, r25	; 0x02
     c60:	89 83       	std	Y+1, r24	; 0x01
 * Function responsible for receiving the password from MC1
 */
void receive_password(uint8 *Password)
{
	uint8 counter ;
	for(counter = 0 ; counter < 5  ; counter++)
     c62:	8f 85       	ldd	r24, Y+15	; 0x0f
     c64:	8f 5f       	subi	r24, 0xFF	; 255
     c66:	8f 87       	std	Y+15, r24	; 0x0f
     c68:	8f 85       	ldd	r24, Y+15	; 0x0f
     c6a:	85 30       	cpi	r24, 0x05	; 5
     c6c:	08 f4       	brcc	.+2      	; 0xc70 <receive_password+0x12a>
     c6e:	7b cf       	rjmp	.-266    	; 0xb66 <receive_password+0x20>
	{
		Password[counter] = UART_recieveByte();
		_delay_ms(15);

	}
}
     c70:	61 96       	adiw	r28, 0x11	; 17
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	cf 91       	pop	r28
     c7e:	df 91       	pop	r29
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	08 95       	ret

00000c86 <timer1_tick>:

/*
 * Description :
 * Function responsible for increment timer1 ticks
 */
void timer1_tick(void){
     c86:	df 93       	push	r29
     c88:	cf 93       	push	r28
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62
	Timer1Ticks++;
     c8e:	80 91 76 00 	lds	r24, 0x0076
     c92:	8f 5f       	subi	r24, 0xFF	; 255
     c94:	80 93 76 00 	sts	0x0076, r24
}
     c98:	cf 91       	pop	r28
     c9a:	df 91       	pop	r29
     c9c:	08 95       	ret

00000c9e <main>:

/*************************************************************************************/

int main()
{
     c9e:	0f 93       	push	r16
     ca0:	1f 93       	push	r17
     ca2:	df 93       	push	r29
     ca4:	cf 93       	push	r28
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	c0 58       	subi	r28, 0x80	; 128
     cac:	d0 40       	sbci	r29, 0x00	; 0
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	f8 94       	cli
     cb2:	de bf       	out	0x3e, r29	; 62
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1<<7); /* Enable Interrupts */
     cb8:	af e5       	ldi	r26, 0x5F	; 95
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	ef e5       	ldi	r30, 0x5F	; 95
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	80 68       	ori	r24, 0x80	; 128
     cc4:	8c 93       	st	X, r24

	uint8 Password1[5],Password2[5];  /* For storing 2 passwords */
	uint8 PassIsSetFlag = 0; 	/* to check if the password setted successfully */
     cc6:	fe 01       	movw	r30, r28
     cc8:	e1 59       	subi	r30, 0x91	; 145
     cca:	ff 4f       	sbci	r31, 0xFF	; 255
     ccc:	10 82       	st	Z, r1
	uint8 PassIsMatching = 0;     /* to check if the two password matches */
     cce:	fe 01       	movw	r30, r28
     cd0:	ec 59       	subi	r30, 0x9C	; 156
     cd2:	ff 4f       	sbci	r31, 0xFF	; 255
     cd4:	10 82       	st	Z, r1

	uint8 TempVariable = 0;
     cd6:	fe 01       	movw	r30, r28
     cd8:	e0 59       	subi	r30, 0x90	; 144
     cda:	ff 4f       	sbci	r31, 0xFF	; 255
     cdc:	10 82       	st	Z, r1
	uint8 Counter = 0;
     cde:	fe 01       	movw	r30, r28
     ce0:	ed 59       	subi	r30, 0x9D	; 157
     ce2:	ff 4f       	sbci	r31, 0xFF	; 255
     ce4:	10 82       	st	Z, r1

	UART_ConfigType UART_Configuration = {UART_EIGHT_BIT_MODE , UART_DISABLE_PARITY ,
			UART_ONE_STOP_BIT , 9600 };
     ce6:	ce 01       	movw	r24, r28
     ce8:	8f 58       	subi	r24, 0x8F	; 143
     cea:	9f 4f       	sbci	r25, 0xFF	; 255
     cec:	ee 96       	adiw	r28, 0x3e	; 62
     cee:	9f af       	std	Y+63, r25	; 0x3f
     cf0:	8e af       	std	Y+62, r24	; 0x3e
     cf2:	ee 97       	sbiw	r28, 0x3e	; 62
     cf4:	2e e6       	ldi	r18, 0x6E	; 110
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	c2 58       	subi	r28, 0x82	; 130
     cfa:	df 4f       	sbci	r29, 0xFF	; 255
     cfc:	39 83       	std	Y+1, r19	; 0x01
     cfe:	28 83       	st	Y, r18
     d00:	ce 57       	subi	r28, 0x7E	; 126
     d02:	d0 40       	sbci	r29, 0x00	; 0
     d04:	37 e0       	ldi	r19, 0x07	; 7
     d06:	c0 58       	subi	r28, 0x80	; 128
     d08:	df 4f       	sbci	r29, 0xFF	; 255
     d0a:	38 83       	st	Y, r19
     d0c:	c0 58       	subi	r28, 0x80	; 128
     d0e:	d0 40       	sbci	r29, 0x00	; 0
     d10:	c2 58       	subi	r28, 0x82	; 130
     d12:	df 4f       	sbci	r29, 0xFF	; 255
     d14:	e8 81       	ld	r30, Y
     d16:	f9 81       	ldd	r31, Y+1	; 0x01
     d18:	ce 57       	subi	r28, 0x7E	; 126
     d1a:	d0 40       	sbci	r29, 0x00	; 0
     d1c:	00 80       	ld	r0, Z
     d1e:	c2 58       	subi	r28, 0x82	; 130
     d20:	df 4f       	sbci	r29, 0xFF	; 255
     d22:	28 81       	ld	r18, Y
     d24:	39 81       	ldd	r19, Y+1	; 0x01
     d26:	ce 57       	subi	r28, 0x7E	; 126
     d28:	d0 40       	sbci	r29, 0x00	; 0
     d2a:	2f 5f       	subi	r18, 0xFF	; 255
     d2c:	3f 4f       	sbci	r19, 0xFF	; 255
     d2e:	c2 58       	subi	r28, 0x82	; 130
     d30:	df 4f       	sbci	r29, 0xFF	; 255
     d32:	39 83       	std	Y+1, r19	; 0x01
     d34:	28 83       	st	Y, r18
     d36:	ce 57       	subi	r28, 0x7E	; 126
     d38:	d0 40       	sbci	r29, 0x00	; 0
     d3a:	ee 96       	adiw	r28, 0x3e	; 62
     d3c:	ee ad       	ldd	r30, Y+62	; 0x3e
     d3e:	ff ad       	ldd	r31, Y+63	; 0x3f
     d40:	ee 97       	sbiw	r28, 0x3e	; 62
     d42:	00 82       	st	Z, r0
     d44:	ee 96       	adiw	r28, 0x3e	; 62
     d46:	2e ad       	ldd	r18, Y+62	; 0x3e
     d48:	3f ad       	ldd	r19, Y+63	; 0x3f
     d4a:	ee 97       	sbiw	r28, 0x3e	; 62
     d4c:	2f 5f       	subi	r18, 0xFF	; 255
     d4e:	3f 4f       	sbci	r19, 0xFF	; 255
     d50:	ee 96       	adiw	r28, 0x3e	; 62
     d52:	3f af       	std	Y+63, r19	; 0x3f
     d54:	2e af       	std	Y+62, r18	; 0x3e
     d56:	ee 97       	sbiw	r28, 0x3e	; 62
     d58:	c0 58       	subi	r28, 0x80	; 128
     d5a:	df 4f       	sbci	r29, 0xFF	; 255
     d5c:	38 81       	ld	r19, Y
     d5e:	c0 58       	subi	r28, 0x80	; 128
     d60:	d0 40       	sbci	r29, 0x00	; 0
     d62:	31 50       	subi	r19, 0x01	; 1
     d64:	c0 58       	subi	r28, 0x80	; 128
     d66:	df 4f       	sbci	r29, 0xFF	; 255
     d68:	38 83       	st	Y, r19
     d6a:	c0 58       	subi	r28, 0x80	; 128
     d6c:	d0 40       	sbci	r29, 0x00	; 0
     d6e:	c0 58       	subi	r28, 0x80	; 128
     d70:	df 4f       	sbci	r29, 0xFF	; 255
     d72:	88 81       	ld	r24, Y
     d74:	c0 58       	subi	r28, 0x80	; 128
     d76:	d0 40       	sbci	r29, 0x00	; 0
     d78:	88 23       	and	r24, r24
     d7a:	51 f6       	brne	.-108    	; 0xd10 <main+0x72>

	TWI_ConfigType TWI_Configuration = {0x01 , BAUDRATE_400 };
     d7c:	fe 01       	movw	r30, r28
     d7e:	e8 58       	subi	r30, 0x88	; 136
     d80:	ff 4f       	sbci	r31, 0xFF	; 255
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	80 83       	st	Z, r24
     d86:	fe 01       	movw	r30, r28
     d88:	e8 58       	subi	r30, 0x88	; 136
     d8a:	ff 4f       	sbci	r31, 0xFF	; 255
     d8c:	82 e0       	ldi	r24, 0x02	; 2
     d8e:	81 83       	std	Z+1, r24	; 0x01

	UART_init(&UART_Configuration);
     d90:	ce 01       	movw	r24, r28
     d92:	8f 58       	subi	r24, 0x8F	; 143
     d94:	9f 4f       	sbci	r25, 0xFF	; 255
     d96:	0e 94 04 12 	call	0x2408	; 0x2408 <UART_init>
	TWI_init(&TWI_Configuration);
     d9a:	ce 01       	movw	r24, r28
     d9c:	88 58       	subi	r24, 0x88	; 136
     d9e:	9f 4f       	sbci	r25, 0xFF	; 255
     da0:	0e 94 7d 11 	call	0x22fa	; 0x22fa <TWI_init>

	DcMotor_Init();
     da4:	0e 94 3c 0c 	call	0x1878	; 0x1878 <DcMotor_Init>
	BUZZER_Init();
     da8:	0e 94 13 0c 	call	0x1826	; 0x1826 <BUZZER_Init>


	Timer1_setCallBack(&timer1_tick);
     dac:	83 e4       	ldi	r24, 0x43	; 67
     dae:	96 e0       	ldi	r25, 0x06	; 6
     db0:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <Timer1_setCallBack>

	EEPROM_writeByte(0xFF , 0);
     db4:	8f ef       	ldi	r24, 0xFF	; 255
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	60 e0       	ldi	r22, 0x00	; 0
     dba:	0e 94 9c 0c 	call	0x1938	; 0x1938 <EEPROM_writeByte>
     dbe:	fe 01       	movw	r30, r28
     dc0:	e1 5a       	subi	r30, 0xA1	; 161
     dc2:	ff 4f       	sbci	r31, 0xFF	; 255
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	a0 e7       	ldi	r26, 0x70	; 112
     dca:	b1 e4       	ldi	r27, 0x41	; 65
     dcc:	80 83       	st	Z, r24
     dce:	91 83       	std	Z+1, r25	; 0x01
     dd0:	a2 83       	std	Z+2, r26	; 0x02
     dd2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dd4:	8e 01       	movw	r16, r28
     dd6:	05 5a       	subi	r16, 0xA5	; 165
     dd8:	1f 4f       	sbci	r17, 0xFF	; 255
     dda:	fe 01       	movw	r30, r28
     ddc:	e1 5a       	subi	r30, 0xA1	; 161
     dde:	ff 4f       	sbci	r31, 0xFF	; 255
     de0:	60 81       	ld	r22, Z
     de2:	71 81       	ldd	r23, Z+1	; 0x01
     de4:	82 81       	ldd	r24, Z+2	; 0x02
     de6:	93 81       	ldd	r25, Z+3	; 0x03
     de8:	20 e0       	ldi	r18, 0x00	; 0
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	4a ef       	ldi	r20, 0xFA	; 250
     dee:	54 e4       	ldi	r21, 0x44	; 68
     df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df4:	dc 01       	movw	r26, r24
     df6:	cb 01       	movw	r24, r22
     df8:	f8 01       	movw	r30, r16
     dfa:	80 83       	st	Z, r24
     dfc:	91 83       	std	Z+1, r25	; 0x01
     dfe:	a2 83       	std	Z+2, r26	; 0x02
     e00:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e02:	fe 01       	movw	r30, r28
     e04:	e5 5a       	subi	r30, 0xA5	; 165
     e06:	ff 4f       	sbci	r31, 0xFF	; 255
     e08:	60 81       	ld	r22, Z
     e0a:	71 81       	ldd	r23, Z+1	; 0x01
     e0c:	82 81       	ldd	r24, Z+2	; 0x02
     e0e:	93 81       	ldd	r25, Z+3	; 0x03
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	40 e8       	ldi	r20, 0x80	; 128
     e16:	5f e3       	ldi	r21, 0x3F	; 63
     e18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e1c:	88 23       	and	r24, r24
     e1e:	44 f4       	brge	.+16     	; 0xe30 <main+0x192>
		__ticks = 1;
     e20:	fe 01       	movw	r30, r28
     e22:	e7 5a       	subi	r30, 0xA7	; 167
     e24:	ff 4f       	sbci	r31, 0xFF	; 255
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	91 83       	std	Z+1, r25	; 0x01
     e2c:	80 83       	st	Z, r24
     e2e:	64 c0       	rjmp	.+200    	; 0xef8 <main+0x25a>
	else if (__tmp > 65535)
     e30:	fe 01       	movw	r30, r28
     e32:	e5 5a       	subi	r30, 0xA5	; 165
     e34:	ff 4f       	sbci	r31, 0xFF	; 255
     e36:	60 81       	ld	r22, Z
     e38:	71 81       	ldd	r23, Z+1	; 0x01
     e3a:	82 81       	ldd	r24, Z+2	; 0x02
     e3c:	93 81       	ldd	r25, Z+3	; 0x03
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	3f ef       	ldi	r19, 0xFF	; 255
     e42:	4f e7       	ldi	r20, 0x7F	; 127
     e44:	57 e4       	ldi	r21, 0x47	; 71
     e46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e4a:	18 16       	cp	r1, r24
     e4c:	0c f0       	brlt	.+2      	; 0xe50 <main+0x1b2>
     e4e:	43 c0       	rjmp	.+134    	; 0xed6 <main+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e50:	fe 01       	movw	r30, r28
     e52:	e1 5a       	subi	r30, 0xA1	; 161
     e54:	ff 4f       	sbci	r31, 0xFF	; 255
     e56:	60 81       	ld	r22, Z
     e58:	71 81       	ldd	r23, Z+1	; 0x01
     e5a:	82 81       	ldd	r24, Z+2	; 0x02
     e5c:	93 81       	ldd	r25, Z+3	; 0x03
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	40 e2       	ldi	r20, 0x20	; 32
     e64:	51 e4       	ldi	r21, 0x41	; 65
     e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e6a:	dc 01       	movw	r26, r24
     e6c:	cb 01       	movw	r24, r22
     e6e:	8e 01       	movw	r16, r28
     e70:	07 5a       	subi	r16, 0xA7	; 167
     e72:	1f 4f       	sbci	r17, 0xFF	; 255
     e74:	bc 01       	movw	r22, r24
     e76:	cd 01       	movw	r24, r26
     e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e7c:	dc 01       	movw	r26, r24
     e7e:	cb 01       	movw	r24, r22
     e80:	f8 01       	movw	r30, r16
     e82:	91 83       	std	Z+1, r25	; 0x01
     e84:	80 83       	st	Z, r24
     e86:	1f c0       	rjmp	.+62     	; 0xec6 <main+0x228>
     e88:	fe 01       	movw	r30, r28
     e8a:	e9 5a       	subi	r30, 0xA9	; 169
     e8c:	ff 4f       	sbci	r31, 0xFF	; 255
     e8e:	88 ec       	ldi	r24, 0xC8	; 200
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	91 83       	std	Z+1, r25	; 0x01
     e94:	80 83       	st	Z, r24
     e96:	fe 01       	movw	r30, r28
     e98:	e9 5a       	subi	r30, 0xA9	; 169
     e9a:	ff 4f       	sbci	r31, 0xFF	; 255
     e9c:	80 81       	ld	r24, Z
     e9e:	91 81       	ldd	r25, Z+1	; 0x01
     ea0:	01 97       	sbiw	r24, 0x01	; 1
     ea2:	f1 f7       	brne	.-4      	; 0xea0 <main+0x202>
     ea4:	fe 01       	movw	r30, r28
     ea6:	e9 5a       	subi	r30, 0xA9	; 169
     ea8:	ff 4f       	sbci	r31, 0xFF	; 255
     eaa:	91 83       	std	Z+1, r25	; 0x01
     eac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eae:	de 01       	movw	r26, r28
     eb0:	a7 5a       	subi	r26, 0xA7	; 167
     eb2:	bf 4f       	sbci	r27, 0xFF	; 255
     eb4:	fe 01       	movw	r30, r28
     eb6:	e7 5a       	subi	r30, 0xA7	; 167
     eb8:	ff 4f       	sbci	r31, 0xFF	; 255
     eba:	80 81       	ld	r24, Z
     ebc:	91 81       	ldd	r25, Z+1	; 0x01
     ebe:	01 97       	sbiw	r24, 0x01	; 1
     ec0:	11 96       	adiw	r26, 0x01	; 1
     ec2:	9c 93       	st	X, r25
     ec4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ec6:	fe 01       	movw	r30, r28
     ec8:	e7 5a       	subi	r30, 0xA7	; 167
     eca:	ff 4f       	sbci	r31, 0xFF	; 255
     ecc:	80 81       	ld	r24, Z
     ece:	91 81       	ldd	r25, Z+1	; 0x01
     ed0:	00 97       	sbiw	r24, 0x00	; 0
     ed2:	d1 f6       	brne	.-76     	; 0xe88 <main+0x1ea>
     ed4:	27 c0       	rjmp	.+78     	; 0xf24 <main+0x286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ed6:	8e 01       	movw	r16, r28
     ed8:	07 5a       	subi	r16, 0xA7	; 167
     eda:	1f 4f       	sbci	r17, 0xFF	; 255
     edc:	fe 01       	movw	r30, r28
     ede:	e5 5a       	subi	r30, 0xA5	; 165
     ee0:	ff 4f       	sbci	r31, 0xFF	; 255
     ee2:	60 81       	ld	r22, Z
     ee4:	71 81       	ldd	r23, Z+1	; 0x01
     ee6:	82 81       	ldd	r24, Z+2	; 0x02
     ee8:	93 81       	ldd	r25, Z+3	; 0x03
     eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eee:	dc 01       	movw	r26, r24
     ef0:	cb 01       	movw	r24, r22
     ef2:	f8 01       	movw	r30, r16
     ef4:	91 83       	std	Z+1, r25	; 0x01
     ef6:	80 83       	st	Z, r24
     ef8:	de 01       	movw	r26, r28
     efa:	ab 5a       	subi	r26, 0xAB	; 171
     efc:	bf 4f       	sbci	r27, 0xFF	; 255
     efe:	fe 01       	movw	r30, r28
     f00:	e7 5a       	subi	r30, 0xA7	; 167
     f02:	ff 4f       	sbci	r31, 0xFF	; 255
     f04:	80 81       	ld	r24, Z
     f06:	91 81       	ldd	r25, Z+1	; 0x01
     f08:	8d 93       	st	X+, r24
     f0a:	9c 93       	st	X, r25
     f0c:	fe 01       	movw	r30, r28
     f0e:	eb 5a       	subi	r30, 0xAB	; 171
     f10:	ff 4f       	sbci	r31, 0xFF	; 255
     f12:	80 81       	ld	r24, Z
     f14:	91 81       	ldd	r25, Z+1	; 0x01
     f16:	01 97       	sbiw	r24, 0x01	; 1
     f18:	f1 f7       	brne	.-4      	; 0xf16 <main+0x278>
     f1a:	fe 01       	movw	r30, r28
     f1c:	eb 5a       	subi	r30, 0xAB	; 171
     f1e:	ff 4f       	sbci	r31, 0xFF	; 255
     f20:	91 83       	std	Z+1, r25	; 0x01
     f22:	80 83       	st	Z, r24

	_delay_ms(15);

	while(1)
	{
		switch(UART_recieveByte())
     f24:	0e 94 6f 12 	call	0x24de	; 0x24de <UART_recieveByte>
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	ec 96       	adiw	r28, 0x3c	; 60
     f2e:	3f af       	std	Y+63, r19	; 0x3f
     f30:	2e af       	std	Y+62, r18	; 0x3e
     f32:	ec 97       	sbiw	r28, 0x3c	; 60
     f34:	ec 96       	adiw	r28, 0x3c	; 60
     f36:	8e ad       	ldd	r24, Y+62	; 0x3e
     f38:	9f ad       	ldd	r25, Y+63	; 0x3f
     f3a:	ec 97       	sbiw	r28, 0x3c	; 60
     f3c:	8a 30       	cpi	r24, 0x0A	; 10
     f3e:	91 05       	cpc	r25, r1
     f40:	09 f4       	brne	.+2      	; 0xf44 <main+0x2a6>
     f42:	57 c0       	rjmp	.+174    	; 0xff2 <main+0x354>
     f44:	ec 96       	adiw	r28, 0x3c	; 60
     f46:	ee ad       	ldd	r30, Y+62	; 0x3e
     f48:	ff ad       	ldd	r31, Y+63	; 0x3f
     f4a:	ec 97       	sbiw	r28, 0x3c	; 60
     f4c:	eb 30       	cpi	r30, 0x0B	; 11
     f4e:	f1 05       	cpc	r31, r1
     f50:	bc f4       	brge	.+46     	; 0xf80 <main+0x2e2>
     f52:	ec 96       	adiw	r28, 0x3c	; 60
     f54:	2e ad       	ldd	r18, Y+62	; 0x3e
     f56:	3f ad       	ldd	r19, Y+63	; 0x3f
     f58:	ec 97       	sbiw	r28, 0x3c	; 60
     f5a:	28 30       	cpi	r18, 0x08	; 8
     f5c:	31 05       	cpc	r19, r1
     f5e:	09 f4       	brne	.+2      	; 0xf62 <main+0x2c4>
     f60:	4e c0       	rjmp	.+156    	; 0xffe <main+0x360>
     f62:	ec 96       	adiw	r28, 0x3c	; 60
     f64:	8e ad       	ldd	r24, Y+62	; 0x3e
     f66:	9f ad       	ldd	r25, Y+63	; 0x3f
     f68:	ec 97       	sbiw	r28, 0x3c	; 60
     f6a:	89 30       	cpi	r24, 0x09	; 9
     f6c:	91 05       	cpc	r25, r1
     f6e:	dc f5       	brge	.+118    	; 0xfe6 <main+0x348>
     f70:	ec 96       	adiw	r28, 0x3c	; 60
     f72:	ee ad       	ldd	r30, Y+62	; 0x3e
     f74:	ff ad       	ldd	r31, Y+63	; 0x3f
     f76:	ec 97       	sbiw	r28, 0x3c	; 60
     f78:	e7 30       	cpi	r30, 0x07	; 7
     f7a:	f1 05       	cpc	r31, r1
     f7c:	d1 f0       	breq	.+52     	; 0xfb2 <main+0x314>
     f7e:	d2 cf       	rjmp	.-92     	; 0xf24 <main+0x286>
     f80:	ec 96       	adiw	r28, 0x3c	; 60
     f82:	2e ad       	ldd	r18, Y+62	; 0x3e
     f84:	3f ad       	ldd	r19, Y+63	; 0x3f
     f86:	ec 97       	sbiw	r28, 0x3c	; 60
     f88:	2c 30       	cpi	r18, 0x0C	; 12
     f8a:	31 05       	cpc	r19, r1
     f8c:	09 f4       	brne	.+2      	; 0xf90 <main+0x2f2>
     f8e:	21 c3       	rjmp	.+1602   	; 0x15d2 <main+0x934>
     f90:	ec 96       	adiw	r28, 0x3c	; 60
     f92:	8e ad       	ldd	r24, Y+62	; 0x3e
     f94:	9f ad       	ldd	r25, Y+63	; 0x3f
     f96:	ec 97       	sbiw	r28, 0x3c	; 60
     f98:	8c 30       	cpi	r24, 0x0C	; 12
     f9a:	91 05       	cpc	r25, r1
     f9c:	0c f4       	brge	.+2      	; 0xfa0 <main+0x302>
     f9e:	57 c2       	rjmp	.+1198   	; 0x144e <main+0x7b0>
     fa0:	ec 96       	adiw	r28, 0x3c	; 60
     fa2:	ee ad       	ldd	r30, Y+62	; 0x3e
     fa4:	ff ad       	ldd	r31, Y+63	; 0x3f
     fa6:	ec 97       	sbiw	r28, 0x3c	; 60
     fa8:	ed 30       	cpi	r30, 0x0D	; 13
     faa:	f1 05       	cpc	r31, r1
     fac:	09 f4       	brne	.+2      	; 0xfb0 <main+0x312>
     fae:	2a c4       	rjmp	.+2132   	; 0x1804 <main+0xb66>
     fb0:	b9 cf       	rjmp	.-142    	; 0xf24 <main+0x286>
		{

		case IS_PASSWORD_SETTED :
			PassIsSetFlag = 0;
     fb2:	fe 01       	movw	r30, r28
     fb4:	e1 59       	subi	r30, 0x91	; 145
     fb6:	ff 4f       	sbci	r31, 0xFF	; 255
     fb8:	10 82       	st	Z, r1

			/* start read the password set flag from EEPROM */
			EEPROM_readByte(0xFF , &PassIsSetFlag);
     fba:	9e 01       	movw	r18, r28
     fbc:	21 59       	subi	r18, 0x91	; 145
     fbe:	3f 4f       	sbci	r19, 0xFF	; 255
     fc0:	8f ef       	ldi	r24, 0xFF	; 255
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	b9 01       	movw	r22, r18
     fc6:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <EEPROM_readByte>

			/* Check if the password is setted */
			if(PassIsSetFlag)
     fca:	fe 01       	movw	r30, r28
     fcc:	e1 59       	subi	r30, 0x91	; 145
     fce:	ff 4f       	sbci	r31, 0xFF	; 255
     fd0:	80 81       	ld	r24, Z
     fd2:	88 23       	and	r24, r24
     fd4:	21 f0       	breq	.+8      	; 0xfde <main+0x340>
			{
				/* Send confirming to MC1 */
				UART_sendByte(PASSWORD_SETTED);
     fd6:	85 e0       	ldi	r24, 0x05	; 5
     fd8:	0e 94 58 12 	call	0x24b0	; 0x24b0 <UART_sendByte>
     fdc:	a3 cf       	rjmp	.-186    	; 0xf24 <main+0x286>
			}
			else
			{
				UART_sendByte(PASSWORD_NOTSETTED);
     fde:	86 e0       	ldi	r24, 0x06	; 6
     fe0:	0e 94 58 12 	call	0x24b0	; 0x24b0 <UART_sendByte>
     fe4:	9f cf       	rjmp	.-194    	; 0xf24 <main+0x286>
			break;

		case TAKE_FIRST_PASSWORD :

			/* Start receiving first password */
			receive_password(Password1);
     fe6:	ce 01       	movw	r24, r28
     fe8:	8b 59       	subi	r24, 0x9B	; 155
     fea:	9f 4f       	sbci	r25, 0xFF	; 255
     fec:	0e 94 a3 05 	call	0xb46	; 0xb46 <receive_password>
     ff0:	99 cf       	rjmp	.-206    	; 0xf24 <main+0x286>
			break;

		case TAKE_SECOND_PASSWORD :

			/* Start receiving second password */
			receive_password(Password2);
     ff2:	ce 01       	movw	r24, r28
     ff4:	86 59       	subi	r24, 0x96	; 150
     ff6:	9f 4f       	sbci	r25, 0xFF	; 255
     ff8:	0e 94 a3 05 	call	0xb46	; 0xb46 <receive_password>
     ffc:	93 cf       	rjmp	.-218    	; 0xf24 <main+0x286>
			break;

		case IS_PASSWORD_MATCH :

			/* raise password is matching flag */
			PassIsMatching = 1;
     ffe:	fe 01       	movw	r30, r28
    1000:	ec 59       	subi	r30, 0x9C	; 156
    1002:	ff 4f       	sbci	r31, 0xFF	; 255
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	80 83       	st	Z, r24

			for(Counter = 0 ; Counter<5 ; Counter++)
    1008:	fe 01       	movw	r30, r28
    100a:	ed 59       	subi	r30, 0x9D	; 157
    100c:	ff 4f       	sbci	r31, 0xFF	; 255
    100e:	10 82       	st	Z, r1
    1010:	2a c0       	rjmp	.+84     	; 0x1066 <main+0x3c8>
			{
				/* if the two password is not matched */
				if(Password1[Counter] != Password2[Counter])
    1012:	fe 01       	movw	r30, r28
    1014:	ed 59       	subi	r30, 0x9D	; 157
    1016:	ff 4f       	sbci	r31, 0xFF	; 255
    1018:	80 81       	ld	r24, Z
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	ce 01       	movw	r24, r28
    1020:	8b 59       	subi	r24, 0x9B	; 155
    1022:	9f 4f       	sbci	r25, 0xFF	; 255
    1024:	fc 01       	movw	r30, r24
    1026:	e2 0f       	add	r30, r18
    1028:	f3 1f       	adc	r31, r19
    102a:	40 81       	ld	r20, Z
    102c:	fe 01       	movw	r30, r28
    102e:	ed 59       	subi	r30, 0x9D	; 157
    1030:	ff 4f       	sbci	r31, 0xFF	; 255
    1032:	80 81       	ld	r24, Z
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	ce 01       	movw	r24, r28
    103a:	86 59       	subi	r24, 0x96	; 150
    103c:	9f 4f       	sbci	r25, 0xFF	; 255
    103e:	fc 01       	movw	r30, r24
    1040:	e2 0f       	add	r30, r18
    1042:	f3 1f       	adc	r31, r19
    1044:	80 81       	ld	r24, Z
    1046:	48 17       	cp	r20, r24
    1048:	29 f0       	breq	.+10     	; 0x1054 <main+0x3b6>
				{
					/* Clear password is matching flag */
					PassIsMatching = 0;
    104a:	fe 01       	movw	r30, r28
    104c:	ec 59       	subi	r30, 0x9C	; 156
    104e:	ff 4f       	sbci	r31, 0xFF	; 255
    1050:	10 82       	st	Z, r1
    1052:	0f c0       	rjmp	.+30     	; 0x1072 <main+0x3d4>
		case IS_PASSWORD_MATCH :

			/* raise password is matching flag */
			PassIsMatching = 1;

			for(Counter = 0 ; Counter<5 ; Counter++)
    1054:	de 01       	movw	r26, r28
    1056:	ad 59       	subi	r26, 0x9D	; 157
    1058:	bf 4f       	sbci	r27, 0xFF	; 255
    105a:	fe 01       	movw	r30, r28
    105c:	ed 59       	subi	r30, 0x9D	; 157
    105e:	ff 4f       	sbci	r31, 0xFF	; 255
    1060:	80 81       	ld	r24, Z
    1062:	8f 5f       	subi	r24, 0xFF	; 255
    1064:	8c 93       	st	X, r24
    1066:	fe 01       	movw	r30, r28
    1068:	ed 59       	subi	r30, 0x9D	; 157
    106a:	ff 4f       	sbci	r31, 0xFF	; 255
    106c:	80 81       	ld	r24, Z
    106e:	85 30       	cpi	r24, 0x05	; 5
    1070:	80 f2       	brcs	.-96     	; 0x1012 <main+0x374>
					break;
				}

			}
			/* Check if the two password are matching */
			if(PassIsMatching)
    1072:	fe 01       	movw	r30, r28
    1074:	ec 59       	subi	r30, 0x9C	; 156
    1076:	ff 4f       	sbci	r31, 0xFF	; 255
    1078:	80 81       	ld	r24, Z
    107a:	88 23       	and	r24, r24
    107c:	09 f4       	brne	.+2      	; 0x1080 <main+0x3e2>
    107e:	71 c1       	rjmp	.+738    	; 0x1362 <main+0x6c4>
			{
				/* send informing to MC1 */
				UART_sendByte(PASSWORD_MATCHED);
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	0e 94 58 12 	call	0x24b0	; 0x24b0 <UART_sendByte>

				/* Store the password set flag into EEPROM */
				EEPROM_writeByte(0xFF , PassIsMatching);
    1086:	fe 01       	movw	r30, r28
    1088:	ec 59       	subi	r30, 0x9C	; 156
    108a:	ff 4f       	sbci	r31, 0xFF	; 255
    108c:	8f ef       	ldi	r24, 0xFF	; 255
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	60 81       	ld	r22, Z
    1092:	0e 94 9c 0c 	call	0x1938	; 0x1938 <EEPROM_writeByte>
    1096:	fe 01       	movw	r30, r28
    1098:	ef 5a       	subi	r30, 0xAF	; 175
    109a:	ff 4f       	sbci	r31, 0xFF	; 255
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	a0 e7       	ldi	r26, 0x70	; 112
    10a2:	b1 e4       	ldi	r27, 0x41	; 65
    10a4:	80 83       	st	Z, r24
    10a6:	91 83       	std	Z+1, r25	; 0x01
    10a8:	a2 83       	std	Z+2, r26	; 0x02
    10aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ac:	8e 01       	movw	r16, r28
    10ae:	03 5b       	subi	r16, 0xB3	; 179
    10b0:	1f 4f       	sbci	r17, 0xFF	; 255
    10b2:	fe 01       	movw	r30, r28
    10b4:	ef 5a       	subi	r30, 0xAF	; 175
    10b6:	ff 4f       	sbci	r31, 0xFF	; 255
    10b8:	60 81       	ld	r22, Z
    10ba:	71 81       	ldd	r23, Z+1	; 0x01
    10bc:	82 81       	ldd	r24, Z+2	; 0x02
    10be:	93 81       	ldd	r25, Z+3	; 0x03
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	4a ef       	ldi	r20, 0xFA	; 250
    10c6:	54 e4       	ldi	r21, 0x44	; 68
    10c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10cc:	dc 01       	movw	r26, r24
    10ce:	cb 01       	movw	r24, r22
    10d0:	f8 01       	movw	r30, r16
    10d2:	80 83       	st	Z, r24
    10d4:	91 83       	std	Z+1, r25	; 0x01
    10d6:	a2 83       	std	Z+2, r26	; 0x02
    10d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10da:	fe 01       	movw	r30, r28
    10dc:	e3 5b       	subi	r30, 0xB3	; 179
    10de:	ff 4f       	sbci	r31, 0xFF	; 255
    10e0:	60 81       	ld	r22, Z
    10e2:	71 81       	ldd	r23, Z+1	; 0x01
    10e4:	82 81       	ldd	r24, Z+2	; 0x02
    10e6:	93 81       	ldd	r25, Z+3	; 0x03
    10e8:	20 e0       	ldi	r18, 0x00	; 0
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	40 e8       	ldi	r20, 0x80	; 128
    10ee:	5f e3       	ldi	r21, 0x3F	; 63
    10f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10f4:	88 23       	and	r24, r24
    10f6:	44 f4       	brge	.+16     	; 0x1108 <main+0x46a>
		__ticks = 1;
    10f8:	fe 01       	movw	r30, r28
    10fa:	e5 5b       	subi	r30, 0xB5	; 181
    10fc:	ff 4f       	sbci	r31, 0xFF	; 255
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	91 83       	std	Z+1, r25	; 0x01
    1104:	80 83       	st	Z, r24
    1106:	64 c0       	rjmp	.+200    	; 0x11d0 <main+0x532>
	else if (__tmp > 65535)
    1108:	fe 01       	movw	r30, r28
    110a:	e3 5b       	subi	r30, 0xB3	; 179
    110c:	ff 4f       	sbci	r31, 0xFF	; 255
    110e:	60 81       	ld	r22, Z
    1110:	71 81       	ldd	r23, Z+1	; 0x01
    1112:	82 81       	ldd	r24, Z+2	; 0x02
    1114:	93 81       	ldd	r25, Z+3	; 0x03
    1116:	20 e0       	ldi	r18, 0x00	; 0
    1118:	3f ef       	ldi	r19, 0xFF	; 255
    111a:	4f e7       	ldi	r20, 0x7F	; 127
    111c:	57 e4       	ldi	r21, 0x47	; 71
    111e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1122:	18 16       	cp	r1, r24
    1124:	0c f0       	brlt	.+2      	; 0x1128 <main+0x48a>
    1126:	43 c0       	rjmp	.+134    	; 0x11ae <main+0x510>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1128:	fe 01       	movw	r30, r28
    112a:	ef 5a       	subi	r30, 0xAF	; 175
    112c:	ff 4f       	sbci	r31, 0xFF	; 255
    112e:	60 81       	ld	r22, Z
    1130:	71 81       	ldd	r23, Z+1	; 0x01
    1132:	82 81       	ldd	r24, Z+2	; 0x02
    1134:	93 81       	ldd	r25, Z+3	; 0x03
    1136:	20 e0       	ldi	r18, 0x00	; 0
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	40 e2       	ldi	r20, 0x20	; 32
    113c:	51 e4       	ldi	r21, 0x41	; 65
    113e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1142:	dc 01       	movw	r26, r24
    1144:	cb 01       	movw	r24, r22
    1146:	8e 01       	movw	r16, r28
    1148:	05 5b       	subi	r16, 0xB5	; 181
    114a:	1f 4f       	sbci	r17, 0xFF	; 255
    114c:	bc 01       	movw	r22, r24
    114e:	cd 01       	movw	r24, r26
    1150:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1154:	dc 01       	movw	r26, r24
    1156:	cb 01       	movw	r24, r22
    1158:	f8 01       	movw	r30, r16
    115a:	91 83       	std	Z+1, r25	; 0x01
    115c:	80 83       	st	Z, r24
    115e:	1f c0       	rjmp	.+62     	; 0x119e <main+0x500>
    1160:	fe 01       	movw	r30, r28
    1162:	e7 5b       	subi	r30, 0xB7	; 183
    1164:	ff 4f       	sbci	r31, 0xFF	; 255
    1166:	88 ec       	ldi	r24, 0xC8	; 200
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	91 83       	std	Z+1, r25	; 0x01
    116c:	80 83       	st	Z, r24
    116e:	fe 01       	movw	r30, r28
    1170:	e7 5b       	subi	r30, 0xB7	; 183
    1172:	ff 4f       	sbci	r31, 0xFF	; 255
    1174:	80 81       	ld	r24, Z
    1176:	91 81       	ldd	r25, Z+1	; 0x01
    1178:	01 97       	sbiw	r24, 0x01	; 1
    117a:	f1 f7       	brne	.-4      	; 0x1178 <main+0x4da>
    117c:	fe 01       	movw	r30, r28
    117e:	e7 5b       	subi	r30, 0xB7	; 183
    1180:	ff 4f       	sbci	r31, 0xFF	; 255
    1182:	91 83       	std	Z+1, r25	; 0x01
    1184:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1186:	de 01       	movw	r26, r28
    1188:	a5 5b       	subi	r26, 0xB5	; 181
    118a:	bf 4f       	sbci	r27, 0xFF	; 255
    118c:	fe 01       	movw	r30, r28
    118e:	e5 5b       	subi	r30, 0xB5	; 181
    1190:	ff 4f       	sbci	r31, 0xFF	; 255
    1192:	80 81       	ld	r24, Z
    1194:	91 81       	ldd	r25, Z+1	; 0x01
    1196:	01 97       	sbiw	r24, 0x01	; 1
    1198:	11 96       	adiw	r26, 0x01	; 1
    119a:	9c 93       	st	X, r25
    119c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    119e:	fe 01       	movw	r30, r28
    11a0:	e5 5b       	subi	r30, 0xB5	; 181
    11a2:	ff 4f       	sbci	r31, 0xFF	; 255
    11a4:	80 81       	ld	r24, Z
    11a6:	91 81       	ldd	r25, Z+1	; 0x01
    11a8:	00 97       	sbiw	r24, 0x00	; 0
    11aa:	d1 f6       	brne	.-76     	; 0x1160 <main+0x4c2>
    11ac:	28 c0       	rjmp	.+80     	; 0x11fe <main+0x560>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11ae:	8e 01       	movw	r16, r28
    11b0:	05 5b       	subi	r16, 0xB5	; 181
    11b2:	1f 4f       	sbci	r17, 0xFF	; 255
    11b4:	fe 01       	movw	r30, r28
    11b6:	e3 5b       	subi	r30, 0xB3	; 179
    11b8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ba:	60 81       	ld	r22, Z
    11bc:	71 81       	ldd	r23, Z+1	; 0x01
    11be:	82 81       	ldd	r24, Z+2	; 0x02
    11c0:	93 81       	ldd	r25, Z+3	; 0x03
    11c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c6:	dc 01       	movw	r26, r24
    11c8:	cb 01       	movw	r24, r22
    11ca:	f8 01       	movw	r30, r16
    11cc:	91 83       	std	Z+1, r25	; 0x01
    11ce:	80 83       	st	Z, r24
    11d0:	de 01       	movw	r26, r28
    11d2:	a9 5b       	subi	r26, 0xB9	; 185
    11d4:	bf 4f       	sbci	r27, 0xFF	; 255
    11d6:	fe 01       	movw	r30, r28
    11d8:	e5 5b       	subi	r30, 0xB5	; 181
    11da:	ff 4f       	sbci	r31, 0xFF	; 255
    11dc:	80 81       	ld	r24, Z
    11de:	91 81       	ldd	r25, Z+1	; 0x01
    11e0:	11 96       	adiw	r26, 0x01	; 1
    11e2:	9c 93       	st	X, r25
    11e4:	8e 93       	st	-X, r24
    11e6:	fe 01       	movw	r30, r28
    11e8:	e9 5b       	subi	r30, 0xB9	; 185
    11ea:	ff 4f       	sbci	r31, 0xFF	; 255
    11ec:	80 81       	ld	r24, Z
    11ee:	91 81       	ldd	r25, Z+1	; 0x01
    11f0:	01 97       	sbiw	r24, 0x01	; 1
    11f2:	f1 f7       	brne	.-4      	; 0x11f0 <main+0x552>
    11f4:	fe 01       	movw	r30, r28
    11f6:	e9 5b       	subi	r30, 0xB9	; 185
    11f8:	ff 4f       	sbci	r31, 0xFF	; 255
    11fa:	91 83       	std	Z+1, r25	; 0x01
    11fc:	80 83       	st	Z, r24
				_delay_ms(15);

				/* Store the setted password into EEPROM */
				for(Counter = 0; Counter<5 ; Counter++)
    11fe:	fe 01       	movw	r30, r28
    1200:	ed 59       	subi	r30, 0x9D	; 157
    1202:	ff 4f       	sbci	r31, 0xFF	; 255
    1204:	10 82       	st	Z, r1
    1206:	a5 c0       	rjmp	.+330    	; 0x1352 <main+0x6b4>
				{
					EEPROM_writeByte(Counter, Password1[Counter]);
    1208:	fe 01       	movw	r30, r28
    120a:	ed 59       	subi	r30, 0x9D	; 157
    120c:	ff 4f       	sbci	r31, 0xFF	; 255
    120e:	80 81       	ld	r24, Z
    1210:	48 2f       	mov	r20, r24
    1212:	50 e0       	ldi	r21, 0x00	; 0
    1214:	fe 01       	movw	r30, r28
    1216:	ed 59       	subi	r30, 0x9D	; 157
    1218:	ff 4f       	sbci	r31, 0xFF	; 255
    121a:	80 81       	ld	r24, Z
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	ce 01       	movw	r24, r28
    1222:	8b 59       	subi	r24, 0x9B	; 155
    1224:	9f 4f       	sbci	r25, 0xFF	; 255
    1226:	fc 01       	movw	r30, r24
    1228:	e2 0f       	add	r30, r18
    122a:	f3 1f       	adc	r31, r19
    122c:	20 81       	ld	r18, Z
    122e:	ca 01       	movw	r24, r20
    1230:	62 2f       	mov	r22, r18
    1232:	0e 94 9c 0c 	call	0x1938	; 0x1938 <EEPROM_writeByte>
    1236:	fe 01       	movw	r30, r28
    1238:	ed 5b       	subi	r30, 0xBD	; 189
    123a:	ff 4f       	sbci	r31, 0xFF	; 255
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	a0 e7       	ldi	r26, 0x70	; 112
    1242:	b1 e4       	ldi	r27, 0x41	; 65
    1244:	80 83       	st	Z, r24
    1246:	91 83       	std	Z+1, r25	; 0x01
    1248:	a2 83       	std	Z+2, r26	; 0x02
    124a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    124c:	8e 01       	movw	r16, r28
    124e:	01 5c       	subi	r16, 0xC1	; 193
    1250:	1f 4f       	sbci	r17, 0xFF	; 255
    1252:	fe 01       	movw	r30, r28
    1254:	ed 5b       	subi	r30, 0xBD	; 189
    1256:	ff 4f       	sbci	r31, 0xFF	; 255
    1258:	60 81       	ld	r22, Z
    125a:	71 81       	ldd	r23, Z+1	; 0x01
    125c:	82 81       	ldd	r24, Z+2	; 0x02
    125e:	93 81       	ldd	r25, Z+3	; 0x03
    1260:	20 e0       	ldi	r18, 0x00	; 0
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	4a ef       	ldi	r20, 0xFA	; 250
    1266:	54 e4       	ldi	r21, 0x44	; 68
    1268:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    126c:	dc 01       	movw	r26, r24
    126e:	cb 01       	movw	r24, r22
    1270:	f8 01       	movw	r30, r16
    1272:	80 83       	st	Z, r24
    1274:	91 83       	std	Z+1, r25	; 0x01
    1276:	a2 83       	std	Z+2, r26	; 0x02
    1278:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    127a:	fe 01       	movw	r30, r28
    127c:	ff 96       	adiw	r30, 0x3f	; 63
    127e:	60 81       	ld	r22, Z
    1280:	71 81       	ldd	r23, Z+1	; 0x01
    1282:	82 81       	ldd	r24, Z+2	; 0x02
    1284:	93 81       	ldd	r25, Z+3	; 0x03
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	40 e8       	ldi	r20, 0x80	; 128
    128c:	5f e3       	ldi	r21, 0x3F	; 63
    128e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1292:	88 23       	and	r24, r24
    1294:	2c f4       	brge	.+10     	; 0x12a0 <main+0x602>
		__ticks = 1;
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	9e af       	std	Y+62, r25	; 0x3e
    129c:	8d af       	std	Y+61, r24	; 0x3d
    129e:	46 c0       	rjmp	.+140    	; 0x132c <main+0x68e>
	else if (__tmp > 65535)
    12a0:	fe 01       	movw	r30, r28
    12a2:	ff 96       	adiw	r30, 0x3f	; 63
    12a4:	60 81       	ld	r22, Z
    12a6:	71 81       	ldd	r23, Z+1	; 0x01
    12a8:	82 81       	ldd	r24, Z+2	; 0x02
    12aa:	93 81       	ldd	r25, Z+3	; 0x03
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	3f ef       	ldi	r19, 0xFF	; 255
    12b0:	4f e7       	ldi	r20, 0x7F	; 127
    12b2:	57 e4       	ldi	r21, 0x47	; 71
    12b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12b8:	18 16       	cp	r1, r24
    12ba:	64 f5       	brge	.+88     	; 0x1314 <main+0x676>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12bc:	fe 01       	movw	r30, r28
    12be:	ed 5b       	subi	r30, 0xBD	; 189
    12c0:	ff 4f       	sbci	r31, 0xFF	; 255
    12c2:	60 81       	ld	r22, Z
    12c4:	71 81       	ldd	r23, Z+1	; 0x01
    12c6:	82 81       	ldd	r24, Z+2	; 0x02
    12c8:	93 81       	ldd	r25, Z+3	; 0x03
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	40 e2       	ldi	r20, 0x20	; 32
    12d0:	51 e4       	ldi	r21, 0x41	; 65
    12d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d6:	dc 01       	movw	r26, r24
    12d8:	cb 01       	movw	r24, r22
    12da:	bc 01       	movw	r22, r24
    12dc:	cd 01       	movw	r24, r26
    12de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e2:	dc 01       	movw	r26, r24
    12e4:	cb 01       	movw	r24, r22
    12e6:	9e af       	std	Y+62, r25	; 0x3e
    12e8:	8d af       	std	Y+61, r24	; 0x3d
    12ea:	0f c0       	rjmp	.+30     	; 0x130a <main+0x66c>
    12ec:	88 ec       	ldi	r24, 0xC8	; 200
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	9c af       	std	Y+60, r25	; 0x3c
    12f2:	8b af       	std	Y+59, r24	; 0x3b
    12f4:	8b ad       	ldd	r24, Y+59	; 0x3b
    12f6:	9c ad       	ldd	r25, Y+60	; 0x3c
    12f8:	01 97       	sbiw	r24, 0x01	; 1
    12fa:	f1 f7       	brne	.-4      	; 0x12f8 <main+0x65a>
    12fc:	9c af       	std	Y+60, r25	; 0x3c
    12fe:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1300:	8d ad       	ldd	r24, Y+61	; 0x3d
    1302:	9e ad       	ldd	r25, Y+62	; 0x3e
    1304:	01 97       	sbiw	r24, 0x01	; 1
    1306:	9e af       	std	Y+62, r25	; 0x3e
    1308:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    130a:	8d ad       	ldd	r24, Y+61	; 0x3d
    130c:	9e ad       	ldd	r25, Y+62	; 0x3e
    130e:	00 97       	sbiw	r24, 0x00	; 0
    1310:	69 f7       	brne	.-38     	; 0x12ec <main+0x64e>
    1312:	16 c0       	rjmp	.+44     	; 0x1340 <main+0x6a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1314:	fe 01       	movw	r30, r28
    1316:	ff 96       	adiw	r30, 0x3f	; 63
    1318:	60 81       	ld	r22, Z
    131a:	71 81       	ldd	r23, Z+1	; 0x01
    131c:	82 81       	ldd	r24, Z+2	; 0x02
    131e:	93 81       	ldd	r25, Z+3	; 0x03
    1320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1324:	dc 01       	movw	r26, r24
    1326:	cb 01       	movw	r24, r22
    1328:	9e af       	std	Y+62, r25	; 0x3e
    132a:	8d af       	std	Y+61, r24	; 0x3d
    132c:	8d ad       	ldd	r24, Y+61	; 0x3d
    132e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1330:	9a af       	std	Y+58, r25	; 0x3a
    1332:	89 af       	std	Y+57, r24	; 0x39
    1334:	89 ad       	ldd	r24, Y+57	; 0x39
    1336:	9a ad       	ldd	r25, Y+58	; 0x3a
    1338:	01 97       	sbiw	r24, 0x01	; 1
    133a:	f1 f7       	brne	.-4      	; 0x1338 <main+0x69a>
    133c:	9a af       	std	Y+58, r25	; 0x3a
    133e:	89 af       	std	Y+57, r24	; 0x39
				/* Store the password set flag into EEPROM */
				EEPROM_writeByte(0xFF , PassIsMatching);
				_delay_ms(15);

				/* Store the setted password into EEPROM */
				for(Counter = 0; Counter<5 ; Counter++)
    1340:	de 01       	movw	r26, r28
    1342:	ad 59       	subi	r26, 0x9D	; 157
    1344:	bf 4f       	sbci	r27, 0xFF	; 255
    1346:	fe 01       	movw	r30, r28
    1348:	ed 59       	subi	r30, 0x9D	; 157
    134a:	ff 4f       	sbci	r31, 0xFF	; 255
    134c:	80 81       	ld	r24, Z
    134e:	8f 5f       	subi	r24, 0xFF	; 255
    1350:	8c 93       	st	X, r24
    1352:	fe 01       	movw	r30, r28
    1354:	ed 59       	subi	r30, 0x9D	; 157
    1356:	ff 4f       	sbci	r31, 0xFF	; 255
    1358:	80 81       	ld	r24, Z
    135a:	85 30       	cpi	r24, 0x05	; 5
    135c:	08 f4       	brcc	.+2      	; 0x1360 <main+0x6c2>
    135e:	54 cf       	rjmp	.-344    	; 0x1208 <main+0x56a>
    1360:	03 c0       	rjmp	.+6      	; 0x1368 <main+0x6ca>
			}

			else
			{
				/* Send informing to MC1 that the two password are unmatched */
				UART_sendByte(PASSWORD_NOTMATCHED);
    1362:	82 e0       	ldi	r24, 0x02	; 2
    1364:	0e 94 58 12 	call	0x24b0	; 0x24b0 <UART_sendByte>
    1368:	80 e0       	ldi	r24, 0x00	; 0
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	a0 e7       	ldi	r26, 0x70	; 112
    136e:	b1 e4       	ldi	r27, 0x41	; 65
    1370:	8d ab       	std	Y+53, r24	; 0x35
    1372:	9e ab       	std	Y+54, r25	; 0x36
    1374:	af ab       	std	Y+55, r26	; 0x37
    1376:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1378:	6d a9       	ldd	r22, Y+53	; 0x35
    137a:	7e a9       	ldd	r23, Y+54	; 0x36
    137c:	8f a9       	ldd	r24, Y+55	; 0x37
    137e:	98 ad       	ldd	r25, Y+56	; 0x38
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	4a ef       	ldi	r20, 0xFA	; 250
    1386:	54 e4       	ldi	r21, 0x44	; 68
    1388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    138c:	dc 01       	movw	r26, r24
    138e:	cb 01       	movw	r24, r22
    1390:	89 ab       	std	Y+49, r24	; 0x31
    1392:	9a ab       	std	Y+50, r25	; 0x32
    1394:	ab ab       	std	Y+51, r26	; 0x33
    1396:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1398:	69 a9       	ldd	r22, Y+49	; 0x31
    139a:	7a a9       	ldd	r23, Y+50	; 0x32
    139c:	8b a9       	ldd	r24, Y+51	; 0x33
    139e:	9c a9       	ldd	r25, Y+52	; 0x34
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	40 e8       	ldi	r20, 0x80	; 128
    13a6:	5f e3       	ldi	r21, 0x3F	; 63
    13a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13ac:	88 23       	and	r24, r24
    13ae:	2c f4       	brge	.+10     	; 0x13ba <main+0x71c>
		__ticks = 1;
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	98 ab       	std	Y+48, r25	; 0x30
    13b6:	8f a7       	std	Y+47, r24	; 0x2f
    13b8:	3f c0       	rjmp	.+126    	; 0x1438 <main+0x79a>
	else if (__tmp > 65535)
    13ba:	69 a9       	ldd	r22, Y+49	; 0x31
    13bc:	7a a9       	ldd	r23, Y+50	; 0x32
    13be:	8b a9       	ldd	r24, Y+51	; 0x33
    13c0:	9c a9       	ldd	r25, Y+52	; 0x34
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	3f ef       	ldi	r19, 0xFF	; 255
    13c6:	4f e7       	ldi	r20, 0x7F	; 127
    13c8:	57 e4       	ldi	r21, 0x47	; 71
    13ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13ce:	18 16       	cp	r1, r24
    13d0:	4c f5       	brge	.+82     	; 0x1424 <main+0x786>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13d2:	6d a9       	ldd	r22, Y+53	; 0x35
    13d4:	7e a9       	ldd	r23, Y+54	; 0x36
    13d6:	8f a9       	ldd	r24, Y+55	; 0x37
    13d8:	98 ad       	ldd	r25, Y+56	; 0x38
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	40 e2       	ldi	r20, 0x20	; 32
    13e0:	51 e4       	ldi	r21, 0x41	; 65
    13e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	bc 01       	movw	r22, r24
    13ec:	cd 01       	movw	r24, r26
    13ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13f2:	dc 01       	movw	r26, r24
    13f4:	cb 01       	movw	r24, r22
    13f6:	98 ab       	std	Y+48, r25	; 0x30
    13f8:	8f a7       	std	Y+47, r24	; 0x2f
    13fa:	0f c0       	rjmp	.+30     	; 0x141a <main+0x77c>
    13fc:	88 ec       	ldi	r24, 0xC8	; 200
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	9e a7       	std	Y+46, r25	; 0x2e
    1402:	8d a7       	std	Y+45, r24	; 0x2d
    1404:	8d a5       	ldd	r24, Y+45	; 0x2d
    1406:	9e a5       	ldd	r25, Y+46	; 0x2e
    1408:	01 97       	sbiw	r24, 0x01	; 1
    140a:	f1 f7       	brne	.-4      	; 0x1408 <main+0x76a>
    140c:	9e a7       	std	Y+46, r25	; 0x2e
    140e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1410:	8f a5       	ldd	r24, Y+47	; 0x2f
    1412:	98 a9       	ldd	r25, Y+48	; 0x30
    1414:	01 97       	sbiw	r24, 0x01	; 1
    1416:	98 ab       	std	Y+48, r25	; 0x30
    1418:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    141a:	8f a5       	ldd	r24, Y+47	; 0x2f
    141c:	98 a9       	ldd	r25, Y+48	; 0x30
    141e:	00 97       	sbiw	r24, 0x00	; 0
    1420:	69 f7       	brne	.-38     	; 0x13fc <main+0x75e>
    1422:	80 cd       	rjmp	.-1280   	; 0xf24 <main+0x286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1424:	69 a9       	ldd	r22, Y+49	; 0x31
    1426:	7a a9       	ldd	r23, Y+50	; 0x32
    1428:	8b a9       	ldd	r24, Y+51	; 0x33
    142a:	9c a9       	ldd	r25, Y+52	; 0x34
    142c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	98 ab       	std	Y+48, r25	; 0x30
    1436:	8f a7       	std	Y+47, r24	; 0x2f
    1438:	8f a5       	ldd	r24, Y+47	; 0x2f
    143a:	98 a9       	ldd	r25, Y+48	; 0x30
    143c:	9c a7       	std	Y+44, r25	; 0x2c
    143e:	8b a7       	std	Y+43, r24	; 0x2b
    1440:	8b a5       	ldd	r24, Y+43	; 0x2b
    1442:	9c a5       	ldd	r25, Y+44	; 0x2c
    1444:	01 97       	sbiw	r24, 0x01	; 1
    1446:	f1 f7       	brne	.-4      	; 0x1444 <main+0x7a6>
    1448:	9c a7       	std	Y+44, r25	; 0x2c
    144a:	8b a7       	std	Y+43, r24	; 0x2b
    144c:	6b cd       	rjmp	.-1322   	; 0xf24 <main+0x286>
			_delay_ms(15);
			break;

		case TAKE_MAIN_PASSWORD :

			PassIsMatching = 1;
    144e:	fe 01       	movw	r30, r28
    1450:	ec 59       	subi	r30, 0x9C	; 156
    1452:	ff 4f       	sbci	r31, 0xFF	; 255
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	80 83       	st	Z, r24

			/* Receive the password */
			receive_password(Password1);
    1458:	ce 01       	movw	r24, r28
    145a:	8b 59       	subi	r24, 0x9B	; 155
    145c:	9f 4f       	sbci	r25, 0xFF	; 255
    145e:	0e 94 a3 05 	call	0xb46	; 0xb46 <receive_password>

			/* Compare the entered password with the stored password */
			for(Counter=0 ; Counter<5 ; Counter++)
    1462:	fe 01       	movw	r30, r28
    1464:	ed 59       	subi	r30, 0x9D	; 157
    1466:	ff 4f       	sbci	r31, 0xFF	; 255
    1468:	10 82       	st	Z, r1
    146a:	9e c0       	rjmp	.+316    	; 0x15a8 <main+0x90a>
			{
				EEPROM_readByte(Counter , &TempVariable);
    146c:	fe 01       	movw	r30, r28
    146e:	ed 59       	subi	r30, 0x9D	; 157
    1470:	ff 4f       	sbci	r31, 0xFF	; 255
    1472:	80 81       	ld	r24, Z
    1474:	88 2f       	mov	r24, r24
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	9e 01       	movw	r18, r28
    147a:	20 59       	subi	r18, 0x90	; 144
    147c:	3f 4f       	sbci	r19, 0xFF	; 255
    147e:	b9 01       	movw	r22, r18
    1480:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <EEPROM_readByte>

				/* Check if is match or not */
				if(Password1[Counter] != TempVariable)
    1484:	fe 01       	movw	r30, r28
    1486:	ed 59       	subi	r30, 0x9D	; 157
    1488:	ff 4f       	sbci	r31, 0xFF	; 255
    148a:	80 81       	ld	r24, Z
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	ce 01       	movw	r24, r28
    1492:	8b 59       	subi	r24, 0x9B	; 155
    1494:	9f 4f       	sbci	r25, 0xFF	; 255
    1496:	fc 01       	movw	r30, r24
    1498:	e2 0f       	add	r30, r18
    149a:	f3 1f       	adc	r31, r19
    149c:	90 81       	ld	r25, Z
    149e:	fe 01       	movw	r30, r28
    14a0:	e0 59       	subi	r30, 0x90	; 144
    14a2:	ff 4f       	sbci	r31, 0xFF	; 255
    14a4:	80 81       	ld	r24, Z
    14a6:	98 17       	cp	r25, r24
    14a8:	21 f0       	breq	.+8      	; 0x14b2 <main+0x814>
				{
					PassIsMatching = 0;
    14aa:	fe 01       	movw	r30, r28
    14ac:	ec 59       	subi	r30, 0x9C	; 156
    14ae:	ff 4f       	sbci	r31, 0xFF	; 255
    14b0:	10 82       	st	Z, r1
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	a0 e7       	ldi	r26, 0x70	; 112
    14b8:	b1 e4       	ldi	r27, 0x41	; 65
    14ba:	8f a3       	std	Y+39, r24	; 0x27
    14bc:	98 a7       	std	Y+40, r25	; 0x28
    14be:	a9 a7       	std	Y+41, r26	; 0x29
    14c0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14c2:	6f a1       	ldd	r22, Y+39	; 0x27
    14c4:	78 a5       	ldd	r23, Y+40	; 0x28
    14c6:	89 a5       	ldd	r24, Y+41	; 0x29
    14c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	4a ef       	ldi	r20, 0xFA	; 250
    14d0:	54 e4       	ldi	r21, 0x44	; 68
    14d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d6:	dc 01       	movw	r26, r24
    14d8:	cb 01       	movw	r24, r22
    14da:	8b a3       	std	Y+35, r24	; 0x23
    14dc:	9c a3       	std	Y+36, r25	; 0x24
    14de:	ad a3       	std	Y+37, r26	; 0x25
    14e0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    14e2:	6b a1       	ldd	r22, Y+35	; 0x23
    14e4:	7c a1       	ldd	r23, Y+36	; 0x24
    14e6:	8d a1       	ldd	r24, Y+37	; 0x25
    14e8:	9e a1       	ldd	r25, Y+38	; 0x26
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	40 e8       	ldi	r20, 0x80	; 128
    14f0:	5f e3       	ldi	r21, 0x3F	; 63
    14f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14f6:	88 23       	and	r24, r24
    14f8:	2c f4       	brge	.+10     	; 0x1504 <main+0x866>
		__ticks = 1;
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	9a a3       	std	Y+34, r25	; 0x22
    1500:	89 a3       	std	Y+33, r24	; 0x21
    1502:	3f c0       	rjmp	.+126    	; 0x1582 <main+0x8e4>
	else if (__tmp > 65535)
    1504:	6b a1       	ldd	r22, Y+35	; 0x23
    1506:	7c a1       	ldd	r23, Y+36	; 0x24
    1508:	8d a1       	ldd	r24, Y+37	; 0x25
    150a:	9e a1       	ldd	r25, Y+38	; 0x26
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	3f ef       	ldi	r19, 0xFF	; 255
    1510:	4f e7       	ldi	r20, 0x7F	; 127
    1512:	57 e4       	ldi	r21, 0x47	; 71
    1514:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1518:	18 16       	cp	r1, r24
    151a:	4c f5       	brge	.+82     	; 0x156e <main+0x8d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    151c:	6f a1       	ldd	r22, Y+39	; 0x27
    151e:	78 a5       	ldd	r23, Y+40	; 0x28
    1520:	89 a5       	ldd	r24, Y+41	; 0x29
    1522:	9a a5       	ldd	r25, Y+42	; 0x2a
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	40 e2       	ldi	r20, 0x20	; 32
    152a:	51 e4       	ldi	r21, 0x41	; 65
    152c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1530:	dc 01       	movw	r26, r24
    1532:	cb 01       	movw	r24, r22
    1534:	bc 01       	movw	r22, r24
    1536:	cd 01       	movw	r24, r26
    1538:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    153c:	dc 01       	movw	r26, r24
    153e:	cb 01       	movw	r24, r22
    1540:	9a a3       	std	Y+34, r25	; 0x22
    1542:	89 a3       	std	Y+33, r24	; 0x21
    1544:	0f c0       	rjmp	.+30     	; 0x1564 <main+0x8c6>
    1546:	88 ec       	ldi	r24, 0xC8	; 200
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	98 a3       	std	Y+32, r25	; 0x20
    154c:	8f 8f       	std	Y+31, r24	; 0x1f
    154e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1550:	98 a1       	ldd	r25, Y+32	; 0x20
    1552:	01 97       	sbiw	r24, 0x01	; 1
    1554:	f1 f7       	brne	.-4      	; 0x1552 <main+0x8b4>
    1556:	98 a3       	std	Y+32, r25	; 0x20
    1558:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    155a:	89 a1       	ldd	r24, Y+33	; 0x21
    155c:	9a a1       	ldd	r25, Y+34	; 0x22
    155e:	01 97       	sbiw	r24, 0x01	; 1
    1560:	9a a3       	std	Y+34, r25	; 0x22
    1562:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1564:	89 a1       	ldd	r24, Y+33	; 0x21
    1566:	9a a1       	ldd	r25, Y+34	; 0x22
    1568:	00 97       	sbiw	r24, 0x00	; 0
    156a:	69 f7       	brne	.-38     	; 0x1546 <main+0x8a8>
    156c:	14 c0       	rjmp	.+40     	; 0x1596 <main+0x8f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    156e:	6b a1       	ldd	r22, Y+35	; 0x23
    1570:	7c a1       	ldd	r23, Y+36	; 0x24
    1572:	8d a1       	ldd	r24, Y+37	; 0x25
    1574:	9e a1       	ldd	r25, Y+38	; 0x26
    1576:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    157a:	dc 01       	movw	r26, r24
    157c:	cb 01       	movw	r24, r22
    157e:	9a a3       	std	Y+34, r25	; 0x22
    1580:	89 a3       	std	Y+33, r24	; 0x21
    1582:	89 a1       	ldd	r24, Y+33	; 0x21
    1584:	9a a1       	ldd	r25, Y+34	; 0x22
    1586:	9e 8f       	std	Y+30, r25	; 0x1e
    1588:	8d 8f       	std	Y+29, r24	; 0x1d
    158a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    158c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    158e:	01 97       	sbiw	r24, 0x01	; 1
    1590:	f1 f7       	brne	.-4      	; 0x158e <main+0x8f0>
    1592:	9e 8f       	std	Y+30, r25	; 0x1e
    1594:	8d 8f       	std	Y+29, r24	; 0x1d

			/* Receive the password */
			receive_password(Password1);

			/* Compare the entered password with the stored password */
			for(Counter=0 ; Counter<5 ; Counter++)
    1596:	de 01       	movw	r26, r28
    1598:	ad 59       	subi	r26, 0x9D	; 157
    159a:	bf 4f       	sbci	r27, 0xFF	; 255
    159c:	fe 01       	movw	r30, r28
    159e:	ed 59       	subi	r30, 0x9D	; 157
    15a0:	ff 4f       	sbci	r31, 0xFF	; 255
    15a2:	80 81       	ld	r24, Z
    15a4:	8f 5f       	subi	r24, 0xFF	; 255
    15a6:	8c 93       	st	X, r24
    15a8:	fe 01       	movw	r30, r28
    15aa:	ed 59       	subi	r30, 0x9D	; 157
    15ac:	ff 4f       	sbci	r31, 0xFF	; 255
    15ae:	80 81       	ld	r24, Z
    15b0:	85 30       	cpi	r24, 0x05	; 5
    15b2:	08 f4       	brcc	.+2      	; 0x15b6 <main+0x918>
    15b4:	5b cf       	rjmp	.-330    	; 0x146c <main+0x7ce>
				}
				_delay_ms(15);

			}
			/* Check if the entered password is match with the setted password */
			if(PassIsMatching)
    15b6:	fe 01       	movw	r30, r28
    15b8:	ec 59       	subi	r30, 0x9C	; 156
    15ba:	ff 4f       	sbci	r31, 0xFF	; 255
    15bc:	80 81       	ld	r24, Z
    15be:	88 23       	and	r24, r24
    15c0:	21 f0       	breq	.+8      	; 0x15ca <main+0x92c>
			{
				UART_sendByte(PASSWORD_TRUE);
    15c2:	83 e0       	ldi	r24, 0x03	; 3
    15c4:	0e 94 58 12 	call	0x24b0	; 0x24b0 <UART_sendByte>
    15c8:	ad cc       	rjmp	.-1702   	; 0xf24 <main+0x286>
			}
			else
			{
				UART_sendByte(PASSWORD_FALSE);
    15ca:	84 e0       	ldi	r24, 0x04	; 4
    15cc:	0e 94 58 12 	call	0x24b0	; 0x24b0 <UART_sendByte>
    15d0:	a9 cc       	rjmp	.-1710   	; 0xf24 <main+0x286>


		case OPEN_DOOR :
			/* Unlock the door then hold then lock */

			Timer1_init(&Timer1_Config);
    15d2:	88 e6       	ldi	r24, 0x68	; 104
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	0e 94 13 11 	call	0x2226	; 0x2226 <Timer1_init>

			DcMotor_Rotate(CW , 100);
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	64 e6       	ldi	r22, 0x64	; 100
    15de:	0e 94 57 0c 	call	0x18ae	; 0x18ae <DcMotor_Rotate>
			/* wait for 15 seconds */
			while(Timer1Ticks != 15);
    15e2:	80 91 76 00 	lds	r24, 0x0076
    15e6:	8f 30       	cpi	r24, 0x0F	; 15
    15e8:	e1 f7       	brne	.-8      	; 0x15e2 <main+0x944>
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	a0 e7       	ldi	r26, 0x70	; 112
    15f0:	b1 e4       	ldi	r27, 0x41	; 65
    15f2:	89 8f       	std	Y+25, r24	; 0x19
    15f4:	9a 8f       	std	Y+26, r25	; 0x1a
    15f6:	ab 8f       	std	Y+27, r26	; 0x1b
    15f8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15fa:	69 8d       	ldd	r22, Y+25	; 0x19
    15fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1600:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	4a ef       	ldi	r20, 0xFA	; 250
    1608:	54 e4       	ldi	r21, 0x44	; 68
    160a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    160e:	dc 01       	movw	r26, r24
    1610:	cb 01       	movw	r24, r22
    1612:	8d 8b       	std	Y+21, r24	; 0x15
    1614:	9e 8b       	std	Y+22, r25	; 0x16
    1616:	af 8b       	std	Y+23, r26	; 0x17
    1618:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    161a:	6d 89       	ldd	r22, Y+21	; 0x15
    161c:	7e 89       	ldd	r23, Y+22	; 0x16
    161e:	8f 89       	ldd	r24, Y+23	; 0x17
    1620:	98 8d       	ldd	r25, Y+24	; 0x18
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	40 e8       	ldi	r20, 0x80	; 128
    1628:	5f e3       	ldi	r21, 0x3F	; 63
    162a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    162e:	88 23       	and	r24, r24
    1630:	2c f4       	brge	.+10     	; 0x163c <main+0x99e>
		__ticks = 1;
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	9c 8b       	std	Y+20, r25	; 0x14
    1638:	8b 8b       	std	Y+19, r24	; 0x13
    163a:	3f c0       	rjmp	.+126    	; 0x16ba <main+0xa1c>
	else if (__tmp > 65535)
    163c:	6d 89       	ldd	r22, Y+21	; 0x15
    163e:	7e 89       	ldd	r23, Y+22	; 0x16
    1640:	8f 89       	ldd	r24, Y+23	; 0x17
    1642:	98 8d       	ldd	r25, Y+24	; 0x18
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	3f ef       	ldi	r19, 0xFF	; 255
    1648:	4f e7       	ldi	r20, 0x7F	; 127
    164a:	57 e4       	ldi	r21, 0x47	; 71
    164c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1650:	18 16       	cp	r1, r24
    1652:	4c f5       	brge	.+82     	; 0x16a6 <main+0xa08>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1654:	69 8d       	ldd	r22, Y+25	; 0x19
    1656:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1658:	8b 8d       	ldd	r24, Y+27	; 0x1b
    165a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	40 e2       	ldi	r20, 0x20	; 32
    1662:	51 e4       	ldi	r21, 0x41	; 65
    1664:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1668:	dc 01       	movw	r26, r24
    166a:	cb 01       	movw	r24, r22
    166c:	bc 01       	movw	r22, r24
    166e:	cd 01       	movw	r24, r26
    1670:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1674:	dc 01       	movw	r26, r24
    1676:	cb 01       	movw	r24, r22
    1678:	9c 8b       	std	Y+20, r25	; 0x14
    167a:	8b 8b       	std	Y+19, r24	; 0x13
    167c:	0f c0       	rjmp	.+30     	; 0x169c <main+0x9fe>
    167e:	88 ec       	ldi	r24, 0xC8	; 200
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	9a 8b       	std	Y+18, r25	; 0x12
    1684:	89 8b       	std	Y+17, r24	; 0x11
    1686:	89 89       	ldd	r24, Y+17	; 0x11
    1688:	9a 89       	ldd	r25, Y+18	; 0x12
    168a:	01 97       	sbiw	r24, 0x01	; 1
    168c:	f1 f7       	brne	.-4      	; 0x168a <main+0x9ec>
    168e:	9a 8b       	std	Y+18, r25	; 0x12
    1690:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1692:	8b 89       	ldd	r24, Y+19	; 0x13
    1694:	9c 89       	ldd	r25, Y+20	; 0x14
    1696:	01 97       	sbiw	r24, 0x01	; 1
    1698:	9c 8b       	std	Y+20, r25	; 0x14
    169a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    169c:	8b 89       	ldd	r24, Y+19	; 0x13
    169e:	9c 89       	ldd	r25, Y+20	; 0x14
    16a0:	00 97       	sbiw	r24, 0x00	; 0
    16a2:	69 f7       	brne	.-38     	; 0x167e <main+0x9e0>
    16a4:	14 c0       	rjmp	.+40     	; 0x16ce <main+0xa30>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16a6:	6d 89       	ldd	r22, Y+21	; 0x15
    16a8:	7e 89       	ldd	r23, Y+22	; 0x16
    16aa:	8f 89       	ldd	r24, Y+23	; 0x17
    16ac:	98 8d       	ldd	r25, Y+24	; 0x18
    16ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	9c 8b       	std	Y+20, r25	; 0x14
    16b8:	8b 8b       	std	Y+19, r24	; 0x13
    16ba:	8b 89       	ldd	r24, Y+19	; 0x13
    16bc:	9c 89       	ldd	r25, Y+20	; 0x14
    16be:	98 8b       	std	Y+16, r25	; 0x10
    16c0:	8f 87       	std	Y+15, r24	; 0x0f
    16c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    16c4:	98 89       	ldd	r25, Y+16	; 0x10
    16c6:	01 97       	sbiw	r24, 0x01	; 1
    16c8:	f1 f7       	brne	.-4      	; 0x16c6 <main+0xa28>
    16ca:	98 8b       	std	Y+16, r25	; 0x10
    16cc:	8f 87       	std	Y+15, r24	; 0x0f

			_delay_ms(15);
			/* reset the timer ticks */
			Timer1Ticks = 0;
    16ce:	10 92 76 00 	sts	0x0076, r1


			Timer1_deInit();
    16d2:	0e 94 5d 11 	call	0x22ba	; 0x22ba <Timer1_deInit>
			Timer1_init(&Timer1_Config);
    16d6:	88 e6       	ldi	r24, 0x68	; 104
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	0e 94 13 11 	call	0x2226	; 0x2226 <Timer1_init>


			DcMotor_Rotate(OFF , 0);
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	60 e0       	ldi	r22, 0x00	; 0
    16e2:	0e 94 57 0c 	call	0x18ae	; 0x18ae <DcMotor_Rotate>
			/* wait for 3 seconds */
			while(Timer1Ticks != 3);
    16e6:	80 91 76 00 	lds	r24, 0x0076
    16ea:	83 30       	cpi	r24, 0x03	; 3
    16ec:	e1 f7       	brne	.-8      	; 0x16e6 <main+0xa48>


			/* reset the timer ticks */
			Timer1Ticks = 0;
    16ee:	10 92 76 00 	sts	0x0076, r1
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	a0 e7       	ldi	r26, 0x70	; 112
    16f8:	b1 e4       	ldi	r27, 0x41	; 65
    16fa:	8b 87       	std	Y+11, r24	; 0x0b
    16fc:	9c 87       	std	Y+12, r25	; 0x0c
    16fe:	ad 87       	std	Y+13, r26	; 0x0d
    1700:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1702:	6b 85       	ldd	r22, Y+11	; 0x0b
    1704:	7c 85       	ldd	r23, Y+12	; 0x0c
    1706:	8d 85       	ldd	r24, Y+13	; 0x0d
    1708:	9e 85       	ldd	r25, Y+14	; 0x0e
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	4a ef       	ldi	r20, 0xFA	; 250
    1710:	54 e4       	ldi	r21, 0x44	; 68
    1712:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1716:	dc 01       	movw	r26, r24
    1718:	cb 01       	movw	r24, r22
    171a:	8f 83       	std	Y+7, r24	; 0x07
    171c:	98 87       	std	Y+8, r25	; 0x08
    171e:	a9 87       	std	Y+9, r26	; 0x09
    1720:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1722:	6f 81       	ldd	r22, Y+7	; 0x07
    1724:	78 85       	ldd	r23, Y+8	; 0x08
    1726:	89 85       	ldd	r24, Y+9	; 0x09
    1728:	9a 85       	ldd	r25, Y+10	; 0x0a
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	40 e8       	ldi	r20, 0x80	; 128
    1730:	5f e3       	ldi	r21, 0x3F	; 63
    1732:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1736:	88 23       	and	r24, r24
    1738:	2c f4       	brge	.+10     	; 0x1744 <main+0xaa6>
		__ticks = 1;
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	9e 83       	std	Y+6, r25	; 0x06
    1740:	8d 83       	std	Y+5, r24	; 0x05
    1742:	3f c0       	rjmp	.+126    	; 0x17c2 <main+0xb24>
	else if (__tmp > 65535)
    1744:	6f 81       	ldd	r22, Y+7	; 0x07
    1746:	78 85       	ldd	r23, Y+8	; 0x08
    1748:	89 85       	ldd	r24, Y+9	; 0x09
    174a:	9a 85       	ldd	r25, Y+10	; 0x0a
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	3f ef       	ldi	r19, 0xFF	; 255
    1750:	4f e7       	ldi	r20, 0x7F	; 127
    1752:	57 e4       	ldi	r21, 0x47	; 71
    1754:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1758:	18 16       	cp	r1, r24
    175a:	4c f5       	brge	.+82     	; 0x17ae <main+0xb10>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    175c:	6b 85       	ldd	r22, Y+11	; 0x0b
    175e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1760:	8d 85       	ldd	r24, Y+13	; 0x0d
    1762:	9e 85       	ldd	r25, Y+14	; 0x0e
    1764:	20 e0       	ldi	r18, 0x00	; 0
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	40 e2       	ldi	r20, 0x20	; 32
    176a:	51 e4       	ldi	r21, 0x41	; 65
    176c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	bc 01       	movw	r22, r24
    1776:	cd 01       	movw	r24, r26
    1778:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    177c:	dc 01       	movw	r26, r24
    177e:	cb 01       	movw	r24, r22
    1780:	9e 83       	std	Y+6, r25	; 0x06
    1782:	8d 83       	std	Y+5, r24	; 0x05
    1784:	0f c0       	rjmp	.+30     	; 0x17a4 <main+0xb06>
    1786:	88 ec       	ldi	r24, 0xC8	; 200
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	9c 83       	std	Y+4, r25	; 0x04
    178c:	8b 83       	std	Y+3, r24	; 0x03
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	9c 81       	ldd	r25, Y+4	; 0x04
    1792:	01 97       	sbiw	r24, 0x01	; 1
    1794:	f1 f7       	brne	.-4      	; 0x1792 <main+0xaf4>
    1796:	9c 83       	std	Y+4, r25	; 0x04
    1798:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    179a:	8d 81       	ldd	r24, Y+5	; 0x05
    179c:	9e 81       	ldd	r25, Y+6	; 0x06
    179e:	01 97       	sbiw	r24, 0x01	; 1
    17a0:	9e 83       	std	Y+6, r25	; 0x06
    17a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17a4:	8d 81       	ldd	r24, Y+5	; 0x05
    17a6:	9e 81       	ldd	r25, Y+6	; 0x06
    17a8:	00 97       	sbiw	r24, 0x00	; 0
    17aa:	69 f7       	brne	.-38     	; 0x1786 <main+0xae8>
    17ac:	14 c0       	rjmp	.+40     	; 0x17d6 <main+0xb38>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ae:	6f 81       	ldd	r22, Y+7	; 0x07
    17b0:	78 85       	ldd	r23, Y+8	; 0x08
    17b2:	89 85       	ldd	r24, Y+9	; 0x09
    17b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ba:	dc 01       	movw	r26, r24
    17bc:	cb 01       	movw	r24, r22
    17be:	9e 83       	std	Y+6, r25	; 0x06
    17c0:	8d 83       	std	Y+5, r24	; 0x05
    17c2:	8d 81       	ldd	r24, Y+5	; 0x05
    17c4:	9e 81       	ldd	r25, Y+6	; 0x06
    17c6:	9a 83       	std	Y+2, r25	; 0x02
    17c8:	89 83       	std	Y+1, r24	; 0x01
    17ca:	89 81       	ldd	r24, Y+1	; 0x01
    17cc:	9a 81       	ldd	r25, Y+2	; 0x02
    17ce:	01 97       	sbiw	r24, 0x01	; 1
    17d0:	f1 f7       	brne	.-4      	; 0x17ce <main+0xb30>
    17d2:	9a 83       	std	Y+2, r25	; 0x02
    17d4:	89 83       	std	Y+1, r24	; 0x01

			_delay_ms(15);
			Timer1_deInit();
    17d6:	0e 94 5d 11 	call	0x22ba	; 0x22ba <Timer1_deInit>
			Timer1_init(&Timer1_Config);
    17da:	88 e6       	ldi	r24, 0x68	; 104
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	0e 94 13 11 	call	0x2226	; 0x2226 <Timer1_init>

			DcMotor_Rotate(A_CW , 100);
    17e2:	82 e0       	ldi	r24, 0x02	; 2
    17e4:	64 e6       	ldi	r22, 0x64	; 100
    17e6:	0e 94 57 0c 	call	0x18ae	; 0x18ae <DcMotor_Rotate>
			/* wait for 15 seconds */
			while(Timer1Ticks != 15);
    17ea:	80 91 76 00 	lds	r24, 0x0076
    17ee:	8f 30       	cpi	r24, 0x0F	; 15
    17f0:	e1 f7       	brne	.-8      	; 0x17ea <main+0xb4c>

			/* reset the timer ticks */
			Timer1Ticks = 0;
    17f2:	10 92 76 00 	sts	0x0076, r1
			Timer1_deInit();
    17f6:	0e 94 5d 11 	call	0x22ba	; 0x22ba <Timer1_deInit>

			DcMotor_Rotate(OFF , 0);
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	60 e0       	ldi	r22, 0x00	; 0
    17fe:	0e 94 57 0c 	call	0x18ae	; 0x18ae <DcMotor_Rotate>
    1802:	90 cb       	rjmp	.-2272   	; 0xf24 <main+0x286>
			break;

		case OPEN_ALARM :

			Timer1_init(&Timer1_Config);
    1804:	88 e6       	ldi	r24, 0x68	; 104
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	0e 94 13 11 	call	0x2226	; 0x2226 <Timer1_init>
			BUZZER_on();
    180c:	0e 94 24 0c 	call	0x1848	; 0x1848 <BUZZER_on>
			/* Wait 60 seconds */
			while(Timer1Ticks != 60);
    1810:	80 91 76 00 	lds	r24, 0x0076
    1814:	8c 33       	cpi	r24, 0x3C	; 60
    1816:	e1 f7       	brne	.-8      	; 0x1810 <main+0xb72>

			/* reset the timer ticks */
			Timer1Ticks = 0;
    1818:	10 92 76 00 	sts	0x0076, r1

			Timer1_deInit();
    181c:	0e 94 5d 11 	call	0x22ba	; 0x22ba <Timer1_deInit>
			BUZZER_off();
    1820:	0e 94 30 0c 	call	0x1860	; 0x1860 <BUZZER_off>
    1824:	7f cb       	rjmp	.-2306   	; 0xf24 <main+0x286>

00001826 <BUZZER_Init>:
 * The Function responsible for setup the direction for the Buzzer pins through the GPIO driver.
 * Stop the Buzzer at the beginning through the GPIO driver.
 */

void BUZZER_Init (void)
{
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	60 e0       	ldi	r22, 0x00	; 0
    1832:	41 e0       	ldi	r20, 0x01	; 1
    1834:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    1838:	80 e0       	ldi	r24, 0x00	; 0
    183a:	60 e0       	ldi	r22, 0x00	; 0
    183c:	40 e0       	ldi	r20, 0x00	; 0
    183e:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <GPIO_writePin>
}
    1842:	cf 91       	pop	r28
    1844:	df 91       	pop	r29
    1846:	08 95       	ret

00001848 <BUZZER_on>:
/*
 * Description :
 * The Function responsible for activating the Buzzer
 */
void BUZZER_on (void)
{
    1848:	df 93       	push	r29
    184a:	cf 93       	push	r28
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	60 e0       	ldi	r22, 0x00	; 0
    1854:	41 e0       	ldi	r20, 0x01	; 1
    1856:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <GPIO_writePin>
}
    185a:	cf 91       	pop	r28
    185c:	df 91       	pop	r29
    185e:	08 95       	ret

00001860 <BUZZER_off>:
/*
 * Description :
 * The Function responsible for deactivating the Buzzer
 */
void BUZZER_off (void)
{
    1860:	df 93       	push	r29
    1862:	cf 93       	push	r28
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	60 e0       	ldi	r22, 0x00	; 0
    186c:	40 e0       	ldi	r20, 0x00	; 0
    186e:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <GPIO_writePin>
}
    1872:	cf 91       	pop	r28
    1874:	df 91       	pop	r29
    1876:	08 95       	ret

00001878 <DcMotor_Init>:
/*
 * Description :
 * The Function responsible for setup the direction for the two motor pins through the GPIO driver.
 * Stop at the DC-Motor at the beginning through the GPIO driver.
 */
void DcMotor_Init(void){
    1878:	df 93       	push	r29
    187a:	cf 93       	push	r28
    187c:	cd b7       	in	r28, 0x3d	; 61
    187e:	de b7       	in	r29, 0x3e	; 62
	/* setup the two motor pins as output pins */
	GPIO_setupPinDirection(DC_MOTOR_IN1_PORT_ID ,DC_MOTOR_IN1_PIN_ID, PIN_OUTPUT);
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	65 e0       	ldi	r22, 0x05	; 5
    1884:	41 e0       	ldi	r20, 0x01	; 1
    1886:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_IN2_PORT_ID ,DC_MOTOR_IN2_PIN_ID, PIN_OUTPUT);
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	66 e0       	ldi	r22, 0x06	; 6
    188e:	41 e0       	ldi	r20, 0x01	; 1
    1890:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <GPIO_setupPinDirection>

	/* stop the motor at the beginning */
	GPIO_writePin(DC_MOTOR_IN1_PORT_ID, DC_MOTOR_IN1_PIN_ID, LOGIC_LOW);
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	65 e0       	ldi	r22, 0x05	; 5
    1898:	40 e0       	ldi	r20, 0x00	; 0
    189a:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_IN2_PORT_ID, DC_MOTOR_IN2_PIN_ID, LOGIC_LOW);
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	66 e0       	ldi	r22, 0x06	; 6
    18a2:	40 e0       	ldi	r20, 0x00	; 0
    18a4:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <GPIO_writePin>
}
    18a8:	cf 91       	pop	r28
    18aa:	df 91       	pop	r29
    18ac:	08 95       	ret

000018ae <DcMotor_Rotate>:
/*
 * Description :
 * The function responsible for rotate the DC Motor CW/ or A-CW or stop the motor based on the state input state value.
 * Send the required duty cycle to the PWM driver based on the required speed value.
 */
void DcMotor_Rotate(DcMotor_State state,uint8 speed){
    18ae:	df 93       	push	r29
    18b0:	cf 93       	push	r28
    18b2:	00 d0       	rcall	.+0      	; 0x18b4 <DcMotor_Rotate+0x6>
    18b4:	00 d0       	rcall	.+0      	; 0x18b6 <DcMotor_Rotate+0x8>
    18b6:	cd b7       	in	r28, 0x3d	; 61
    18b8:	de b7       	in	r29, 0x3e	; 62
    18ba:	89 83       	std	Y+1, r24	; 0x01
    18bc:	6a 83       	std	Y+2, r22	; 0x02

	/* Make a PWM of duty cycle based on the speed */
	PWM_Timer0_Start(speed);
    18be:	8a 81       	ldd	r24, Y+2	; 0x02
    18c0:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <PWM_Timer0_Start>

	/* Control the direction based on the speed argument */
	switch(state){
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
    18c6:	28 2f       	mov	r18, r24
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	3c 83       	std	Y+4, r19	; 0x04
    18cc:	2b 83       	std	Y+3, r18	; 0x03
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	9c 81       	ldd	r25, Y+4	; 0x04
    18d2:	81 30       	cpi	r24, 0x01	; 1
    18d4:	91 05       	cpc	r25, r1
    18d6:	a1 f0       	breq	.+40     	; 0x1900 <DcMotor_Rotate+0x52>
    18d8:	2b 81       	ldd	r18, Y+3	; 0x03
    18da:	3c 81       	ldd	r19, Y+4	; 0x04
    18dc:	22 30       	cpi	r18, 0x02	; 2
    18de:	31 05       	cpc	r19, r1
    18e0:	d1 f0       	breq	.+52     	; 0x1916 <DcMotor_Rotate+0x68>
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
    18e4:	9c 81       	ldd	r25, Y+4	; 0x04
    18e6:	00 97       	sbiw	r24, 0x00	; 0
    18e8:	01 f5       	brne	.+64     	; 0x192a <DcMotor_Rotate+0x7c>

	case OFF:
		GPIO_writePin(DC_MOTOR_IN1_PORT_ID, DC_MOTOR_IN1_PIN_ID, LOGIC_LOW);
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	65 e0       	ldi	r22, 0x05	; 5
    18ee:	40 e0       	ldi	r20, 0x00	; 0
    18f0:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_IN2_PORT_ID, DC_MOTOR_IN2_PIN_ID, LOGIC_LOW);
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	66 e0       	ldi	r22, 0x06	; 6
    18f8:	40 e0       	ldi	r20, 0x00	; 0
    18fa:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <GPIO_writePin>
    18fe:	15 c0       	rjmp	.+42     	; 0x192a <DcMotor_Rotate+0x7c>
		break;

	case CW:
		GPIO_writePin(DC_MOTOR_IN1_PORT_ID, DC_MOTOR_IN1_PIN_ID, LOGIC_HIGH);
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	65 e0       	ldi	r22, 0x05	; 5
    1904:	41 e0       	ldi	r20, 0x01	; 1
    1906:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_IN2_PORT_ID, DC_MOTOR_IN2_PIN_ID, LOGIC_LOW);
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	66 e0       	ldi	r22, 0x06	; 6
    190e:	40 e0       	ldi	r20, 0x00	; 0
    1910:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <GPIO_writePin>
    1914:	0a c0       	rjmp	.+20     	; 0x192a <DcMotor_Rotate+0x7c>
		break;

	case A_CW:
		GPIO_writePin(DC_MOTOR_IN1_PORT_ID, DC_MOTOR_IN1_PIN_ID, LOGIC_LOW);
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	65 e0       	ldi	r22, 0x05	; 5
    191a:	40 e0       	ldi	r20, 0x00	; 0
    191c:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_IN2_PORT_ID, DC_MOTOR_IN2_PIN_ID, LOGIC_HIGH);
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	66 e0       	ldi	r22, 0x06	; 6
    1924:	41 e0       	ldi	r20, 0x01	; 1
    1926:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <GPIO_writePin>
		break;

		}

}
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	cf 91       	pop	r28
    1934:	df 91       	pop	r29
    1936:	08 95       	ret

00001938 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1938:	df 93       	push	r29
    193a:	cf 93       	push	r28
    193c:	00 d0       	rcall	.+0      	; 0x193e <EEPROM_writeByte+0x6>
    193e:	00 d0       	rcall	.+0      	; 0x1940 <EEPROM_writeByte+0x8>
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	9a 83       	std	Y+2, r25	; 0x02
    1946:	89 83       	std	Y+1, r24	; 0x01
    1948:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    194a:	0e 94 9d 11 	call	0x233a	; 0x233a <TWI_start>
    if (TWI_getStatus() != TWI_START)
    194e:	0e 94 f5 11 	call	0x23ea	; 0x23ea <TWI_getStatus>
    1952:	88 30       	cpi	r24, 0x08	; 8
    1954:	11 f0       	breq	.+4      	; 0x195a <EEPROM_writeByte+0x22>
        return ERROR;
    1956:	1c 82       	std	Y+4, r1	; 0x04
    1958:	28 c0       	rjmp	.+80     	; 0x19aa <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	9a 81       	ldd	r25, Y+2	; 0x02
    195e:	80 70       	andi	r24, 0x00	; 0
    1960:	97 70       	andi	r25, 0x07	; 7
    1962:	88 0f       	add	r24, r24
    1964:	89 2f       	mov	r24, r25
    1966:	88 1f       	adc	r24, r24
    1968:	99 0b       	sbc	r25, r25
    196a:	91 95       	neg	r25
    196c:	80 6a       	ori	r24, 0xA0	; 160
    196e:	0e 94 b8 11 	call	0x2370	; 0x2370 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1972:	0e 94 f5 11 	call	0x23ea	; 0x23ea <TWI_getStatus>
    1976:	88 31       	cpi	r24, 0x18	; 24
    1978:	11 f0       	breq	.+4      	; 0x197e <EEPROM_writeByte+0x46>
        return ERROR; 
    197a:	1c 82       	std	Y+4, r1	; 0x04
    197c:	16 c0       	rjmp	.+44     	; 0x19aa <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    197e:	89 81       	ldd	r24, Y+1	; 0x01
    1980:	0e 94 b8 11 	call	0x2370	; 0x2370 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1984:	0e 94 f5 11 	call	0x23ea	; 0x23ea <TWI_getStatus>
    1988:	88 32       	cpi	r24, 0x28	; 40
    198a:	11 f0       	breq	.+4      	; 0x1990 <EEPROM_writeByte+0x58>
        return ERROR;
    198c:	1c 82       	std	Y+4, r1	; 0x04
    198e:	0d c0       	rjmp	.+26     	; 0x19aa <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1990:	8b 81       	ldd	r24, Y+3	; 0x03
    1992:	0e 94 b8 11 	call	0x2370	; 0x2370 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1996:	0e 94 f5 11 	call	0x23ea	; 0x23ea <TWI_getStatus>
    199a:	88 32       	cpi	r24, 0x28	; 40
    199c:	11 f0       	breq	.+4      	; 0x19a2 <EEPROM_writeByte+0x6a>
        return ERROR;
    199e:	1c 82       	std	Y+4, r1	; 0x04
    19a0:	04 c0       	rjmp	.+8      	; 0x19aa <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    19a2:	0e 94 ad 11 	call	0x235a	; 0x235a <TWI_stop>
	
    return SUCCESS;
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	8c 83       	std	Y+4, r24	; 0x04
    19aa:	8c 81       	ldd	r24, Y+4	; 0x04
}
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	cf 91       	pop	r28
    19b6:	df 91       	pop	r29
    19b8:	08 95       	ret

000019ba <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    19ba:	df 93       	push	r29
    19bc:	cf 93       	push	r28
    19be:	00 d0       	rcall	.+0      	; 0x19c0 <EEPROM_readByte+0x6>
    19c0:	00 d0       	rcall	.+0      	; 0x19c2 <EEPROM_readByte+0x8>
    19c2:	0f 92       	push	r0
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62
    19c8:	9a 83       	std	Y+2, r25	; 0x02
    19ca:	89 83       	std	Y+1, r24	; 0x01
    19cc:	7c 83       	std	Y+4, r23	; 0x04
    19ce:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    19d0:	0e 94 9d 11 	call	0x233a	; 0x233a <TWI_start>
    if (TWI_getStatus() != TWI_START)
    19d4:	0e 94 f5 11 	call	0x23ea	; 0x23ea <TWI_getStatus>
    19d8:	88 30       	cpi	r24, 0x08	; 8
    19da:	11 f0       	breq	.+4      	; 0x19e0 <EEPROM_readByte+0x26>
        return ERROR;
    19dc:	1d 82       	std	Y+5, r1	; 0x05
    19de:	44 c0       	rjmp	.+136    	; 0x1a68 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    19e0:	89 81       	ldd	r24, Y+1	; 0x01
    19e2:	9a 81       	ldd	r25, Y+2	; 0x02
    19e4:	80 70       	andi	r24, 0x00	; 0
    19e6:	97 70       	andi	r25, 0x07	; 7
    19e8:	88 0f       	add	r24, r24
    19ea:	89 2f       	mov	r24, r25
    19ec:	88 1f       	adc	r24, r24
    19ee:	99 0b       	sbc	r25, r25
    19f0:	91 95       	neg	r25
    19f2:	80 6a       	ori	r24, 0xA0	; 160
    19f4:	0e 94 b8 11 	call	0x2370	; 0x2370 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    19f8:	0e 94 f5 11 	call	0x23ea	; 0x23ea <TWI_getStatus>
    19fc:	88 31       	cpi	r24, 0x18	; 24
    19fe:	11 f0       	breq	.+4      	; 0x1a04 <EEPROM_readByte+0x4a>
        return ERROR;
    1a00:	1d 82       	std	Y+5, r1	; 0x05
    1a02:	32 c0       	rjmp	.+100    	; 0x1a68 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
    1a06:	0e 94 b8 11 	call	0x2370	; 0x2370 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1a0a:	0e 94 f5 11 	call	0x23ea	; 0x23ea <TWI_getStatus>
    1a0e:	88 32       	cpi	r24, 0x28	; 40
    1a10:	11 f0       	breq	.+4      	; 0x1a16 <EEPROM_readByte+0x5c>
        return ERROR;
    1a12:	1d 82       	std	Y+5, r1	; 0x05
    1a14:	29 c0       	rjmp	.+82     	; 0x1a68 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1a16:	0e 94 9d 11 	call	0x233a	; 0x233a <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1a1a:	0e 94 f5 11 	call	0x23ea	; 0x23ea <TWI_getStatus>
    1a1e:	80 31       	cpi	r24, 0x10	; 16
    1a20:	11 f0       	breq	.+4      	; 0x1a26 <EEPROM_readByte+0x6c>
        return ERROR;
    1a22:	1d 82       	std	Y+5, r1	; 0x05
    1a24:	21 c0       	rjmp	.+66     	; 0x1a68 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1a26:	89 81       	ldd	r24, Y+1	; 0x01
    1a28:	9a 81       	ldd	r25, Y+2	; 0x02
    1a2a:	80 70       	andi	r24, 0x00	; 0
    1a2c:	97 70       	andi	r25, 0x07	; 7
    1a2e:	88 0f       	add	r24, r24
    1a30:	89 2f       	mov	r24, r25
    1a32:	88 1f       	adc	r24, r24
    1a34:	99 0b       	sbc	r25, r25
    1a36:	91 95       	neg	r25
    1a38:	81 6a       	ori	r24, 0xA1	; 161
    1a3a:	0e 94 b8 11 	call	0x2370	; 0x2370 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1a3e:	0e 94 f5 11 	call	0x23ea	; 0x23ea <TWI_getStatus>
    1a42:	80 34       	cpi	r24, 0x40	; 64
    1a44:	11 f0       	breq	.+4      	; 0x1a4a <EEPROM_readByte+0x90>
        return ERROR;
    1a46:	1d 82       	std	Y+5, r1	; 0x05
    1a48:	0f c0       	rjmp	.+30     	; 0x1a68 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1a4a:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <TWI_readByteWithNACK>
    1a4e:	eb 81       	ldd	r30, Y+3	; 0x03
    1a50:	fc 81       	ldd	r31, Y+4	; 0x04
    1a52:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1a54:	0e 94 f5 11 	call	0x23ea	; 0x23ea <TWI_getStatus>
    1a58:	88 35       	cpi	r24, 0x58	; 88
    1a5a:	11 f0       	breq	.+4      	; 0x1a60 <EEPROM_readByte+0xa6>
        return ERROR;
    1a5c:	1d 82       	std	Y+5, r1	; 0x05
    1a5e:	04 c0       	rjmp	.+8      	; 0x1a68 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1a60:	0e 94 ad 11 	call	0x235a	; 0x235a <TWI_stop>

    return SUCCESS;
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	8d 83       	std	Y+5, r24	; 0x05
    1a68:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	0f 90       	pop	r0
    1a70:	0f 90       	pop	r0
    1a72:	0f 90       	pop	r0
    1a74:	cf 91       	pop	r28
    1a76:	df 91       	pop	r29
    1a78:	08 95       	ret

00001a7a <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1a7a:	df 93       	push	r29
    1a7c:	cf 93       	push	r28
    1a7e:	00 d0       	rcall	.+0      	; 0x1a80 <GPIO_setupPinDirection+0x6>
    1a80:	00 d0       	rcall	.+0      	; 0x1a82 <GPIO_setupPinDirection+0x8>
    1a82:	0f 92       	push	r0
    1a84:	cd b7       	in	r28, 0x3d	; 61
    1a86:	de b7       	in	r29, 0x3e	; 62
    1a88:	89 83       	std	Y+1, r24	; 0x01
    1a8a:	6a 83       	std	Y+2, r22	; 0x02
    1a8c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a90:	88 30       	cpi	r24, 0x08	; 8
    1a92:	08 f0       	brcs	.+2      	; 0x1a96 <GPIO_setupPinDirection+0x1c>
    1a94:	d5 c0       	rjmp	.+426    	; 0x1c40 <GPIO_setupPinDirection+0x1c6>
    1a96:	89 81       	ldd	r24, Y+1	; 0x01
    1a98:	84 30       	cpi	r24, 0x04	; 4
    1a9a:	08 f0       	brcs	.+2      	; 0x1a9e <GPIO_setupPinDirection+0x24>
    1a9c:	d1 c0       	rjmp	.+418    	; 0x1c40 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01
    1aa0:	28 2f       	mov	r18, r24
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	3d 83       	std	Y+5, r19	; 0x05
    1aa6:	2c 83       	std	Y+4, r18	; 0x04
    1aa8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aaa:	9d 81       	ldd	r25, Y+5	; 0x05
    1aac:	81 30       	cpi	r24, 0x01	; 1
    1aae:	91 05       	cpc	r25, r1
    1ab0:	09 f4       	brne	.+2      	; 0x1ab4 <GPIO_setupPinDirection+0x3a>
    1ab2:	43 c0       	rjmp	.+134    	; 0x1b3a <GPIO_setupPinDirection+0xc0>
    1ab4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ab6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ab8:	22 30       	cpi	r18, 0x02	; 2
    1aba:	31 05       	cpc	r19, r1
    1abc:	2c f4       	brge	.+10     	; 0x1ac8 <GPIO_setupPinDirection+0x4e>
    1abe:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac2:	00 97       	sbiw	r24, 0x00	; 0
    1ac4:	71 f0       	breq	.+28     	; 0x1ae2 <GPIO_setupPinDirection+0x68>
    1ac6:	bc c0       	rjmp	.+376    	; 0x1c40 <GPIO_setupPinDirection+0x1c6>
    1ac8:	2c 81       	ldd	r18, Y+4	; 0x04
    1aca:	3d 81       	ldd	r19, Y+5	; 0x05
    1acc:	22 30       	cpi	r18, 0x02	; 2
    1ace:	31 05       	cpc	r19, r1
    1ad0:	09 f4       	brne	.+2      	; 0x1ad4 <GPIO_setupPinDirection+0x5a>
    1ad2:	5f c0       	rjmp	.+190    	; 0x1b92 <GPIO_setupPinDirection+0x118>
    1ad4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad8:	83 30       	cpi	r24, 0x03	; 3
    1ada:	91 05       	cpc	r25, r1
    1adc:	09 f4       	brne	.+2      	; 0x1ae0 <GPIO_setupPinDirection+0x66>
    1ade:	85 c0       	rjmp	.+266    	; 0x1bea <GPIO_setupPinDirection+0x170>
    1ae0:	af c0       	rjmp	.+350    	; 0x1c40 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	81 30       	cpi	r24, 0x01	; 1
    1ae6:	a1 f4       	brne	.+40     	; 0x1b10 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1ae8:	aa e3       	ldi	r26, 0x3A	; 58
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	ea e3       	ldi	r30, 0x3A	; 58
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	48 2f       	mov	r20, r24
    1af4:	8a 81       	ldd	r24, Y+2	; 0x02
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	02 2e       	mov	r0, r18
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <GPIO_setupPinDirection+0x8c>
    1b02:	88 0f       	add	r24, r24
    1b04:	99 1f       	adc	r25, r25
    1b06:	0a 94       	dec	r0
    1b08:	e2 f7       	brpl	.-8      	; 0x1b02 <GPIO_setupPinDirection+0x88>
    1b0a:	84 2b       	or	r24, r20
    1b0c:	8c 93       	st	X, r24
    1b0e:	98 c0       	rjmp	.+304    	; 0x1c40 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1b10:	aa e3       	ldi	r26, 0x3A	; 58
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
    1b14:	ea e3       	ldi	r30, 0x3A	; 58
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	48 2f       	mov	r20, r24
    1b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1e:	28 2f       	mov	r18, r24
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	02 2e       	mov	r0, r18
    1b28:	02 c0       	rjmp	.+4      	; 0x1b2e <GPIO_setupPinDirection+0xb4>
    1b2a:	88 0f       	add	r24, r24
    1b2c:	99 1f       	adc	r25, r25
    1b2e:	0a 94       	dec	r0
    1b30:	e2 f7       	brpl	.-8      	; 0x1b2a <GPIO_setupPinDirection+0xb0>
    1b32:	80 95       	com	r24
    1b34:	84 23       	and	r24, r20
    1b36:	8c 93       	st	X, r24
    1b38:	83 c0       	rjmp	.+262    	; 0x1c40 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3c:	81 30       	cpi	r24, 0x01	; 1
    1b3e:	a1 f4       	brne	.+40     	; 0x1b68 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1b40:	a7 e3       	ldi	r26, 0x37	; 55
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	e7 e3       	ldi	r30, 0x37	; 55
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	48 2f       	mov	r20, r24
    1b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4e:	28 2f       	mov	r18, r24
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	02 2e       	mov	r0, r18
    1b58:	02 c0       	rjmp	.+4      	; 0x1b5e <GPIO_setupPinDirection+0xe4>
    1b5a:	88 0f       	add	r24, r24
    1b5c:	99 1f       	adc	r25, r25
    1b5e:	0a 94       	dec	r0
    1b60:	e2 f7       	brpl	.-8      	; 0x1b5a <GPIO_setupPinDirection+0xe0>
    1b62:	84 2b       	or	r24, r20
    1b64:	8c 93       	st	X, r24
    1b66:	6c c0       	rjmp	.+216    	; 0x1c40 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1b68:	a7 e3       	ldi	r26, 0x37	; 55
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	e7 e3       	ldi	r30, 0x37	; 55
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	48 2f       	mov	r20, r24
    1b74:	8a 81       	ldd	r24, Y+2	; 0x02
    1b76:	28 2f       	mov	r18, r24
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	02 2e       	mov	r0, r18
    1b80:	02 c0       	rjmp	.+4      	; 0x1b86 <GPIO_setupPinDirection+0x10c>
    1b82:	88 0f       	add	r24, r24
    1b84:	99 1f       	adc	r25, r25
    1b86:	0a 94       	dec	r0
    1b88:	e2 f7       	brpl	.-8      	; 0x1b82 <GPIO_setupPinDirection+0x108>
    1b8a:	80 95       	com	r24
    1b8c:	84 23       	and	r24, r20
    1b8e:	8c 93       	st	X, r24
    1b90:	57 c0       	rjmp	.+174    	; 0x1c40 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1b92:	8b 81       	ldd	r24, Y+3	; 0x03
    1b94:	81 30       	cpi	r24, 0x01	; 1
    1b96:	a1 f4       	brne	.+40     	; 0x1bc0 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1b98:	a4 e3       	ldi	r26, 0x34	; 52
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	e4 e3       	ldi	r30, 0x34	; 52
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	48 2f       	mov	r20, r24
    1ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba6:	28 2f       	mov	r18, r24
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	02 2e       	mov	r0, r18
    1bb0:	02 c0       	rjmp	.+4      	; 0x1bb6 <GPIO_setupPinDirection+0x13c>
    1bb2:	88 0f       	add	r24, r24
    1bb4:	99 1f       	adc	r25, r25
    1bb6:	0a 94       	dec	r0
    1bb8:	e2 f7       	brpl	.-8      	; 0x1bb2 <GPIO_setupPinDirection+0x138>
    1bba:	84 2b       	or	r24, r20
    1bbc:	8c 93       	st	X, r24
    1bbe:	40 c0       	rjmp	.+128    	; 0x1c40 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1bc0:	a4 e3       	ldi	r26, 0x34	; 52
    1bc2:	b0 e0       	ldi	r27, 0x00	; 0
    1bc4:	e4 e3       	ldi	r30, 0x34	; 52
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	48 2f       	mov	r20, r24
    1bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bce:	28 2f       	mov	r18, r24
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	02 2e       	mov	r0, r18
    1bd8:	02 c0       	rjmp	.+4      	; 0x1bde <GPIO_setupPinDirection+0x164>
    1bda:	88 0f       	add	r24, r24
    1bdc:	99 1f       	adc	r25, r25
    1bde:	0a 94       	dec	r0
    1be0:	e2 f7       	brpl	.-8      	; 0x1bda <GPIO_setupPinDirection+0x160>
    1be2:	80 95       	com	r24
    1be4:	84 23       	and	r24, r20
    1be6:	8c 93       	st	X, r24
    1be8:	2b c0       	rjmp	.+86     	; 0x1c40 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	81 30       	cpi	r24, 0x01	; 1
    1bee:	a1 f4       	brne	.+40     	; 0x1c18 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1bf0:	a1 e3       	ldi	r26, 0x31	; 49
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	e1 e3       	ldi	r30, 0x31	; 49
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	48 2f       	mov	r20, r24
    1bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfe:	28 2f       	mov	r18, r24
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	02 2e       	mov	r0, r18
    1c08:	02 c0       	rjmp	.+4      	; 0x1c0e <GPIO_setupPinDirection+0x194>
    1c0a:	88 0f       	add	r24, r24
    1c0c:	99 1f       	adc	r25, r25
    1c0e:	0a 94       	dec	r0
    1c10:	e2 f7       	brpl	.-8      	; 0x1c0a <GPIO_setupPinDirection+0x190>
    1c12:	84 2b       	or	r24, r20
    1c14:	8c 93       	st	X, r24
    1c16:	14 c0       	rjmp	.+40     	; 0x1c40 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1c18:	a1 e3       	ldi	r26, 0x31	; 49
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	e1 e3       	ldi	r30, 0x31	; 49
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	48 2f       	mov	r20, r24
    1c24:	8a 81       	ldd	r24, Y+2	; 0x02
    1c26:	28 2f       	mov	r18, r24
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	02 2e       	mov	r0, r18
    1c30:	02 c0       	rjmp	.+4      	; 0x1c36 <GPIO_setupPinDirection+0x1bc>
    1c32:	88 0f       	add	r24, r24
    1c34:	99 1f       	adc	r25, r25
    1c36:	0a 94       	dec	r0
    1c38:	e2 f7       	brpl	.-8      	; 0x1c32 <GPIO_setupPinDirection+0x1b8>
    1c3a:	80 95       	com	r24
    1c3c:	84 23       	and	r24, r20
    1c3e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1c40:	0f 90       	pop	r0
    1c42:	0f 90       	pop	r0
    1c44:	0f 90       	pop	r0
    1c46:	0f 90       	pop	r0
    1c48:	0f 90       	pop	r0
    1c4a:	cf 91       	pop	r28
    1c4c:	df 91       	pop	r29
    1c4e:	08 95       	ret

00001c50 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	00 d0       	rcall	.+0      	; 0x1c56 <GPIO_writePin+0x6>
    1c56:	00 d0       	rcall	.+0      	; 0x1c58 <GPIO_writePin+0x8>
    1c58:	0f 92       	push	r0
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62
    1c5e:	89 83       	std	Y+1, r24	; 0x01
    1c60:	6a 83       	std	Y+2, r22	; 0x02
    1c62:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	88 30       	cpi	r24, 0x08	; 8
    1c68:	08 f0       	brcs	.+2      	; 0x1c6c <GPIO_writePin+0x1c>
    1c6a:	d5 c0       	rjmp	.+426    	; 0x1e16 <GPIO_writePin+0x1c6>
    1c6c:	89 81       	ldd	r24, Y+1	; 0x01
    1c6e:	84 30       	cpi	r24, 0x04	; 4
    1c70:	08 f0       	brcs	.+2      	; 0x1c74 <GPIO_writePin+0x24>
    1c72:	d1 c0       	rjmp	.+418    	; 0x1e16 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1c74:	89 81       	ldd	r24, Y+1	; 0x01
    1c76:	28 2f       	mov	r18, r24
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	3d 83       	std	Y+5, r19	; 0x05
    1c7c:	2c 83       	std	Y+4, r18	; 0x04
    1c7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c80:	9d 81       	ldd	r25, Y+5	; 0x05
    1c82:	81 30       	cpi	r24, 0x01	; 1
    1c84:	91 05       	cpc	r25, r1
    1c86:	09 f4       	brne	.+2      	; 0x1c8a <GPIO_writePin+0x3a>
    1c88:	43 c0       	rjmp	.+134    	; 0x1d10 <GPIO_writePin+0xc0>
    1c8a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c8c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c8e:	22 30       	cpi	r18, 0x02	; 2
    1c90:	31 05       	cpc	r19, r1
    1c92:	2c f4       	brge	.+10     	; 0x1c9e <GPIO_writePin+0x4e>
    1c94:	8c 81       	ldd	r24, Y+4	; 0x04
    1c96:	9d 81       	ldd	r25, Y+5	; 0x05
    1c98:	00 97       	sbiw	r24, 0x00	; 0
    1c9a:	71 f0       	breq	.+28     	; 0x1cb8 <GPIO_writePin+0x68>
    1c9c:	bc c0       	rjmp	.+376    	; 0x1e16 <GPIO_writePin+0x1c6>
    1c9e:	2c 81       	ldd	r18, Y+4	; 0x04
    1ca0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ca2:	22 30       	cpi	r18, 0x02	; 2
    1ca4:	31 05       	cpc	r19, r1
    1ca6:	09 f4       	brne	.+2      	; 0x1caa <GPIO_writePin+0x5a>
    1ca8:	5f c0       	rjmp	.+190    	; 0x1d68 <GPIO_writePin+0x118>
    1caa:	8c 81       	ldd	r24, Y+4	; 0x04
    1cac:	9d 81       	ldd	r25, Y+5	; 0x05
    1cae:	83 30       	cpi	r24, 0x03	; 3
    1cb0:	91 05       	cpc	r25, r1
    1cb2:	09 f4       	brne	.+2      	; 0x1cb6 <GPIO_writePin+0x66>
    1cb4:	85 c0       	rjmp	.+266    	; 0x1dc0 <GPIO_writePin+0x170>
    1cb6:	af c0       	rjmp	.+350    	; 0x1e16 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cba:	81 30       	cpi	r24, 0x01	; 1
    1cbc:	a1 f4       	brne	.+40     	; 0x1ce6 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1cbe:	ab e3       	ldi	r26, 0x3B	; 59
    1cc0:	b0 e0       	ldi	r27, 0x00	; 0
    1cc2:	eb e3       	ldi	r30, 0x3B	; 59
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	48 2f       	mov	r20, r24
    1cca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ccc:	28 2f       	mov	r18, r24
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	02 2e       	mov	r0, r18
    1cd6:	02 c0       	rjmp	.+4      	; 0x1cdc <GPIO_writePin+0x8c>
    1cd8:	88 0f       	add	r24, r24
    1cda:	99 1f       	adc	r25, r25
    1cdc:	0a 94       	dec	r0
    1cde:	e2 f7       	brpl	.-8      	; 0x1cd8 <GPIO_writePin+0x88>
    1ce0:	84 2b       	or	r24, r20
    1ce2:	8c 93       	st	X, r24
    1ce4:	98 c0       	rjmp	.+304    	; 0x1e16 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1ce6:	ab e3       	ldi	r26, 0x3B	; 59
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	eb e3       	ldi	r30, 0x3B	; 59
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	48 2f       	mov	r20, r24
    1cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf4:	28 2f       	mov	r18, r24
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	02 2e       	mov	r0, r18
    1cfe:	02 c0       	rjmp	.+4      	; 0x1d04 <GPIO_writePin+0xb4>
    1d00:	88 0f       	add	r24, r24
    1d02:	99 1f       	adc	r25, r25
    1d04:	0a 94       	dec	r0
    1d06:	e2 f7       	brpl	.-8      	; 0x1d00 <GPIO_writePin+0xb0>
    1d08:	80 95       	com	r24
    1d0a:	84 23       	and	r24, r20
    1d0c:	8c 93       	st	X, r24
    1d0e:	83 c0       	rjmp	.+262    	; 0x1e16 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1d10:	8b 81       	ldd	r24, Y+3	; 0x03
    1d12:	81 30       	cpi	r24, 0x01	; 1
    1d14:	a1 f4       	brne	.+40     	; 0x1d3e <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1d16:	a8 e3       	ldi	r26, 0x38	; 56
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	e8 e3       	ldi	r30, 0x38	; 56
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	48 2f       	mov	r20, r24
    1d22:	8a 81       	ldd	r24, Y+2	; 0x02
    1d24:	28 2f       	mov	r18, r24
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	02 2e       	mov	r0, r18
    1d2e:	02 c0       	rjmp	.+4      	; 0x1d34 <GPIO_writePin+0xe4>
    1d30:	88 0f       	add	r24, r24
    1d32:	99 1f       	adc	r25, r25
    1d34:	0a 94       	dec	r0
    1d36:	e2 f7       	brpl	.-8      	; 0x1d30 <GPIO_writePin+0xe0>
    1d38:	84 2b       	or	r24, r20
    1d3a:	8c 93       	st	X, r24
    1d3c:	6c c0       	rjmp	.+216    	; 0x1e16 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1d3e:	a8 e3       	ldi	r26, 0x38	; 56
    1d40:	b0 e0       	ldi	r27, 0x00	; 0
    1d42:	e8 e3       	ldi	r30, 0x38	; 56
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	48 2f       	mov	r20, r24
    1d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4c:	28 2f       	mov	r18, r24
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	02 2e       	mov	r0, r18
    1d56:	02 c0       	rjmp	.+4      	; 0x1d5c <GPIO_writePin+0x10c>
    1d58:	88 0f       	add	r24, r24
    1d5a:	99 1f       	adc	r25, r25
    1d5c:	0a 94       	dec	r0
    1d5e:	e2 f7       	brpl	.-8      	; 0x1d58 <GPIO_writePin+0x108>
    1d60:	80 95       	com	r24
    1d62:	84 23       	and	r24, r20
    1d64:	8c 93       	st	X, r24
    1d66:	57 c0       	rjmp	.+174    	; 0x1e16 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1d68:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6a:	81 30       	cpi	r24, 0x01	; 1
    1d6c:	a1 f4       	brne	.+40     	; 0x1d96 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1d6e:	a5 e3       	ldi	r26, 0x35	; 53
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	e5 e3       	ldi	r30, 0x35	; 53
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	48 2f       	mov	r20, r24
    1d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7c:	28 2f       	mov	r18, r24
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	02 2e       	mov	r0, r18
    1d86:	02 c0       	rjmp	.+4      	; 0x1d8c <GPIO_writePin+0x13c>
    1d88:	88 0f       	add	r24, r24
    1d8a:	99 1f       	adc	r25, r25
    1d8c:	0a 94       	dec	r0
    1d8e:	e2 f7       	brpl	.-8      	; 0x1d88 <GPIO_writePin+0x138>
    1d90:	84 2b       	or	r24, r20
    1d92:	8c 93       	st	X, r24
    1d94:	40 c0       	rjmp	.+128    	; 0x1e16 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1d96:	a5 e3       	ldi	r26, 0x35	; 53
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	e5 e3       	ldi	r30, 0x35	; 53
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	48 2f       	mov	r20, r24
    1da2:	8a 81       	ldd	r24, Y+2	; 0x02
    1da4:	28 2f       	mov	r18, r24
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	02 2e       	mov	r0, r18
    1dae:	02 c0       	rjmp	.+4      	; 0x1db4 <GPIO_writePin+0x164>
    1db0:	88 0f       	add	r24, r24
    1db2:	99 1f       	adc	r25, r25
    1db4:	0a 94       	dec	r0
    1db6:	e2 f7       	brpl	.-8      	; 0x1db0 <GPIO_writePin+0x160>
    1db8:	80 95       	com	r24
    1dba:	84 23       	and	r24, r20
    1dbc:	8c 93       	st	X, r24
    1dbe:	2b c0       	rjmp	.+86     	; 0x1e16 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc2:	81 30       	cpi	r24, 0x01	; 1
    1dc4:	a1 f4       	brne	.+40     	; 0x1dee <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1dc6:	a2 e3       	ldi	r26, 0x32	; 50
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	e2 e3       	ldi	r30, 0x32	; 50
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	48 2f       	mov	r20, r24
    1dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd4:	28 2f       	mov	r18, r24
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	02 2e       	mov	r0, r18
    1dde:	02 c0       	rjmp	.+4      	; 0x1de4 <GPIO_writePin+0x194>
    1de0:	88 0f       	add	r24, r24
    1de2:	99 1f       	adc	r25, r25
    1de4:	0a 94       	dec	r0
    1de6:	e2 f7       	brpl	.-8      	; 0x1de0 <GPIO_writePin+0x190>
    1de8:	84 2b       	or	r24, r20
    1dea:	8c 93       	st	X, r24
    1dec:	14 c0       	rjmp	.+40     	; 0x1e16 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1dee:	a2 e3       	ldi	r26, 0x32	; 50
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	e2 e3       	ldi	r30, 0x32	; 50
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	48 2f       	mov	r20, r24
    1dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfc:	28 2f       	mov	r18, r24
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	02 2e       	mov	r0, r18
    1e06:	02 c0       	rjmp	.+4      	; 0x1e0c <GPIO_writePin+0x1bc>
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	0a 94       	dec	r0
    1e0e:	e2 f7       	brpl	.-8      	; 0x1e08 <GPIO_writePin+0x1b8>
    1e10:	80 95       	com	r24
    1e12:	84 23       	and	r24, r20
    1e14:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1e16:	0f 90       	pop	r0
    1e18:	0f 90       	pop	r0
    1e1a:	0f 90       	pop	r0
    1e1c:	0f 90       	pop	r0
    1e1e:	0f 90       	pop	r0
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	08 95       	ret

00001e26 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1e26:	df 93       	push	r29
    1e28:	cf 93       	push	r28
    1e2a:	00 d0       	rcall	.+0      	; 0x1e2c <GPIO_readPin+0x6>
    1e2c:	00 d0       	rcall	.+0      	; 0x1e2e <GPIO_readPin+0x8>
    1e2e:	0f 92       	push	r0
    1e30:	cd b7       	in	r28, 0x3d	; 61
    1e32:	de b7       	in	r29, 0x3e	; 62
    1e34:	8a 83       	std	Y+2, r24	; 0x02
    1e36:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1e38:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3c:	88 30       	cpi	r24, 0x08	; 8
    1e3e:	08 f0       	brcs	.+2      	; 0x1e42 <GPIO_readPin+0x1c>
    1e40:	84 c0       	rjmp	.+264    	; 0x1f4a <GPIO_readPin+0x124>
    1e42:	8a 81       	ldd	r24, Y+2	; 0x02
    1e44:	84 30       	cpi	r24, 0x04	; 4
    1e46:	08 f0       	brcs	.+2      	; 0x1e4a <GPIO_readPin+0x24>
    1e48:	80 c0       	rjmp	.+256    	; 0x1f4a <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4c:	28 2f       	mov	r18, r24
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	3d 83       	std	Y+5, r19	; 0x05
    1e52:	2c 83       	std	Y+4, r18	; 0x04
    1e54:	4c 81       	ldd	r20, Y+4	; 0x04
    1e56:	5d 81       	ldd	r21, Y+5	; 0x05
    1e58:	41 30       	cpi	r20, 0x01	; 1
    1e5a:	51 05       	cpc	r21, r1
    1e5c:	79 f1       	breq	.+94     	; 0x1ebc <GPIO_readPin+0x96>
    1e5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e60:	9d 81       	ldd	r25, Y+5	; 0x05
    1e62:	82 30       	cpi	r24, 0x02	; 2
    1e64:	91 05       	cpc	r25, r1
    1e66:	34 f4       	brge	.+12     	; 0x1e74 <GPIO_readPin+0x4e>
    1e68:	2c 81       	ldd	r18, Y+4	; 0x04
    1e6a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e6c:	21 15       	cp	r18, r1
    1e6e:	31 05       	cpc	r19, r1
    1e70:	69 f0       	breq	.+26     	; 0x1e8c <GPIO_readPin+0x66>
    1e72:	6b c0       	rjmp	.+214    	; 0x1f4a <GPIO_readPin+0x124>
    1e74:	4c 81       	ldd	r20, Y+4	; 0x04
    1e76:	5d 81       	ldd	r21, Y+5	; 0x05
    1e78:	42 30       	cpi	r20, 0x02	; 2
    1e7a:	51 05       	cpc	r21, r1
    1e7c:	b9 f1       	breq	.+110    	; 0x1eec <GPIO_readPin+0xc6>
    1e7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e80:	9d 81       	ldd	r25, Y+5	; 0x05
    1e82:	83 30       	cpi	r24, 0x03	; 3
    1e84:	91 05       	cpc	r25, r1
    1e86:	09 f4       	brne	.+2      	; 0x1e8a <GPIO_readPin+0x64>
    1e88:	49 c0       	rjmp	.+146    	; 0x1f1c <GPIO_readPin+0xf6>
    1e8a:	5f c0       	rjmp	.+190    	; 0x1f4a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1e8c:	e9 e3       	ldi	r30, 0x39	; 57
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	80 81       	ld	r24, Z
    1e92:	28 2f       	mov	r18, r24
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	8b 81       	ldd	r24, Y+3	; 0x03
    1e98:	88 2f       	mov	r24, r24
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	a9 01       	movw	r20, r18
    1e9e:	02 c0       	rjmp	.+4      	; 0x1ea4 <GPIO_readPin+0x7e>
    1ea0:	55 95       	asr	r21
    1ea2:	47 95       	ror	r20
    1ea4:	8a 95       	dec	r24
    1ea6:	e2 f7       	brpl	.-8      	; 0x1ea0 <GPIO_readPin+0x7a>
    1ea8:	ca 01       	movw	r24, r20
    1eaa:	81 70       	andi	r24, 0x01	; 1
    1eac:	90 70       	andi	r25, 0x00	; 0
    1eae:	88 23       	and	r24, r24
    1eb0:	19 f0       	breq	.+6      	; 0x1eb8 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	89 83       	std	Y+1, r24	; 0x01
    1eb6:	49 c0       	rjmp	.+146    	; 0x1f4a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1eb8:	19 82       	std	Y+1, r1	; 0x01
    1eba:	47 c0       	rjmp	.+142    	; 0x1f4a <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1ebc:	e6 e3       	ldi	r30, 0x36	; 54
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
    1ec2:	28 2f       	mov	r18, r24
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec8:	88 2f       	mov	r24, r24
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	a9 01       	movw	r20, r18
    1ece:	02 c0       	rjmp	.+4      	; 0x1ed4 <GPIO_readPin+0xae>
    1ed0:	55 95       	asr	r21
    1ed2:	47 95       	ror	r20
    1ed4:	8a 95       	dec	r24
    1ed6:	e2 f7       	brpl	.-8      	; 0x1ed0 <GPIO_readPin+0xaa>
    1ed8:	ca 01       	movw	r24, r20
    1eda:	81 70       	andi	r24, 0x01	; 1
    1edc:	90 70       	andi	r25, 0x00	; 0
    1ede:	88 23       	and	r24, r24
    1ee0:	19 f0       	breq	.+6      	; 0x1ee8 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	89 83       	std	Y+1, r24	; 0x01
    1ee6:	31 c0       	rjmp	.+98     	; 0x1f4a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ee8:	19 82       	std	Y+1, r1	; 0x01
    1eea:	2f c0       	rjmp	.+94     	; 0x1f4a <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1eec:	e3 e3       	ldi	r30, 0x33	; 51
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	80 81       	ld	r24, Z
    1ef2:	28 2f       	mov	r18, r24
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef8:	88 2f       	mov	r24, r24
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	a9 01       	movw	r20, r18
    1efe:	02 c0       	rjmp	.+4      	; 0x1f04 <GPIO_readPin+0xde>
    1f00:	55 95       	asr	r21
    1f02:	47 95       	ror	r20
    1f04:	8a 95       	dec	r24
    1f06:	e2 f7       	brpl	.-8      	; 0x1f00 <GPIO_readPin+0xda>
    1f08:	ca 01       	movw	r24, r20
    1f0a:	81 70       	andi	r24, 0x01	; 1
    1f0c:	90 70       	andi	r25, 0x00	; 0
    1f0e:	88 23       	and	r24, r24
    1f10:	19 f0       	breq	.+6      	; 0x1f18 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	89 83       	std	Y+1, r24	; 0x01
    1f16:	19 c0       	rjmp	.+50     	; 0x1f4a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f18:	19 82       	std	Y+1, r1	; 0x01
    1f1a:	17 c0       	rjmp	.+46     	; 0x1f4a <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1f1c:	e0 e3       	ldi	r30, 0x30	; 48
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	80 81       	ld	r24, Z
    1f22:	28 2f       	mov	r18, r24
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	8b 81       	ldd	r24, Y+3	; 0x03
    1f28:	88 2f       	mov	r24, r24
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	a9 01       	movw	r20, r18
    1f2e:	02 c0       	rjmp	.+4      	; 0x1f34 <GPIO_readPin+0x10e>
    1f30:	55 95       	asr	r21
    1f32:	47 95       	ror	r20
    1f34:	8a 95       	dec	r24
    1f36:	e2 f7       	brpl	.-8      	; 0x1f30 <GPIO_readPin+0x10a>
    1f38:	ca 01       	movw	r24, r20
    1f3a:	81 70       	andi	r24, 0x01	; 1
    1f3c:	90 70       	andi	r25, 0x00	; 0
    1f3e:	88 23       	and	r24, r24
    1f40:	19 f0       	breq	.+6      	; 0x1f48 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	89 83       	std	Y+1, r24	; 0x01
    1f46:	01 c0       	rjmp	.+2      	; 0x1f4a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f48:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1f4a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f4c:	0f 90       	pop	r0
    1f4e:	0f 90       	pop	r0
    1f50:	0f 90       	pop	r0
    1f52:	0f 90       	pop	r0
    1f54:	0f 90       	pop	r0
    1f56:	cf 91       	pop	r28
    1f58:	df 91       	pop	r29
    1f5a:	08 95       	ret

00001f5c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1f5c:	df 93       	push	r29
    1f5e:	cf 93       	push	r28
    1f60:	00 d0       	rcall	.+0      	; 0x1f62 <GPIO_setupPortDirection+0x6>
    1f62:	00 d0       	rcall	.+0      	; 0x1f64 <GPIO_setupPortDirection+0x8>
    1f64:	cd b7       	in	r28, 0x3d	; 61
    1f66:	de b7       	in	r29, 0x3e	; 62
    1f68:	89 83       	std	Y+1, r24	; 0x01
    1f6a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	84 30       	cpi	r24, 0x04	; 4
    1f70:	90 f5       	brcc	.+100    	; 0x1fd6 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
    1f74:	28 2f       	mov	r18, r24
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	3c 83       	std	Y+4, r19	; 0x04
    1f7a:	2b 83       	std	Y+3, r18	; 0x03
    1f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f80:	81 30       	cpi	r24, 0x01	; 1
    1f82:	91 05       	cpc	r25, r1
    1f84:	d1 f0       	breq	.+52     	; 0x1fba <GPIO_setupPortDirection+0x5e>
    1f86:	2b 81       	ldd	r18, Y+3	; 0x03
    1f88:	3c 81       	ldd	r19, Y+4	; 0x04
    1f8a:	22 30       	cpi	r18, 0x02	; 2
    1f8c:	31 05       	cpc	r19, r1
    1f8e:	2c f4       	brge	.+10     	; 0x1f9a <GPIO_setupPortDirection+0x3e>
    1f90:	8b 81       	ldd	r24, Y+3	; 0x03
    1f92:	9c 81       	ldd	r25, Y+4	; 0x04
    1f94:	00 97       	sbiw	r24, 0x00	; 0
    1f96:	61 f0       	breq	.+24     	; 0x1fb0 <GPIO_setupPortDirection+0x54>
    1f98:	1e c0       	rjmp	.+60     	; 0x1fd6 <GPIO_setupPortDirection+0x7a>
    1f9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f9c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f9e:	22 30       	cpi	r18, 0x02	; 2
    1fa0:	31 05       	cpc	r19, r1
    1fa2:	81 f0       	breq	.+32     	; 0x1fc4 <GPIO_setupPortDirection+0x68>
    1fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa8:	83 30       	cpi	r24, 0x03	; 3
    1faa:	91 05       	cpc	r25, r1
    1fac:	81 f0       	breq	.+32     	; 0x1fce <GPIO_setupPortDirection+0x72>
    1fae:	13 c0       	rjmp	.+38     	; 0x1fd6 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1fb0:	ea e3       	ldi	r30, 0x3A	; 58
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb6:	80 83       	st	Z, r24
    1fb8:	0e c0       	rjmp	.+28     	; 0x1fd6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1fba:	e7 e3       	ldi	r30, 0x37	; 55
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc0:	80 83       	st	Z, r24
    1fc2:	09 c0       	rjmp	.+18     	; 0x1fd6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1fc4:	e4 e3       	ldi	r30, 0x34	; 52
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fca:	80 83       	st	Z, r24
    1fcc:	04 c0       	rjmp	.+8      	; 0x1fd6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1fce:	e1 e3       	ldi	r30, 0x31	; 49
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd4:	80 83       	st	Z, r24
			break;
		}
	}
}
    1fd6:	0f 90       	pop	r0
    1fd8:	0f 90       	pop	r0
    1fda:	0f 90       	pop	r0
    1fdc:	0f 90       	pop	r0
    1fde:	cf 91       	pop	r28
    1fe0:	df 91       	pop	r29
    1fe2:	08 95       	ret

00001fe4 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1fe4:	df 93       	push	r29
    1fe6:	cf 93       	push	r28
    1fe8:	00 d0       	rcall	.+0      	; 0x1fea <GPIO_writePort+0x6>
    1fea:	00 d0       	rcall	.+0      	; 0x1fec <GPIO_writePort+0x8>
    1fec:	cd b7       	in	r28, 0x3d	; 61
    1fee:	de b7       	in	r29, 0x3e	; 62
    1ff0:	89 83       	std	Y+1, r24	; 0x01
    1ff2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ff4:	89 81       	ldd	r24, Y+1	; 0x01
    1ff6:	84 30       	cpi	r24, 0x04	; 4
    1ff8:	90 f5       	brcc	.+100    	; 0x205e <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
    1ffc:	28 2f       	mov	r18, r24
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	3c 83       	std	Y+4, r19	; 0x04
    2002:	2b 83       	std	Y+3, r18	; 0x03
    2004:	8b 81       	ldd	r24, Y+3	; 0x03
    2006:	9c 81       	ldd	r25, Y+4	; 0x04
    2008:	81 30       	cpi	r24, 0x01	; 1
    200a:	91 05       	cpc	r25, r1
    200c:	d1 f0       	breq	.+52     	; 0x2042 <GPIO_writePort+0x5e>
    200e:	2b 81       	ldd	r18, Y+3	; 0x03
    2010:	3c 81       	ldd	r19, Y+4	; 0x04
    2012:	22 30       	cpi	r18, 0x02	; 2
    2014:	31 05       	cpc	r19, r1
    2016:	2c f4       	brge	.+10     	; 0x2022 <GPIO_writePort+0x3e>
    2018:	8b 81       	ldd	r24, Y+3	; 0x03
    201a:	9c 81       	ldd	r25, Y+4	; 0x04
    201c:	00 97       	sbiw	r24, 0x00	; 0
    201e:	61 f0       	breq	.+24     	; 0x2038 <GPIO_writePort+0x54>
    2020:	1e c0       	rjmp	.+60     	; 0x205e <GPIO_writePort+0x7a>
    2022:	2b 81       	ldd	r18, Y+3	; 0x03
    2024:	3c 81       	ldd	r19, Y+4	; 0x04
    2026:	22 30       	cpi	r18, 0x02	; 2
    2028:	31 05       	cpc	r19, r1
    202a:	81 f0       	breq	.+32     	; 0x204c <GPIO_writePort+0x68>
    202c:	8b 81       	ldd	r24, Y+3	; 0x03
    202e:	9c 81       	ldd	r25, Y+4	; 0x04
    2030:	83 30       	cpi	r24, 0x03	; 3
    2032:	91 05       	cpc	r25, r1
    2034:	81 f0       	breq	.+32     	; 0x2056 <GPIO_writePort+0x72>
    2036:	13 c0       	rjmp	.+38     	; 0x205e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2038:	eb e3       	ldi	r30, 0x3B	; 59
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	8a 81       	ldd	r24, Y+2	; 0x02
    203e:	80 83       	st	Z, r24
    2040:	0e c0       	rjmp	.+28     	; 0x205e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2042:	e8 e3       	ldi	r30, 0x38	; 56
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	8a 81       	ldd	r24, Y+2	; 0x02
    2048:	80 83       	st	Z, r24
    204a:	09 c0       	rjmp	.+18     	; 0x205e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    204c:	e5 e3       	ldi	r30, 0x35	; 53
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	8a 81       	ldd	r24, Y+2	; 0x02
    2052:	80 83       	st	Z, r24
    2054:	04 c0       	rjmp	.+8      	; 0x205e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2056:	e2 e3       	ldi	r30, 0x32	; 50
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	8a 81       	ldd	r24, Y+2	; 0x02
    205c:	80 83       	st	Z, r24
			break;
		}
	}
}
    205e:	0f 90       	pop	r0
    2060:	0f 90       	pop	r0
    2062:	0f 90       	pop	r0
    2064:	0f 90       	pop	r0
    2066:	cf 91       	pop	r28
    2068:	df 91       	pop	r29
    206a:	08 95       	ret

0000206c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    206c:	df 93       	push	r29
    206e:	cf 93       	push	r28
    2070:	00 d0       	rcall	.+0      	; 0x2072 <GPIO_readPort+0x6>
    2072:	00 d0       	rcall	.+0      	; 0x2074 <GPIO_readPort+0x8>
    2074:	cd b7       	in	r28, 0x3d	; 61
    2076:	de b7       	in	r29, 0x3e	; 62
    2078:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    207a:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    207c:	8a 81       	ldd	r24, Y+2	; 0x02
    207e:	84 30       	cpi	r24, 0x04	; 4
    2080:	90 f5       	brcc	.+100    	; 0x20e6 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2082:	8a 81       	ldd	r24, Y+2	; 0x02
    2084:	28 2f       	mov	r18, r24
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	3c 83       	std	Y+4, r19	; 0x04
    208a:	2b 83       	std	Y+3, r18	; 0x03
    208c:	8b 81       	ldd	r24, Y+3	; 0x03
    208e:	9c 81       	ldd	r25, Y+4	; 0x04
    2090:	81 30       	cpi	r24, 0x01	; 1
    2092:	91 05       	cpc	r25, r1
    2094:	d1 f0       	breq	.+52     	; 0x20ca <GPIO_readPort+0x5e>
    2096:	2b 81       	ldd	r18, Y+3	; 0x03
    2098:	3c 81       	ldd	r19, Y+4	; 0x04
    209a:	22 30       	cpi	r18, 0x02	; 2
    209c:	31 05       	cpc	r19, r1
    209e:	2c f4       	brge	.+10     	; 0x20aa <GPIO_readPort+0x3e>
    20a0:	8b 81       	ldd	r24, Y+3	; 0x03
    20a2:	9c 81       	ldd	r25, Y+4	; 0x04
    20a4:	00 97       	sbiw	r24, 0x00	; 0
    20a6:	61 f0       	breq	.+24     	; 0x20c0 <GPIO_readPort+0x54>
    20a8:	1e c0       	rjmp	.+60     	; 0x20e6 <GPIO_readPort+0x7a>
    20aa:	2b 81       	ldd	r18, Y+3	; 0x03
    20ac:	3c 81       	ldd	r19, Y+4	; 0x04
    20ae:	22 30       	cpi	r18, 0x02	; 2
    20b0:	31 05       	cpc	r19, r1
    20b2:	81 f0       	breq	.+32     	; 0x20d4 <GPIO_readPort+0x68>
    20b4:	8b 81       	ldd	r24, Y+3	; 0x03
    20b6:	9c 81       	ldd	r25, Y+4	; 0x04
    20b8:	83 30       	cpi	r24, 0x03	; 3
    20ba:	91 05       	cpc	r25, r1
    20bc:	81 f0       	breq	.+32     	; 0x20de <GPIO_readPort+0x72>
    20be:	13 c0       	rjmp	.+38     	; 0x20e6 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    20c0:	e9 e3       	ldi	r30, 0x39	; 57
    20c2:	f0 e0       	ldi	r31, 0x00	; 0
    20c4:	80 81       	ld	r24, Z
    20c6:	89 83       	std	Y+1, r24	; 0x01
    20c8:	0e c0       	rjmp	.+28     	; 0x20e6 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    20ca:	e6 e3       	ldi	r30, 0x36	; 54
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	89 83       	std	Y+1, r24	; 0x01
    20d2:	09 c0       	rjmp	.+18     	; 0x20e6 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    20d4:	e3 e3       	ldi	r30, 0x33	; 51
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	80 81       	ld	r24, Z
    20da:	89 83       	std	Y+1, r24	; 0x01
    20dc:	04 c0       	rjmp	.+8      	; 0x20e6 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    20de:	e0 e3       	ldi	r30, 0x30	; 48
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	80 81       	ld	r24, Z
    20e4:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    20e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    20e8:	0f 90       	pop	r0
    20ea:	0f 90       	pop	r0
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	cf 91       	pop	r28
    20f2:	df 91       	pop	r29
    20f4:	08 95       	ret

000020f6 <PWM_Timer0_Start>:
 * Setup the compare value based on the required input duty cycle
 * Setup the direction for OC0 as output pin through the GPIO driver.
 * The generated PWM signal frequency will be 500Hz to control the DC Motor speed.
 */

void PWM_Timer0_Start(uint8 duty_cycle){
    20f6:	df 93       	push	r29
    20f8:	cf 93       	push	r28
    20fa:	0f 92       	push	r0
    20fc:	cd b7       	in	r28, 0x3d	; 61
    20fe:	de b7       	in	r29, 0x3e	; 62
    2100:	89 83       	std	Y+1, r24	; 0x01

	duty_cycle =((uint16)(255*duty_cycle)) / 100;
    2102:	89 81       	ldd	r24, Y+1	; 0x01
    2104:	48 2f       	mov	r20, r24
    2106:	50 e0       	ldi	r21, 0x00	; 0
    2108:	ca 01       	movw	r24, r20
    210a:	9c 01       	movw	r18, r24
    210c:	22 0f       	add	r18, r18
    210e:	33 1f       	adc	r19, r19
    2110:	c9 01       	movw	r24, r18
    2112:	96 95       	lsr	r25
    2114:	98 2f       	mov	r25, r24
    2116:	88 27       	eor	r24, r24
    2118:	97 95       	ror	r25
    211a:	87 95       	ror	r24
    211c:	82 1b       	sub	r24, r18
    211e:	93 0b       	sbc	r25, r19
    2120:	84 0f       	add	r24, r20
    2122:	95 1f       	adc	r25, r21
    2124:	24 e6       	ldi	r18, 0x64	; 100
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	b9 01       	movw	r22, r18
    212a:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__udivmodhi4>
    212e:	cb 01       	movw	r24, r22
    2130:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0;  // Set Timer0 Initial Value to 0
    2132:	e2 e5       	ldi	r30, 0x52	; 82
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	10 82       	st	Z, r1

	OCR0  = duty_cycle; //Set Compare value
    2138:	ec e5       	ldi	r30, 0x5C	; 92
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	89 81       	ldd	r24, Y+1	; 0x01
    213e:	80 83       	st	Z, r24

	/* setup the direction for OC0 as output pin */
	GPIO_setupPinDirection(PORTB_ID , PIN3_ID , PIN_OUTPUT);
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	63 e0       	ldi	r22, 0x03	; 3
    2144:	41 e0       	ldi	r20, 0x01	; 1
    2146:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    214a:	e3 e5       	ldi	r30, 0x53	; 83
    214c:	f0 e0       	ldi	r31, 0x00	; 0
    214e:	8a e6       	ldi	r24, 0x6A	; 106
    2150:	80 83       	st	Z, r24

}
    2152:	0f 90       	pop	r0
    2154:	cf 91       	pop	r28
    2156:	df 91       	pop	r29
    2158:	08 95       	ret

0000215a <__vector_9>:
 *                               ISR                                           *
 *******************************************************************************/

/* ISR for Overflow Mode */
ISR (TIMER1_OVF_vect)
{
    215a:	1f 92       	push	r1
    215c:	0f 92       	push	r0
    215e:	0f b6       	in	r0, 0x3f	; 63
    2160:	0f 92       	push	r0
    2162:	11 24       	eor	r1, r1
    2164:	2f 93       	push	r18
    2166:	3f 93       	push	r19
    2168:	4f 93       	push	r20
    216a:	5f 93       	push	r21
    216c:	6f 93       	push	r22
    216e:	7f 93       	push	r23
    2170:	8f 93       	push	r24
    2172:	9f 93       	push	r25
    2174:	af 93       	push	r26
    2176:	bf 93       	push	r27
    2178:	ef 93       	push	r30
    217a:	ff 93       	push	r31
    217c:	df 93       	push	r29
    217e:	cf 93       	push	r28
    2180:	cd b7       	in	r28, 0x3d	; 61
    2182:	de b7       	in	r29, 0x3e	; 62
	if(calling_ISR != NULL_PTR)
    2184:	80 91 77 00 	lds	r24, 0x0077
    2188:	90 91 78 00 	lds	r25, 0x0078
    218c:	00 97       	sbiw	r24, 0x00	; 0
    218e:	29 f0       	breq	.+10     	; 0x219a <__vector_9+0x40>
	{
		(*calling_ISR)();
    2190:	e0 91 77 00 	lds	r30, 0x0077
    2194:	f0 91 78 00 	lds	r31, 0x0078
    2198:	09 95       	icall
	}
}
    219a:	cf 91       	pop	r28
    219c:	df 91       	pop	r29
    219e:	ff 91       	pop	r31
    21a0:	ef 91       	pop	r30
    21a2:	bf 91       	pop	r27
    21a4:	af 91       	pop	r26
    21a6:	9f 91       	pop	r25
    21a8:	8f 91       	pop	r24
    21aa:	7f 91       	pop	r23
    21ac:	6f 91       	pop	r22
    21ae:	5f 91       	pop	r21
    21b0:	4f 91       	pop	r20
    21b2:	3f 91       	pop	r19
    21b4:	2f 91       	pop	r18
    21b6:	0f 90       	pop	r0
    21b8:	0f be       	out	0x3f, r0	; 63
    21ba:	0f 90       	pop	r0
    21bc:	1f 90       	pop	r1
    21be:	18 95       	reti

000021c0 <__vector_7>:


/* ISR for Compare Mode */
ISR (TIMER1_COMPA_vect)
{
    21c0:	1f 92       	push	r1
    21c2:	0f 92       	push	r0
    21c4:	0f b6       	in	r0, 0x3f	; 63
    21c6:	0f 92       	push	r0
    21c8:	11 24       	eor	r1, r1
    21ca:	2f 93       	push	r18
    21cc:	3f 93       	push	r19
    21ce:	4f 93       	push	r20
    21d0:	5f 93       	push	r21
    21d2:	6f 93       	push	r22
    21d4:	7f 93       	push	r23
    21d6:	8f 93       	push	r24
    21d8:	9f 93       	push	r25
    21da:	af 93       	push	r26
    21dc:	bf 93       	push	r27
    21de:	ef 93       	push	r30
    21e0:	ff 93       	push	r31
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	cd b7       	in	r28, 0x3d	; 61
    21e8:	de b7       	in	r29, 0x3e	; 62
	if(calling_ISR != NULL_PTR)
    21ea:	80 91 77 00 	lds	r24, 0x0077
    21ee:	90 91 78 00 	lds	r25, 0x0078
    21f2:	00 97       	sbiw	r24, 0x00	; 0
    21f4:	29 f0       	breq	.+10     	; 0x2200 <__vector_7+0x40>
	{
		(*calling_ISR)();
    21f6:	e0 91 77 00 	lds	r30, 0x0077
    21fa:	f0 91 78 00 	lds	r31, 0x0078
    21fe:	09 95       	icall
	}
}
    2200:	cf 91       	pop	r28
    2202:	df 91       	pop	r29
    2204:	ff 91       	pop	r31
    2206:	ef 91       	pop	r30
    2208:	bf 91       	pop	r27
    220a:	af 91       	pop	r26
    220c:	9f 91       	pop	r25
    220e:	8f 91       	pop	r24
    2210:	7f 91       	pop	r23
    2212:	6f 91       	pop	r22
    2214:	5f 91       	pop	r21
    2216:	4f 91       	pop	r20
    2218:	3f 91       	pop	r19
    221a:	2f 91       	pop	r18
    221c:	0f 90       	pop	r0
    221e:	0f be       	out	0x3f, r0	; 63
    2220:	0f 90       	pop	r0
    2222:	1f 90       	pop	r1
    2224:	18 95       	reti

00002226 <Timer1_init>:
 *  1. Inserting the initial value for the timer.
 *  2. Selecting Timer1 Prescaler.
 *  3. Selecting Timer1 Mode.
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    2226:	df 93       	push	r29
    2228:	cf 93       	push	r28
    222a:	00 d0       	rcall	.+0      	; 0x222c <Timer1_init+0x6>
    222c:	cd b7       	in	r28, 0x3d	; 61
    222e:	de b7       	in	r29, 0x3e	; 62
    2230:	9a 83       	std	Y+2, r25	; 0x02
    2232:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Config_Ptr ->initial_value ;  /* Set the initial value for Timer1 */
    2234:	ac e4       	ldi	r26, 0x4C	; 76
    2236:	b0 e0       	ldi	r27, 0x00	; 0
    2238:	e9 81       	ldd	r30, Y+1	; 0x01
    223a:	fa 81       	ldd	r31, Y+2	; 0x02
    223c:	80 81       	ld	r24, Z
    223e:	91 81       	ldd	r25, Z+1	; 0x01
    2240:	11 96       	adiw	r26, 0x01	; 1
    2242:	9c 93       	st	X, r25
    2244:	8e 93       	st	-X, r24

	if(Config_Ptr -> mode == TIMER1_NORMAL_MODE)
    2246:	e9 81       	ldd	r30, Y+1	; 0x01
    2248:	fa 81       	ldd	r31, Y+2	; 0x02
    224a:	85 81       	ldd	r24, Z+5	; 0x05
    224c:	88 23       	and	r24, r24
    224e:	91 f4       	brne	.+36     	; 0x2274 <Timer1_init+0x4e>
	{
		TIMSK |= (1<<TOIE1);  /* Enable Timer1 Overflow Interrupt */
    2250:	a9 e5       	ldi	r26, 0x59	; 89
    2252:	b0 e0       	ldi	r27, 0x00	; 0
    2254:	e9 e5       	ldi	r30, 0x59	; 89
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	84 60       	ori	r24, 0x04	; 4
    225c:	8c 93       	st	X, r24

		/*  1. Active for non-PWM mode.
		 *  2. Choose Normal Mode.
		 *  3. Disable All Features except Normal Mode Features.
		 */
		TCCR1A = (1<<FOC1A);
    225e:	ef e4       	ldi	r30, 0x4F	; 79
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	88 e0       	ldi	r24, 0x08	; 8
    2264:	80 83       	st	Z, r24

		TCCR1B = Config_Ptr -> prescaler; /* Set the prescaler for Timer1 */
    2266:	ae e4       	ldi	r26, 0x4E	; 78
    2268:	b0 e0       	ldi	r27, 0x00	; 0
    226a:	e9 81       	ldd	r30, Y+1	; 0x01
    226c:	fa 81       	ldd	r31, Y+2	; 0x02
    226e:	84 81       	ldd	r24, Z+4	; 0x04
    2270:	8c 93       	st	X, r24
    2272:	1e c0       	rjmp	.+60     	; 0x22b0 <Timer1_init+0x8a>

	}

	else
	{
		OCR1A = Config_Ptr -> compare_value ; /* Put the compare value for Timer1 */
    2274:	aa e4       	ldi	r26, 0x4A	; 74
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	e9 81       	ldd	r30, Y+1	; 0x01
    227a:	fa 81       	ldd	r31, Y+2	; 0x02
    227c:	82 81       	ldd	r24, Z+2	; 0x02
    227e:	93 81       	ldd	r25, Z+3	; 0x03
    2280:	11 96       	adiw	r26, 0x01	; 1
    2282:	9c 93       	st	X, r25
    2284:	8e 93       	st	-X, r24

		TIMSK |= (1<<OCIE1A);  /* Output Compare A Match Interrupt Enable */
    2286:	a9 e5       	ldi	r26, 0x59	; 89
    2288:	b0 e0       	ldi	r27, 0x00	; 0
    228a:	e9 e5       	ldi	r30, 0x59	; 89
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	80 81       	ld	r24, Z
    2290:	80 61       	ori	r24, 0x10	; 16
    2292:	8c 93       	st	X, r24

		/*  1. Active for non-PWM mode.
		 *  2. Choose CTC Mode.
		 */
		TCCR1A = (1<<FOC1A);
    2294:	ef e4       	ldi	r30, 0x4F	; 79
    2296:	f0 e0       	ldi	r31, 0x00	; 0
    2298:	88 e0       	ldi	r24, 0x08	; 8
    229a:	80 83       	st	Z, r24


		/*
		 * Choose the prescaler and mode.
		 */
		TCCR1B = Config_Ptr->prescaler | Config_Ptr->mode;
    229c:	ae e4       	ldi	r26, 0x4E	; 78
    229e:	b0 e0       	ldi	r27, 0x00	; 0
    22a0:	e9 81       	ldd	r30, Y+1	; 0x01
    22a2:	fa 81       	ldd	r31, Y+2	; 0x02
    22a4:	94 81       	ldd	r25, Z+4	; 0x04
    22a6:	e9 81       	ldd	r30, Y+1	; 0x01
    22a8:	fa 81       	ldd	r31, Y+2	; 0x02
    22aa:	85 81       	ldd	r24, Z+5	; 0x05
    22ac:	89 2b       	or	r24, r25
    22ae:	8c 93       	st	X, r24
	}
}
    22b0:	0f 90       	pop	r0
    22b2:	0f 90       	pop	r0
    22b4:	cf 91       	pop	r28
    22b6:	df 91       	pop	r29
    22b8:	08 95       	ret

000022ba <Timer1_deInit>:
/*
 * Description :
 * Function to deinitialization Timer1.
 */
void Timer1_deInit(void)
{
    22ba:	df 93       	push	r29
    22bc:	cf 93       	push	r28
    22be:	cd b7       	in	r28, 0x3d	; 61
    22c0:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    22c2:	ec e4       	ldi	r30, 0x4C	; 76
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	11 82       	std	Z+1, r1	; 0x01
    22c8:	10 82       	st	Z, r1

	TCCR1B = 0;
    22ca:	ee e4       	ldi	r30, 0x4E	; 78
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	10 82       	st	Z, r1
}
    22d0:	cf 91       	pop	r28
    22d2:	df 91       	pop	r29
    22d4:	08 95       	ret

000022d6 <Timer1_setCallBack>:
/*
 * Description :
 * Function to set the Call Back function address.
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    22d6:	df 93       	push	r29
    22d8:	cf 93       	push	r28
    22da:	00 d0       	rcall	.+0      	; 0x22dc <Timer1_setCallBack+0x6>
    22dc:	cd b7       	in	r28, 0x3d	; 61
    22de:	de b7       	in	r29, 0x3e	; 62
    22e0:	9a 83       	std	Y+2, r25	; 0x02
    22e2:	89 83       	std	Y+1, r24	; 0x01
	calling_ISR = a_ptr;
    22e4:	89 81       	ldd	r24, Y+1	; 0x01
    22e6:	9a 81       	ldd	r25, Y+2	; 0x02
    22e8:	90 93 78 00 	sts	0x0078, r25
    22ec:	80 93 77 00 	sts	0x0077, r24
}
    22f0:	0f 90       	pop	r0
    22f2:	0f 90       	pop	r0
    22f4:	cf 91       	pop	r28
    22f6:	df 91       	pop	r29
    22f8:	08 95       	ret

000022fa <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    22fa:	df 93       	push	r29
    22fc:	cf 93       	push	r28
    22fe:	00 d0       	rcall	.+0      	; 0x2300 <TWI_init+0x6>
    2300:	cd b7       	in	r28, 0x3d	; 61
    2302:	de b7       	in	r29, 0x3e	; 62
    2304:	9a 83       	std	Y+2, r25	; 0x02
    2306:	89 83       	std	Y+1, r24	; 0x01
    /* Initiate the I2C with its configurable baud rate and slave address */
    TWBR = Config_Ptr->bit_rate;
    2308:	a0 e2       	ldi	r26, 0x20	; 32
    230a:	b0 e0       	ldi	r27, 0x00	; 0
    230c:	e9 81       	ldd	r30, Y+1	; 0x01
    230e:	fa 81       	ldd	r31, Y+2	; 0x02
    2310:	81 81       	ldd	r24, Z+1	; 0x01
    2312:	8c 93       	st	X, r24
	TWSR = 0x00;
    2314:	e1 e2       	ldi	r30, 0x21	; 33
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = ((Config_Ptr->address)<<1);
    231a:	a2 e2       	ldi	r26, 0x22	; 34
    231c:	b0 e0       	ldi	r27, 0x00	; 0
    231e:	e9 81       	ldd	r30, Y+1	; 0x01
    2320:	fa 81       	ldd	r31, Y+2	; 0x02
    2322:	80 81       	ld	r24, Z
    2324:	88 0f       	add	r24, r24
    2326:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    2328:	e6 e5       	ldi	r30, 0x56	; 86
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	84 e0       	ldi	r24, 0x04	; 4
    232e:	80 83       	st	Z, r24
}
    2330:	0f 90       	pop	r0
    2332:	0f 90       	pop	r0
    2334:	cf 91       	pop	r28
    2336:	df 91       	pop	r29
    2338:	08 95       	ret

0000233a <TWI_start>:

void TWI_start(void)
{
    233a:	df 93       	push	r29
    233c:	cf 93       	push	r28
    233e:	cd b7       	in	r28, 0x3d	; 61
    2340:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2342:	e6 e5       	ldi	r30, 0x56	; 86
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	84 ea       	ldi	r24, 0xA4	; 164
    2348:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    234a:	e6 e5       	ldi	r30, 0x56	; 86
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	88 23       	and	r24, r24
    2352:	dc f7       	brge	.-10     	; 0x234a <TWI_start+0x10>
}
    2354:	cf 91       	pop	r28
    2356:	df 91       	pop	r29
    2358:	08 95       	ret

0000235a <TWI_stop>:

void TWI_stop(void)
{
    235a:	df 93       	push	r29
    235c:	cf 93       	push	r28
    235e:	cd b7       	in	r28, 0x3d	; 61
    2360:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2362:	e6 e5       	ldi	r30, 0x56	; 86
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	84 e9       	ldi	r24, 0x94	; 148
    2368:	80 83       	st	Z, r24
}
    236a:	cf 91       	pop	r28
    236c:	df 91       	pop	r29
    236e:	08 95       	ret

00002370 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2370:	df 93       	push	r29
    2372:	cf 93       	push	r28
    2374:	0f 92       	push	r0
    2376:	cd b7       	in	r28, 0x3d	; 61
    2378:	de b7       	in	r29, 0x3e	; 62
    237a:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    237c:	e3 e2       	ldi	r30, 0x23	; 35
    237e:	f0 e0       	ldi	r31, 0x00	; 0
    2380:	89 81       	ldd	r24, Y+1	; 0x01
    2382:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    2384:	e6 e5       	ldi	r30, 0x56	; 86
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	84 e8       	ldi	r24, 0x84	; 132
    238a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    238c:	e6 e5       	ldi	r30, 0x56	; 86
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	80 81       	ld	r24, Z
    2392:	88 23       	and	r24, r24
    2394:	dc f7       	brge	.-10     	; 0x238c <TWI_writeByte+0x1c>
}
    2396:	0f 90       	pop	r0
    2398:	cf 91       	pop	r28
    239a:	df 91       	pop	r29
    239c:	08 95       	ret

0000239e <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    239e:	df 93       	push	r29
    23a0:	cf 93       	push	r28
    23a2:	cd b7       	in	r28, 0x3d	; 61
    23a4:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    23a6:	e6 e5       	ldi	r30, 0x56	; 86
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	84 ec       	ldi	r24, 0xC4	; 196
    23ac:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    23ae:	e6 e5       	ldi	r30, 0x56	; 86
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	80 81       	ld	r24, Z
    23b4:	88 23       	and	r24, r24
    23b6:	dc f7       	brge	.-10     	; 0x23ae <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    23b8:	e3 e2       	ldi	r30, 0x23	; 35
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	80 81       	ld	r24, Z
}
    23be:	cf 91       	pop	r28
    23c0:	df 91       	pop	r29
    23c2:	08 95       	ret

000023c4 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    23c4:	df 93       	push	r29
    23c6:	cf 93       	push	r28
    23c8:	cd b7       	in	r28, 0x3d	; 61
    23ca:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    23cc:	e6 e5       	ldi	r30, 0x56	; 86
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	84 e8       	ldi	r24, 0x84	; 132
    23d2:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    23d4:	e6 e5       	ldi	r30, 0x56	; 86
    23d6:	f0 e0       	ldi	r31, 0x00	; 0
    23d8:	80 81       	ld	r24, Z
    23da:	88 23       	and	r24, r24
    23dc:	dc f7       	brge	.-10     	; 0x23d4 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    23de:	e3 e2       	ldi	r30, 0x23	; 35
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	80 81       	ld	r24, Z
}
    23e4:	cf 91       	pop	r28
    23e6:	df 91       	pop	r29
    23e8:	08 95       	ret

000023ea <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    23ea:	df 93       	push	r29
    23ec:	cf 93       	push	r28
    23ee:	0f 92       	push	r0
    23f0:	cd b7       	in	r28, 0x3d	; 61
    23f2:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    23f4:	e1 e2       	ldi	r30, 0x21	; 33
    23f6:	f0 e0       	ldi	r31, 0x00	; 0
    23f8:	80 81       	ld	r24, Z
    23fa:	88 7f       	andi	r24, 0xF8	; 248
    23fc:	89 83       	std	Y+1, r24	; 0x01
    return status;
    23fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2400:	0f 90       	pop	r0
    2402:	cf 91       	pop	r28
    2404:	df 91       	pop	r29
    2406:	08 95       	ret

00002408 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2408:	df 93       	push	r29
    240a:	cf 93       	push	r28
    240c:	00 d0       	rcall	.+0      	; 0x240e <UART_init+0x6>
    240e:	00 d0       	rcall	.+0      	; 0x2410 <UART_init+0x8>
    2410:	cd b7       	in	r28, 0x3d	; 61
    2412:	de b7       	in	r29, 0x3e	; 62
    2414:	9c 83       	std	Y+4, r25	; 0x04
    2416:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2418:	1a 82       	std	Y+2, r1	; 0x02
    241a:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    241c:	eb e2       	ldi	r30, 0x2B	; 43
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	82 e0       	ldi	r24, 0x02	; 2
    2422:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2424:	ea e2       	ldi	r30, 0x2A	; 42
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	88 e1       	ldi	r24, 0x18	; 24
    242a:	80 83       	st	Z, r24
	 * UPM1:0  =  parity bit
	 * USBS    = stop bit
	 * UCSZ1:0 =  data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (Config_Ptr -> parity) | (Config_Ptr -> bit_data) | (Config_Ptr -> stop_bit);
    242c:	a0 e4       	ldi	r26, 0x40	; 64
    242e:	b0 e0       	ldi	r27, 0x00	; 0
    2430:	eb 81       	ldd	r30, Y+3	; 0x03
    2432:	fc 81       	ldd	r31, Y+4	; 0x04
    2434:	91 81       	ldd	r25, Z+1	; 0x01
    2436:	eb 81       	ldd	r30, Y+3	; 0x03
    2438:	fc 81       	ldd	r31, Y+4	; 0x04
    243a:	80 81       	ld	r24, Z
    243c:	98 2b       	or	r25, r24
    243e:	eb 81       	ldd	r30, Y+3	; 0x03
    2440:	fc 81       	ldd	r31, Y+4	; 0x04
    2442:	82 81       	ldd	r24, Z+2	; 0x02
    2444:	89 2b       	or	r24, r25
    2446:	80 68       	ori	r24, 0x80	; 128
    2448:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr -> baud_rate * 8UL))) - 1);
    244a:	eb 81       	ldd	r30, Y+3	; 0x03
    244c:	fc 81       	ldd	r31, Y+4	; 0x04
    244e:	83 81       	ldd	r24, Z+3	; 0x03
    2450:	94 81       	ldd	r25, Z+4	; 0x04
    2452:	a5 81       	ldd	r26, Z+5	; 0x05
    2454:	b6 81       	ldd	r27, Z+6	; 0x06
    2456:	88 0f       	add	r24, r24
    2458:	99 1f       	adc	r25, r25
    245a:	aa 1f       	adc	r26, r26
    245c:	bb 1f       	adc	r27, r27
    245e:	88 0f       	add	r24, r24
    2460:	99 1f       	adc	r25, r25
    2462:	aa 1f       	adc	r26, r26
    2464:	bb 1f       	adc	r27, r27
    2466:	88 0f       	add	r24, r24
    2468:	99 1f       	adc	r25, r25
    246a:	aa 1f       	adc	r26, r26
    246c:	bb 1f       	adc	r27, r27
    246e:	9c 01       	movw	r18, r24
    2470:	ad 01       	movw	r20, r26
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	92 e1       	ldi	r25, 0x12	; 18
    2476:	aa e7       	ldi	r26, 0x7A	; 122
    2478:	b0 e0       	ldi	r27, 0x00	; 0
    247a:	bc 01       	movw	r22, r24
    247c:	cd 01       	movw	r24, r26
    247e:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__udivmodsi4>
    2482:	da 01       	movw	r26, r20
    2484:	c9 01       	movw	r24, r18
    2486:	01 97       	sbiw	r24, 0x01	; 1
    2488:	9a 83       	std	Y+2, r25	; 0x02
    248a:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    248c:	e0 e4       	ldi	r30, 0x40	; 64
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	89 81       	ldd	r24, Y+1	; 0x01
    2492:	9a 81       	ldd	r25, Y+2	; 0x02
    2494:	89 2f       	mov	r24, r25
    2496:	99 27       	eor	r25, r25
    2498:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    249a:	e9 e2       	ldi	r30, 0x29	; 41
    249c:	f0 e0       	ldi	r31, 0x00	; 0
    249e:	89 81       	ldd	r24, Y+1	; 0x01
    24a0:	80 83       	st	Z, r24
}
    24a2:	0f 90       	pop	r0
    24a4:	0f 90       	pop	r0
    24a6:	0f 90       	pop	r0
    24a8:	0f 90       	pop	r0
    24aa:	cf 91       	pop	r28
    24ac:	df 91       	pop	r29
    24ae:	08 95       	ret

000024b0 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    24b0:	df 93       	push	r29
    24b2:	cf 93       	push	r28
    24b4:	0f 92       	push	r0
    24b6:	cd b7       	in	r28, 0x3d	; 61
    24b8:	de b7       	in	r29, 0x3e	; 62
    24ba:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    24bc:	eb e2       	ldi	r30, 0x2B	; 43
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	80 81       	ld	r24, Z
    24c2:	88 2f       	mov	r24, r24
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	80 72       	andi	r24, 0x20	; 32
    24c8:	90 70       	andi	r25, 0x00	; 0
    24ca:	00 97       	sbiw	r24, 0x00	; 0
    24cc:	b9 f3       	breq	.-18     	; 0x24bc <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    24ce:	ec e2       	ldi	r30, 0x2C	; 44
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	89 81       	ldd	r24, Y+1	; 0x01
    24d4:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    24d6:	0f 90       	pop	r0
    24d8:	cf 91       	pop	r28
    24da:	df 91       	pop	r29
    24dc:	08 95       	ret

000024de <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    24de:	df 93       	push	r29
    24e0:	cf 93       	push	r28
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    24e6:	eb e2       	ldi	r30, 0x2B	; 43
    24e8:	f0 e0       	ldi	r31, 0x00	; 0
    24ea:	80 81       	ld	r24, Z
    24ec:	88 23       	and	r24, r24
    24ee:	dc f7       	brge	.-10     	; 0x24e6 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    24f0:	ec e2       	ldi	r30, 0x2C	; 44
    24f2:	f0 e0       	ldi	r31, 0x00	; 0
    24f4:	80 81       	ld	r24, Z
}
    24f6:	cf 91       	pop	r28
    24f8:	df 91       	pop	r29
    24fa:	08 95       	ret

000024fc <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    24fc:	df 93       	push	r29
    24fe:	cf 93       	push	r28
    2500:	00 d0       	rcall	.+0      	; 0x2502 <UART_sendString+0x6>
    2502:	0f 92       	push	r0
    2504:	cd b7       	in	r28, 0x3d	; 61
    2506:	de b7       	in	r29, 0x3e	; 62
    2508:	9b 83       	std	Y+3, r25	; 0x03
    250a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    250c:	19 82       	std	Y+1, r1	; 0x01
    250e:	0e c0       	rjmp	.+28     	; 0x252c <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2510:	89 81       	ldd	r24, Y+1	; 0x01
    2512:	28 2f       	mov	r18, r24
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	8a 81       	ldd	r24, Y+2	; 0x02
    2518:	9b 81       	ldd	r25, Y+3	; 0x03
    251a:	fc 01       	movw	r30, r24
    251c:	e2 0f       	add	r30, r18
    251e:	f3 1f       	adc	r31, r19
    2520:	80 81       	ld	r24, Z
    2522:	0e 94 58 12 	call	0x24b0	; 0x24b0 <UART_sendByte>
		i++;
    2526:	89 81       	ldd	r24, Y+1	; 0x01
    2528:	8f 5f       	subi	r24, 0xFF	; 255
    252a:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    252c:	89 81       	ldd	r24, Y+1	; 0x01
    252e:	28 2f       	mov	r18, r24
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	8a 81       	ldd	r24, Y+2	; 0x02
    2534:	9b 81       	ldd	r25, Y+3	; 0x03
    2536:	fc 01       	movw	r30, r24
    2538:	e2 0f       	add	r30, r18
    253a:	f3 1f       	adc	r31, r19
    253c:	80 81       	ld	r24, Z
    253e:	88 23       	and	r24, r24
    2540:	39 f7       	brne	.-50     	; 0x2510 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2542:	0f 90       	pop	r0
    2544:	0f 90       	pop	r0
    2546:	0f 90       	pop	r0
    2548:	cf 91       	pop	r28
    254a:	df 91       	pop	r29
    254c:	08 95       	ret

0000254e <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    254e:	0f 93       	push	r16
    2550:	1f 93       	push	r17
    2552:	df 93       	push	r29
    2554:	cf 93       	push	r28
    2556:	00 d0       	rcall	.+0      	; 0x2558 <UART_receiveString+0xa>
    2558:	0f 92       	push	r0
    255a:	cd b7       	in	r28, 0x3d	; 61
    255c:	de b7       	in	r29, 0x3e	; 62
    255e:	9b 83       	std	Y+3, r25	; 0x03
    2560:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2562:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2564:	89 81       	ldd	r24, Y+1	; 0x01
    2566:	28 2f       	mov	r18, r24
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	8a 81       	ldd	r24, Y+2	; 0x02
    256c:	9b 81       	ldd	r25, Y+3	; 0x03
    256e:	8c 01       	movw	r16, r24
    2570:	02 0f       	add	r16, r18
    2572:	13 1f       	adc	r17, r19
    2574:	0e 94 6f 12 	call	0x24de	; 0x24de <UART_recieveByte>
    2578:	f8 01       	movw	r30, r16
    257a:	80 83       	st	Z, r24
    257c:	0f c0       	rjmp	.+30     	; 0x259c <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    257e:	89 81       	ldd	r24, Y+1	; 0x01
    2580:	8f 5f       	subi	r24, 0xFF	; 255
    2582:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2584:	89 81       	ldd	r24, Y+1	; 0x01
    2586:	28 2f       	mov	r18, r24
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	8a 81       	ldd	r24, Y+2	; 0x02
    258c:	9b 81       	ldd	r25, Y+3	; 0x03
    258e:	8c 01       	movw	r16, r24
    2590:	02 0f       	add	r16, r18
    2592:	13 1f       	adc	r17, r19
    2594:	0e 94 6f 12 	call	0x24de	; 0x24de <UART_recieveByte>
    2598:	f8 01       	movw	r30, r16
    259a:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    259c:	89 81       	ldd	r24, Y+1	; 0x01
    259e:	28 2f       	mov	r18, r24
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	8a 81       	ldd	r24, Y+2	; 0x02
    25a4:	9b 81       	ldd	r25, Y+3	; 0x03
    25a6:	fc 01       	movw	r30, r24
    25a8:	e2 0f       	add	r30, r18
    25aa:	f3 1f       	adc	r31, r19
    25ac:	80 81       	ld	r24, Z
    25ae:	83 32       	cpi	r24, 0x23	; 35
    25b0:	31 f7       	brne	.-52     	; 0x257e <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    25b2:	89 81       	ldd	r24, Y+1	; 0x01
    25b4:	28 2f       	mov	r18, r24
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ba:	9b 81       	ldd	r25, Y+3	; 0x03
    25bc:	fc 01       	movw	r30, r24
    25be:	e2 0f       	add	r30, r18
    25c0:	f3 1f       	adc	r31, r19
    25c2:	10 82       	st	Z, r1
}
    25c4:	0f 90       	pop	r0
    25c6:	0f 90       	pop	r0
    25c8:	0f 90       	pop	r0
    25ca:	cf 91       	pop	r28
    25cc:	df 91       	pop	r29
    25ce:	1f 91       	pop	r17
    25d0:	0f 91       	pop	r16
    25d2:	08 95       	ret

000025d4 <__udivmodhi4>:
    25d4:	aa 1b       	sub	r26, r26
    25d6:	bb 1b       	sub	r27, r27
    25d8:	51 e1       	ldi	r21, 0x11	; 17
    25da:	07 c0       	rjmp	.+14     	; 0x25ea <__udivmodhi4_ep>

000025dc <__udivmodhi4_loop>:
    25dc:	aa 1f       	adc	r26, r26
    25de:	bb 1f       	adc	r27, r27
    25e0:	a6 17       	cp	r26, r22
    25e2:	b7 07       	cpc	r27, r23
    25e4:	10 f0       	brcs	.+4      	; 0x25ea <__udivmodhi4_ep>
    25e6:	a6 1b       	sub	r26, r22
    25e8:	b7 0b       	sbc	r27, r23

000025ea <__udivmodhi4_ep>:
    25ea:	88 1f       	adc	r24, r24
    25ec:	99 1f       	adc	r25, r25
    25ee:	5a 95       	dec	r21
    25f0:	a9 f7       	brne	.-22     	; 0x25dc <__udivmodhi4_loop>
    25f2:	80 95       	com	r24
    25f4:	90 95       	com	r25
    25f6:	bc 01       	movw	r22, r24
    25f8:	cd 01       	movw	r24, r26
    25fa:	08 95       	ret

000025fc <__udivmodsi4>:
    25fc:	a1 e2       	ldi	r26, 0x21	; 33
    25fe:	1a 2e       	mov	r1, r26
    2600:	aa 1b       	sub	r26, r26
    2602:	bb 1b       	sub	r27, r27
    2604:	fd 01       	movw	r30, r26
    2606:	0d c0       	rjmp	.+26     	; 0x2622 <__udivmodsi4_ep>

00002608 <__udivmodsi4_loop>:
    2608:	aa 1f       	adc	r26, r26
    260a:	bb 1f       	adc	r27, r27
    260c:	ee 1f       	adc	r30, r30
    260e:	ff 1f       	adc	r31, r31
    2610:	a2 17       	cp	r26, r18
    2612:	b3 07       	cpc	r27, r19
    2614:	e4 07       	cpc	r30, r20
    2616:	f5 07       	cpc	r31, r21
    2618:	20 f0       	brcs	.+8      	; 0x2622 <__udivmodsi4_ep>
    261a:	a2 1b       	sub	r26, r18
    261c:	b3 0b       	sbc	r27, r19
    261e:	e4 0b       	sbc	r30, r20
    2620:	f5 0b       	sbc	r31, r21

00002622 <__udivmodsi4_ep>:
    2622:	66 1f       	adc	r22, r22
    2624:	77 1f       	adc	r23, r23
    2626:	88 1f       	adc	r24, r24
    2628:	99 1f       	adc	r25, r25
    262a:	1a 94       	dec	r1
    262c:	69 f7       	brne	.-38     	; 0x2608 <__udivmodsi4_loop>
    262e:	60 95       	com	r22
    2630:	70 95       	com	r23
    2632:	80 95       	com	r24
    2634:	90 95       	com	r25
    2636:	9b 01       	movw	r18, r22
    2638:	ac 01       	movw	r20, r24
    263a:	bd 01       	movw	r22, r26
    263c:	cf 01       	movw	r24, r30
    263e:	08 95       	ret

00002640 <__prologue_saves__>:
    2640:	2f 92       	push	r2
    2642:	3f 92       	push	r3
    2644:	4f 92       	push	r4
    2646:	5f 92       	push	r5
    2648:	6f 92       	push	r6
    264a:	7f 92       	push	r7
    264c:	8f 92       	push	r8
    264e:	9f 92       	push	r9
    2650:	af 92       	push	r10
    2652:	bf 92       	push	r11
    2654:	cf 92       	push	r12
    2656:	df 92       	push	r13
    2658:	ef 92       	push	r14
    265a:	ff 92       	push	r15
    265c:	0f 93       	push	r16
    265e:	1f 93       	push	r17
    2660:	cf 93       	push	r28
    2662:	df 93       	push	r29
    2664:	cd b7       	in	r28, 0x3d	; 61
    2666:	de b7       	in	r29, 0x3e	; 62
    2668:	ca 1b       	sub	r28, r26
    266a:	db 0b       	sbc	r29, r27
    266c:	0f b6       	in	r0, 0x3f	; 63
    266e:	f8 94       	cli
    2670:	de bf       	out	0x3e, r29	; 62
    2672:	0f be       	out	0x3f, r0	; 63
    2674:	cd bf       	out	0x3d, r28	; 61
    2676:	09 94       	ijmp

00002678 <__epilogue_restores__>:
    2678:	2a 88       	ldd	r2, Y+18	; 0x12
    267a:	39 88       	ldd	r3, Y+17	; 0x11
    267c:	48 88       	ldd	r4, Y+16	; 0x10
    267e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2680:	6e 84       	ldd	r6, Y+14	; 0x0e
    2682:	7d 84       	ldd	r7, Y+13	; 0x0d
    2684:	8c 84       	ldd	r8, Y+12	; 0x0c
    2686:	9b 84       	ldd	r9, Y+11	; 0x0b
    2688:	aa 84       	ldd	r10, Y+10	; 0x0a
    268a:	b9 84       	ldd	r11, Y+9	; 0x09
    268c:	c8 84       	ldd	r12, Y+8	; 0x08
    268e:	df 80       	ldd	r13, Y+7	; 0x07
    2690:	ee 80       	ldd	r14, Y+6	; 0x06
    2692:	fd 80       	ldd	r15, Y+5	; 0x05
    2694:	0c 81       	ldd	r16, Y+4	; 0x04
    2696:	1b 81       	ldd	r17, Y+3	; 0x03
    2698:	aa 81       	ldd	r26, Y+2	; 0x02
    269a:	b9 81       	ldd	r27, Y+1	; 0x01
    269c:	ce 0f       	add	r28, r30
    269e:	d1 1d       	adc	r29, r1
    26a0:	0f b6       	in	r0, 0x3f	; 63
    26a2:	f8 94       	cli
    26a4:	de bf       	out	0x3e, r29	; 62
    26a6:	0f be       	out	0x3f, r0	; 63
    26a8:	cd bf       	out	0x3d, r28	; 61
    26aa:	ed 01       	movw	r28, r26
    26ac:	08 95       	ret

000026ae <_exit>:
    26ae:	f8 94       	cli

000026b0 <__stop_program>:
    26b0:	ff cf       	rjmp	.-2      	; 0x26b0 <__stop_program>
